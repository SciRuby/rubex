#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 752)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'117,118,120,277,65,277,216,121,379,74,142,143,144,19,74,87,253,7,98',
'146,132,254,128,163,129,131,374,98,122,219,164,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,73,147',
'71,135,71,295,217,66,97,209,176,145,148,106,341,94,331,156,5,340,105',
'6,288,98,151,98,203,204,203,204,154,208,141,162,157,95,117,118,120,158',
'138,139,140,121,203,204,142,143,144,19,183,87,351,203,204,146,132,350',
'128,163,129,131,203,204,122,98,164,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,22,147,367,135,5',
'203,204,6,401,209,25,145,148,394,29,19,351,156,18,23,5,350,373,6,151',
'94,98,30,203,204,154,17,141,162,157,362,117,118,120,158,138,139,140',
'121,31,95,142,143,144,19,415,87,366,203,204,146,132,350,128,163,129',
'131,203,204,122,98,164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,60,61,155,22,147,5,135,5,6,216,6,217,181',
'33,145,148,183,69,19,181,156,5,23,183,6,215,5,151,71,6,75,98,213,154',
'17,141,162,157,98,117,118,120,158,138,139,140,121,203,204,142,143,144',
'19,5,87,71,6,5,146,132,6,128,163,129,131,5,79,122,6,164,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61',
'155,22,147,216,135,217,227,228,229,230,231,232,145,148,5,88,19,6,156',
'215,23,5,93,369,6,151,368,229,230,231,232,154,17,141,162,157,96,117',
'118,120,158,138,139,140,121,203,204,142,143,144,19,5,87,66,6,5,146,132',
'6,128,163,129,131,5,69,122,6,164,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,107,147,169,135,227',
'228,229,230,231,232,71,145,148,229,230,231,232,156,203,204,203,204,203',
'204,151,71,371,385,386,177,154,178,141,162,157,180,117,118,120,158,138',
'139,140,121,284,285,142,143,144,19,185,87,286,287,188,146,132,196,128',
'163,129,131,203,204,122,196,164,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,207,147,218,135,203',
'204,203,204,385,386,71,145,148,71,252,255,257,156,71,263,169,169,217',
'209,151,216,279,293,298,299,154,301,141,162,157,71,117,118,120,158,138',
'139,140,121,333,231,142,143,144,19,71,87,257,347,188,146,132,354,128',
'163,129,131,355,356,122,203,164,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,362,147,215,135,231',
'231,231,231,209,377,381,145,148,387,390,391,395,156,299,397,71,400,98',
'169,151,404,410,209,420,169,154,,141,162,157,,117,118,120,158,138,139',
'140,121,,,142,143,144,19,,87,,,,146,132,,128,163,129,131,,,122,,164',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,155,,147,,135,,,,,,,,145,148,,,,,156,,,,,,,151,,,,,,154',
',141,162,157,,117,118,120,158,138,139,140,121,,,142,143,144,19,,87,',
',,146,132,,128,163,129,131,,,122,,164,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,,147,,135,5,',
',6,,,,145,148,,,,,156,,,,,,,151,,,,,,154,,141,162,157,,117,118,120,158',
'138,139,140,121,,,142,143,144,19,,87,,,,146,132,,128,163,129,131,,,122',
',164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,60,61,155,,147,,135,5,,,6,,,,145,148,,,,,156,,,,,,,151,',
',,,,154,,141,162,157,,117,118,120,158,138,139,140,121,,,142,143,144',
'19,,87,,,,146,132,,128,163,129,131,,,122,,164,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,155,,147,,135',
',,,,,,,145,148,,,,,156,,,,,,,151,,,,,,154,,141,162,157,,117,118,120',
'158,138,139,140,121,,,142,143,144,19,,87,,,,146,132,,128,163,129,131',
',,122,,164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,60,61,155,,147,,135,5,,22,6,,,,145,148,,,,,156,142',
'143,144,19,,,151,23,,146,,,154,163,141,162,157,,,17,164,158,138,139',
'140,,142,143,144,,,,,,,146,22,,,163,,,,,,,164,,155,,147,19,193,5,18',
'23,6,,,,145,148,,,,22,156,17,,,,,,151,155,,147,,193,154,19,141,162,157',
'23,,145,148,158,138,139,140,156,142,143,144,17,,,151,,5,146,,6,154,163',
'141,162,157,,,,164,158,138,139,140,,142,143,144,,,,22,378,,146,,5,,163',
'6,,,,,,164,19,199,,147,23,193,227,228,229,230,231,232,,145,148,,17,',
',156,,,,,,234,235,155,,147,,193,,,141,162,157,,,145,148,158,138,139',
'140,156,142,143,144,,5,,151,6,,146,,,154,163,141,162,157,,,,164,158',
'138,139,140,,142,143,144,,,,,,,146,,,,163,,,,,,,164,,155,,147,,193,227',
'228,229,230,231,232,,145,148,,,,,156,,,,,233,234,235,155,,147,,193,154',
',141,162,157,,,145,148,158,138,139,140,156,142,143,144,,,,151,,,146',
',,154,163,141,162,157,,,,164,158,138,139,140,,142,143,144,,,,,,,146',
',,,163,,,,,,,164,,155,,147,,193,,,,,,,,145,148,,,,,156,,,,,,,151,249',
',147,,193,154,,141,162,157,,,145,148,158,138,139,140,156,142,143,144',
',,,,,,146,,,,163,141,162,157,,,,164,158,138,139,140,,142,143,144,,,',
',,,146,,,,163,,,,,,,164,,249,,147,,193,227,228,229,230,231,232,,145',
'148,,,,,156,,,,,233,234,235,249,,147,,193,,,141,162,157,,,145,148,158',
'138,139,140,156,142,143,144,,,,,,,146,,,,163,141,162,157,,,,164,158',
'138,139,140,,142,143,144,,,,,,,146,,,,163,,,,,,,164,,155,,147,,193,',
',,,,,,145,148,,,,,156,,,,,,,151,155,,147,,193,154,,141,162,157,,,145',
'148,158,138,139,140,156,142,143,144,,,,151,,,146,,,154,163,141,162,157',
',,,164,158,138,139,140,,142,143,144,,,,,,,146,,,,163,,,,,,,164,,249',
',147,,193,,,,,,,,145,148,,,,,156,,,,,,,,155,,147,,193,,,141,162,157',
',,145,148,158,138,139,140,156,142,143,144,,,,151,,,146,,,154,163,141',
'162,157,,,,164,158,138,139,140,,142,143,144,,,,,,,146,,,,163,,,,,,,164',
',155,,147,,193,,,,,,,,145,148,,,,,156,,,,,,,151,155,,147,,193,154,,141',
'162,157,,,145,148,158,138,139,140,156,142,143,144,,,,151,,,146,,,154',
'163,141,162,157,,,,164,158,138,139,140,,142,143,144,,,,,,,146,,,,163',
',,,,,,164,,155,,147,,193,,,,,,,,145,148,,,,,156,,,,,,,151,155,,147,',
'193,154,,141,162,157,,,145,148,158,138,139,140,156,142,143,144,,,,151',
',,146,,,154,163,141,162,157,,,,164,158,138,139,140,,142,143,144,,,,',
',,146,,,,163,,,,,,,164,,155,,147,,193,,,,,,,,145,148,,,,,156,,,,,,,151',
'155,,147,,193,154,,141,162,157,,,145,148,158,138,139,140,156,142,143',
'144,,,,151,,,146,,,154,163,141,162,157,,,,164,158,138,139,140,,142,143',
'144,,,,,,,146,,,,163,,,,,,,164,,155,,147,,193,,,,,,,,145,148,,,,,156',
',,,,,,151,155,,147,,193,154,,141,162,157,,,145,148,158,138,139,140,156',
'142,143,144,,,,151,,,146,,,154,163,141,162,157,142,143,144,164,158,138',
'139,140,,146,,,,163,,,,,,,164,,,,,,,142,143,144,,155,,147,,193,146,',
',,163,,,145,148,,,164,,156,147,,193,,,,151,,,,145,148,154,,141,162,157',
',,,,158,138,139,140,249,,147,,193,,141,162,142,143,144,,145,148,138',
'139,140,146,156,,,163,,,,,,,164,,,,,141,162,157,,,,,158,138,139,140',
',,,,,,,,142,143,144,,249,,147,,193,146,,,,163,,,145,148,,,164,,156,',
',,,,,,,,,,,,,141,162,157,,,,,158,138,139,140,249,,147,,193,,142,143',
'144,,,332,145,148,,146,,,156,163,,,,,,,164,227,228,229,230,231,232,141',
'162,157,,,,,158,138,139,140,,233,234,235,236,237,142,143,144,,249,,147',
',193,146,,,,163,,,145,148,,,164,,156,,,,,,,,,,,,,,,141,162,157,,,,,158',
'138,139,140,249,,147,,193,,142,143,144,,,,145,148,,146,,,156,163,,,',
',,,164,227,228,229,230,231,232,141,162,157,,,,,158,138,139,140,,233',
'234,235,236,237,142,143,144,,249,,147,,193,146,,,,163,,,145,148,,,164',
',156,,,,,,,,,,,,,,,141,162,157,,,,,158,138,139,140,249,,147,,193,,142',
'143,144,,,,145,148,,146,,,156,163,,,,,,,164,227,228,229,230,231,232',
'141,162,157,,,,,158,138,139,140,,233,234,235,236,237,142,143,144,,249',
',147,,193,146,,,,163,,,145,148,,,164,,156,,,,,,,,,,,,,,,141,162,157',
',,,,158,138,139,140,249,,147,,193,,142,143,144,,,,145,148,,146,,,156',
'163,,,,,,,164,227,228,229,230,231,232,141,162,157,,,,,158,138,139,140',
',233,234,235,236,237,142,143,144,,249,,147,,193,146,,,,163,,,145,148',
',,164,,156,,,,,,,,,,,,,,,141,162,157,,,,,158,138,139,140,249,,147,,193',
',142,143,144,,,,145,148,,146,,,156,163,,,,,,,164,227,228,229,230,231',
'232,141,162,157,,,,,158,138,139,140,,233,234,235,236,237,142,143,144',
',249,,147,,193,146,,,,163,,,145,148,,,164,,156,,,,,,,,,,,,,,,141,162',
'157,,,,,158,138,139,140,249,,147,,193,,142,143,144,,,,145,148,,146,',
',156,163,,,,,,,164,227,228,229,230,231,232,141,162,157,,,,,158,138,139',
'140,,233,234,235,236,237,142,143,144,,249,,147,,193,146,,,,163,,,145',
'148,,,164,,156,,,,,,,,,,,,,,,141,162,157,,,,,158,138,139,140,249,,147',
',193,,142,143,144,,,,145,148,,146,,,156,163,,,,,,,164,227,228,229,230',
'231,232,141,162,157,,,,,158,138,139,140,,233,234,235,236,237,142,143',
'144,,249,,147,,193,146,,,,163,,,145,148,,,164,,156,,,,,,,,,,,,,,,141',
'162,157,,,,,158,138,139,140,249,,147,,193,,142,143,144,,,,145,148,,146',
',,156,163,,,,,,,164,,,,,,,141,162,157,,,,,158,138,139,140,,,,,142,143',
'144,,,,249,,147,146,193,,,163,142,143,144,,145,148,164,,,146,156,,,163',
',,,,,,164,,,,,141,162,157,,,,,158,138,139,140,147,,193,,,,,,,,145,148',
'155,,147,,193,,,,,,,,145,148,,,,,156,141,162,,,,,151,,138,139,140,,154',
',141,162,157,142,143,144,,158,138,139,140,,146,,,,163,,,,,,,164,,,,',
',142,143,144,,,,,,,146,,,,163,,,,,,,164,,155,,147,,193,,,,,,,,145,148',
',,,,156,,,,,,,151,155,,147,,193,154,,141,162,157,,,145,148,158,138,139',
'140,156,142,143,144,,,,151,,,146,,,154,163,141,162,157,,,,164,158,138',
'139,140,,142,143,144,,,,,,,146,,,,163,,,,,,,164,,,,147,,193,,,,,,,,145',
'148,,,,,,,,,,,,,155,,147,,193,,,141,162,,,,145,148,,138,139,140,156',
'142,143,144,,,,151,,,146,,,154,163,141,162,157,,,,164,158,138,139,140',
',142,143,144,,,,,,,146,,,,163,,,,,,,164,,249,,147,,193,,,,,,,,145,148',
',,,,156,,,,,,,,249,,147,,193,,,141,162,157,,,145,148,158,138,139,140',
'156,142,143,144,,,,,,,146,332,,,163,141,162,157,,,,164,158,138,139,140',
',227,228,229,230,231,232,,238,240,241,242,243,,,,,,,233,234,235,236',
'237,,147,,193,,,,239,,,,145,148,174,,,227,228,229,230,231,232,,,,,,19',
',87,,,141,162,233,234,235,236,237,,138,139,140,,,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,19,,87,',
',5,,,6,,,,,,,,,,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,268,,,,,,81,,,,,,,,,,,,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,332,',
',,,,,,,,227,228,229,230,231,232,227,228,229,230,231,232,,,284,285,286',
'287,233,234,235,236,237,,233,234,235,236,237,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,,5,,,6',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,,-29,,,,,-29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,60,61,,,,,168,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,168,227',
'228,229,230,231,232,,238,240,241,242,243,,,,,,,233,234,235,236,237,',
',,,,,,239,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,227,228,229,230,231,232,,,284,285,286,287,,,,,,,233,234',
'235,236,237' ]
        racc_action_table = arr = ::Array.new(4048, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'92,92,92,197,29,405,137,92,346,32,92,92,92,92,209,92,165,1,313,92,92',
'165,92,92,92,92,313,346,92,137,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,32,92,197,92,405,209',
'295,29,76,133,103,92,92,87,259,295,245,92,0,259,87,0,202,76,92,103,197',
'197,405,405,92,133,92,92,92,295,187,187,187,92,92,92,92,187,245,245',
'187,187,187,187,270,187,274,127,127,187,187,274,187,187,187,187,190',
'190,187,270,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,2,187,304',
'187,187,202,202,187,375,312,7,187,187,360,17,2,291,187,2,2,3,291,312',
'3,187,73,375,18,304,304,187,2,187,187,187,360,206,206,206,187,187,187',
'187,206,19,73,206,206,206,206,402,206,303,273,273,206,206,303,206,206',
'206,206,275,275,206,402,206,206,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206',
'206,77,206,8,206,206,8,135,206,135,112,22,206,206,112,30,77,342,206',
'11,77,342,11,135,80,206,31,80,33,112,135,206,77,206,206,206,342,262',
'262,262,206,206,206,206,262,294,294,262,262,262,262,89,262,64,89,99',
'262,262,99,262,262,262,262,114,66,262,114,262,262,262,262,262,262,262',
'262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262',
'262,262,262,262,262,173,262,193,262,193,321,321,321,321,321,321,262',
'262,131,69,173,131,262,193,173,264,72,308,264,262,308,314,314,314,314',
'262,173,262,262,262,74,276,276,276,262,262,262,262,276,300,300,276,276',
'276,276,394,276,78,394,395,276,276,395,276,276,276,276,410,81,276,410',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,88,276,97,276,322,322',
'322,322,322,322,100,276,276,315,315,315,315,276,305,305,306,306,307',
'307,276,310,310,352,352,104,276,108,276,276,276,110,279,279,279,276',
'276,276,276,279,355,355,279,279,279,279,113,279,356,356,115,279,279',
'118,279,279,279,279,365,365,279,129,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,132,279,136,279,382,382,396,396,421,421,147,279,279',
'148,162,167,168,279,170,172,176,182,183,191,279,194,198,207,210,211',
'279,215,279,279,279,222,288,288,288,279,279,279,279,288,247,248,288',
'288,288,288,253,288,255,268,272,288,288,280,288,288,288,288,282,283',
'288,290,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,292,288,301',
'288,316,317,318,319,339,344,348,288,288,353,357,359,362,288,364,370',
'371,373,380,381,288,383,392,399,414,420,288,,288,288,288,,386,386,386',
'288,288,288,288,386,,,386,386,386,386,,386,,,,386,386,,386,386,386,386',
',,386,,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,,386,,386,,,,,,',
',386,386,,,,,386,,,,,,,386,,,,,,386,,386,386,386,,411,411,411,386,386',
'386,386,411,,,411,411,411,411,,411,,,,411,411,,411,411,411,411,,,411',
',411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,411,411,,411,,411,411,,,411',
',,,411,411,,,,,411,,,,,,,411,,,,,,411,,411,411,411,,412,412,412,411',
'411,411,411,412,,,412,412,412,412,,412,,,,412,412,,412,412,412,412,',
',412,,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,,412,,412,412,,',
'412,,,,412,412,,,,,412,,,,,,,412,,,,,,412,,412,412,412,,416,416,416',
'412,412,412,412,416,,,416,416,416,416,,416,,,,416,416,,416,416,416,416',
',,416,,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,416,416,416,,416,,416,,,,,,',
',416,416,,,,,416,,,,,,,416,,,,,,416,,416,416,416,,417,417,417,416,416',
'416,416,417,,,417,417,417,417,,417,,,,417,417,,417,417,417,417,,,417',
',417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,,417,,417,417,,28,417',
',,,417,417,,,,,417,117,117,117,28,,,417,28,,117,,,417,117,417,417,417',
',,28,117,417,417,417,417,,120,120,120,,,,,,,120,27,,,120,,,,,,,120,',
'117,,117,27,117,28,27,27,28,,,,117,117,,,,171,117,27,,,,,,117,120,,120',
',120,117,171,117,117,117,171,,120,120,117,117,117,117,120,121,121,121',
'171,,,120,,27,121,,27,120,121,120,120,120,,,,121,120,120,120,120,,122',
'122,122,,,,345,345,,122,,171,,122,171,,,,,,122,345,121,,121,345,121',
'320,320,320,320,320,320,,121,121,,345,,,121,,,,,,320,320,122,,122,,122',
',,121,121,121,,,122,122,121,121,121,121,122,150,150,150,,345,,122,345',
',150,,,122,150,122,122,122,,,,150,122,122,122,122,,154,154,154,,,,,',
',154,,,,154,,,,,,,154,,150,,150,,150,323,323,323,323,323,323,,150,150',
',,,,150,,,,,323,323,323,154,,154,,154,150,,150,150,150,,,154,154,150',
'150,150,150,154,155,155,155,,,,154,,,155,,,154,155,154,154,154,,,,155',
'154,154,154,154,,156,156,156,,,,,,,156,,,,156,,,,,,,156,,155,,155,,155',
',,,,,,,155,155,,,,,155,,,,,,,155,156,,156,,156,155,,155,155,155,,,156',
'156,155,155,155,155,156,157,157,157,,,,,,,157,,,,157,156,156,156,,,',
'157,156,156,156,156,,158,158,158,,,,,,,158,,,,158,,,,,,,158,,157,,157',
',157,324,324,324,324,324,324,,157,157,,,,,157,,,,,324,324,324,158,,158',
',158,,,157,157,157,,,158,158,157,157,157,157,158,188,188,188,,,,,,,188',
',,,188,158,158,158,,,,188,158,158,158,158,,195,195,195,,,,,,,195,,,',
'195,,,,,,,195,,188,,188,,188,,,,,,,,188,188,,,,,188,,,,,,,188,195,,195',
',195,188,,188,188,188,,,195,195,188,188,188,188,195,199,199,199,,,,195',
',,199,,,195,199,195,195,195,,,,199,195,195,195,195,,203,203,203,,,,',
',,203,,,,203,,,,,,,203,,199,,199,,199,,,,,,,,199,199,,,,,199,,,,,,,',
'203,,203,,203,,,199,199,199,,,203,203,199,199,199,199,203,204,204,204',
',,,203,,,204,,,203,204,203,203,203,,,,204,203,203,203,203,,205,205,205',
',,,,,,205,,,,205,,,,,,,205,,204,,204,,204,,,,,,,,204,204,,,,,204,,,',
',,,204,205,,205,,205,204,,204,204,204,,,205,205,204,204,204,204,205',
'208,208,208,,,,205,,,208,,,205,208,205,205,205,,,,208,205,205,205,205',
',213,213,213,,,,,,,213,,,,213,,,,,,,213,,208,,208,,208,,,,,,,,208,208',
',,,,208,,,,,,,208,213,,213,,213,208,,208,208,208,,,213,213,208,208,208',
'208,213,216,216,216,,,,213,,,216,,,213,216,213,213,213,,,,216,213,213',
'213,213,,217,217,217,,,,,,,217,,,,217,,,,,,,217,,216,,216,,216,,,,,',
',,216,216,,,,,216,,,,,,,216,217,,217,,217,216,,216,216,216,,,217,217',
'216,216,216,216,217,218,218,218,,,,217,,,218,,,217,218,217,217,217,',
',,218,217,217,217,217,,219,219,219,,,,,,,219,,,,219,,,,,,,219,,218,',
'218,,218,,,,,,,,218,218,,,,,218,,,,,,,218,219,,219,,219,218,,218,218',
'218,,,219,219,218,218,218,218,219,221,221,221,,,,219,,,221,,,219,221',
'219,219,219,224,224,224,221,219,219,219,219,,224,,,,224,,,,,,,224,,',
',,,,227,227,227,,221,,221,,221,227,,,,227,,,221,221,,,227,,221,224,',
'224,,,,221,,,,224,224,221,,221,221,221,,,,,221,221,221,221,227,,227',
',227,,224,224,228,228,228,,227,227,224,224,224,228,227,,,228,,,,,,,228',
',,,,227,227,227,,,,,227,227,227,227,,,,,,,,,229,229,229,,228,,228,,228',
'229,,,,229,,,228,228,,,229,,228,,,,,,,,,,,,,,,228,228,228,,,,,228,228',
'228,228,229,,229,,229,,230,230,230,,,334,229,229,,230,,,229,230,,,,',
',,230,334,334,334,334,334,334,229,229,229,,,,,229,229,229,229,,334,334',
'334,334,334,231,231,231,,230,,230,,230,231,,,,231,,,230,230,,,231,,230',
',,,,,,,,,,,,,,230,230,230,,,,,230,230,230,230,231,,231,,231,,232,232',
'232,,,,231,231,,232,,,231,232,,,,,,,232,325,325,325,325,325,325,231',
'231,231,,,,,231,231,231,231,,325,325,325,325,325,233,233,233,,232,,232',
',232,233,,,,233,,,232,232,,,233,,232,,,,,,,,,,,,,,,232,232,232,,,,,232',
'232,232,232,233,,233,,233,,234,234,234,,,,233,233,,234,,,233,234,,,',
',,,234,326,326,326,326,326,326,233,233,233,,,,,233,233,233,233,,326',
'326,326,326,326,235,235,235,,234,,234,,234,235,,,,235,,,234,234,,,235',
',234,,,,,,,,,,,,,,,234,234,234,,,,,234,234,234,234,235,,235,,235,,236',
'236,236,,,,235,235,,236,,,235,236,,,,,,,236,327,327,327,327,327,327',
'235,235,235,,,,,235,235,235,235,,327,327,327,327,327,237,237,237,,236',
',236,,236,237,,,,237,,,236,236,,,237,,236,,,,,,,,,,,,,,,236,236,236',
',,,,236,236,236,236,237,,237,,237,,238,238,238,,,,237,237,,238,,,237',
'238,,,,,,,238,328,328,328,328,328,328,237,237,237,,,,,237,237,237,237',
',328,328,328,328,328,239,239,239,,238,,238,,238,239,,,,239,,,238,238',
',,239,,238,,,,,,,,,,,,,,,238,238,238,,,,,238,238,238,238,239,,239,,239',
',240,240,240,,,,239,239,,240,,,239,240,,,,,,,240,329,329,329,329,329',
'329,239,239,239,,,,,239,239,239,239,,329,329,329,329,329,241,241,241',
',240,,240,,240,241,,,,241,,,240,240,,,241,,240,,,,,,,,,,,,,,,240,240',
'240,,,,,240,240,240,240,241,,241,,241,,242,242,242,,,,241,241,,242,',
',241,242,,,,,,,242,330,330,330,330,330,330,241,241,241,,,,,241,241,241',
'241,,330,330,330,330,330,243,243,243,,242,,242,,242,243,,,,243,,,242',
'242,,,243,,242,,,,,,,,,,,,,,,242,242,242,,,,,242,242,242,242,243,,243',
',243,,249,249,249,,,,243,243,,249,,,243,249,,,,,,,249,,,,,,,243,243',
'243,,,,,243,243,243,243,,,,,257,257,257,,,,249,,249,257,249,,,257,299',
'299,299,,249,249,257,,,299,249,,,299,,,,,,,299,,,,,249,249,249,,,,,249',
'249,249,249,257,,257,,,,,,,,257,257,299,,299,,299,,,,,,,,299,299,,,',
',299,257,257,,,,,299,,257,257,257,,299,,299,299,299,350,350,350,,299',
'299,299,299,,350,,,,350,,,,,,,350,,,,,,368,368,368,,,,,,,368,,,,368',
',,,,,,368,,350,,350,,350,,,,,,,,350,350,,,,,350,,,,,,,350,368,,368,',
'368,350,,350,350,350,,,368,368,350,350,350,350,368,372,372,372,,,,368',
',,372,,,368,372,368,368,368,,,,372,368,368,368,368,,385,385,385,,,,',
',,385,,,,385,,,,,,,385,,,,372,,372,,,,,,,,372,372,,,,,,,,,,,,,385,,385',
',385,,,372,372,,,,385,385,,372,372,372,385,388,388,388,,,,385,,,388',
',,385,388,385,385,385,,,,388,385,385,385,385,,389,389,389,,,,,,,389',
',,,389,,,,,,,389,,388,,388,,388,,,,,,,,388,388,,,,,388,,,,,,,,389,,389',
',389,,,388,388,388,,,389,389,388,388,388,388,389,398,398,398,,,,,,,398',
'246,,,398,389,389,389,,,,398,389,389,389,389,,246,246,246,246,246,246',
',246,246,246,246,246,,,,,,,246,246,246,246,246,,398,,398,,,,246,,,,398',
'398,101,,,407,407,407,407,407,407,,,,,,101,,101,,,398,398,407,407,407',
'407,407,,398,398,398,,,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,67,,67,',
',101,,,101,,,,,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,177,,,,,,67,,,,,,,,,,,,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,281,,,,,,,,,,408,408,408,408,408,408,281',
'281,281,281,281,281,,,281,281,281,281,408,408,408,408,408,,281,281,281',
'281,281,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,,,,,,109,,,109,169,169',
'169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169',
'169,169,169,169,169,169,169,169,,169,,,,,169,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,,,,,93,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,,,,,254,152,152,152,152,152,152',
',152,152,152,152,152,,,,,,,152,152,152,152,152,,,,,,,,152,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,151,151,151,151,151,151,151,151,151,151,151',
'151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,340,340,340,340,340,340,340,340',
'340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340',
'340,340,201,201,201,201,201,201,,,201,201,201,201,,,,,,,201,201,201',
'201,201' ]
        racc_action_check = arr = ::Array.new(4048, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    10,    17,   152,   107,   nil,   nil,   nil,   164,   184,   nil,
   nil,   200,   nil,   nil,   nil,   nil,   nil,   102,    86,   132,
   nil,   nil,   237,  3828,   nil,   nil,   nil,  1156,  1108,   -21,
   197,   207,    -7,   204,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,  3855,   246,  3552,   nil,   281,
  3882,   nil,   303,   106,   306,   nil,     1,   247,   309,   nil,
   205,   341,   nil,   nil,   nil,   nil,   nil,    13,   344,   232,
   nil,   nil,    -4,  3733,   nil,   nil,   nil,   379,   nil,   236,
   382,  3507,   nil,     3,   383,   nil,   nil,   nil,   467,  3663,
   406,   nil,   196,   486,   244,   487,   nil,  1108,   434,   nil,
  1134,  1201,  1227,   nil,   nil,   nil,   nil,    21,   nil,   442,
   nil,   290,   517,    -4,   nil,   193,   451,   -56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   477,   480,   nil,
  1294,  3909,  3753,   nil,  1320,  1387,  1413,  1480,  1506,   nil,
   nil,   nil,   486,   nil,   nil,   -47,   nil,   483,   465,  3699,
   485,  1185,   550,   342,   nil,   nil,   492,  3597,   nil,   nil,
   nil,   nil,   493,   492,   nil,   nil,   nil,    91,  1573,   nil,
    30,   485,   nil,   284,   497,  1599,   nil,    -6,   547,  1666,
   nil,  3946,    68,  1692,  1759,  1785,   186,   495,  1852,    -2,
   494,   478,   nil,  1878,   nil,   499,  1945,  1971,  2038,  2064,
   nil,  2131,   502,   nil,  2148,   nil,   nil,  2175,  2231,  2275,
  2329,  2373,  2427,  2471,  2525,  2569,  2623,  2667,  2721,  2765,
  2819,  2863,  2917,  2961,   nil,    12,  3395,   515,   496,  3015,
   nil,   nil,  3936,   517,  3765,   501,   nil,  3057,   nil,    10,
   nil,   nil,   281,   nil,   297,   nil,   nil,   nil,   521,   nil,
    43,   nil,   582,   116,    48,   125,   376,   nil,   nil,   471,
   528,  3596,   530,   531,   nil,   nil,   nil,   nil,   566,   nil,
   508,   107,   599,   nil,   202,     1,   nil,   nil,   nil,  3071,
   297,   553,   nil,   143,    91,   366,   368,   370,   301,   nil,
   397,   nil,    91,   -63,   289,   371,   550,   551,   552,   553,
  1189,   270,   364,  1282,  1468,  2383,  2481,  2579,  2677,  2775,
  2873,   nil,   nil,   nil,  2285,   nil,   nil,   nil,   nil,   565,
  3963,   nil,   203,   nil,   635,  1245,   -54,   nil,   576,   nil,
  3155,   nil,   459,   639,   nil,   396,   402,   640,   nil,   641,
   159,   nil,   579,   nil,   562,   410,   nil,   nil,  3181,   nil,
   572,   582,  3248,   561,   nil,    99,   nil,   nil,   nil,   nil,
   570,   590,   447,   651,   nil,  3274,   661,   nil,  3341,  3367,
   nil,   nil,   624,   nil,   327,   331,   449,   nil,  3434,   584,
   nil,   nil,   138,   nil,   nil,    -4,   nil,  3434,  3590,   nil,
   339,   756,   851,   nil,   594,   nil,   946,  1041,   nil,   nil,
   596,   535,   nil,   nil,   nil ]

racc_action_default = [
  -234,  -245,    -6,  -235,  -236,  -238,  -239,  -245,  -234,    -2,
    -4,  -245,    -7,    -9,   -10,   -11,   -12,  -245,  -245,  -245,
   -49,   -50,   -56,  -245,  -237,   425,    -1,  -235,    -5,   -15,
   -18,  -245,  -245,  -245,  -114,  -201,  -202,  -203,  -204,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,    -3,    -8,  -245,  -245,  -245,   -22,   -19,  -245,
   -35,  -244,  -142,  -140,  -245,   -57,  -245,    -6,   -15,   -16,
  -245,  -245,   -23,   -25,   -26,   -27,  -114,  -245,  -245,  -234,
   -36,  -114,   -59,  -245,  -138,  -139,  -141,   -32,  -115,  -234,
  -245,  -245,   -20,  -245,  -245,   -42,   -43,   -21,  -245,  -235,
   -38,   -40,  -245,  -245,  -234,   -60,   -62,  -228,  -230,   -65,
  -245,  -245,  -245,   -70,   -71,   -72,   -73,   -74,   -75,  -230,
   -77,  -245,  -245,  -174,  -114,  -195,  -182,  -195,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -240,  -240,  -150,
  -245,  -245,  -155,  -156,  -245,  -245,  -245,  -245,  -245,  -183,
  -184,  -186,  -245,  -188,  -189,  -245,  -144,  -245,  -148,  -114,
  -245,  -235,  -245,    -6,   -17,   -24,   -32,  -245,   -34,   -37,
  -114,  -114,   -32,  -111,  -112,   -51,   -58,  -235,  -245,   -63,
  -229,  -174,  -182,  -195,  -195,  -197,  -231,  -245,  -245,  -245,
   -91,  -245,  -245,  -245,  -245,  -197,   -59,  -245,  -245,  -245,
  -104,  -107,  -108,  -245,  -185,  -245,  -197,  -245,  -245,  -245,
  -192,  -116,  -241,  -242,  -133,  -151,  -114,  -245,  -245,  -245,
  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,
  -245,  -245,  -245,  -245,  -157,  -245,  -155,  -156,  -170,  -245,
  -171,  -172,  -245,  -245,  -245,  -148,  -147,  -245,   -30,  -245,
  -114,   -55,   -59,   -13,  -245,   -28,   -41,  -114,  -245,   -39,
  -245,  -110,   -61,   -67,  -232,  -198,   -59,   -98,   -99,   -59,
  -245,  -245,  -245,  -245,   -94,   -95,   -96,   -97,   -59,  -152,
  -153,  -232,   -80,   -88,   -89,  -140,  -193,  -194,  -114,  -245,
  -119,  -191,  -190,  -245,  -245,  -120,  -121,  -117,  -245,  -243,
  -240,  -134,  -245,  -245,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -175,  -176,  -177,  -178,  -179,
  -180,  -158,  -173,  -181,  -245,  -114,  -143,  -145,  -146,  -149,
  -114,   -33,   -53,   -54,  -245,  -245,   -44,  -114,  -245,   -64,
  -245,  -233,  -100,  -245,   -90,  -245,  -245,  -245,   -76,  -245,
   -84,   -81,  -245,  -105,  -106,  -113,  -196,  -200,  -245,  -131,
  -245,  -240,  -245,  -245,  -154,  -245,   -31,   -52,   -14,  -114,
   -45,   -32,  -199,  -245,  -101,  -245,   -59,   -68,  -245,  -245,
   -69,   -78,   -86,   -82,  -245,  -245,  -118,  -132,  -245,  -136,
  -137,  -187,   -47,  -109,   -66,  -245,  -103,   -92,   -93,   -79,
  -245,   -59,   -59,  -135,  -245,   -48,   -59,   -59,   -85,   -83,
   -32,  -100,   -87,   -46,  -102 ]

racc_goto_table = [
    24,     3,    16,    70,    76,   113,    63,   276,   170,    27,
    72,   311,    28,   133,     2,   258,   221,   224,   212,   200,
   166,   111,    26,   383,    24,    24,   220,    16,    16,    99,
   256,    68,    90,     9,   361,    64,    77,   349,   274,    82,
   136,    85,   137,     1,   195,     8,    67,    80,   291,   259,
    89,   110,    34,   104,   358,   205,   103,   266,    62,   303,
   184,   414,    32,    92,   211,   272,   189,    84,   198,   359,
   360,   179,   173,   175,   392,    85,   409,    16,   388,   389,
   210,   101,   102,   220,   100,   348,   308,   265,   310,   372,
   109,   165,   424,   271,    78,   225,    86,   280,    24,    91,
   171,    84,   393,   108,   247,   302,    24,   nil,   133,   nil,
   269,   nil,   nil,   172,   nil,   187,   nil,   338,   nil,   292,
   nil,   nil,   167,   nil,   nil,   264,   nil,   133,   186,   nil,
    86,   nil,   206,   nil,   nil,   136,   nil,   137,    91,   nil,
   nil,   nil,   262,   nil,   nil,   312,   nil,   nil,   nil,    63,
   nil,   270,   nil,   nil,   136,   nil,   137,   297,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   278,
   nil,    16,   nil,    16,   nil,   344,   nil,   nil,   339,   370,
   226,   337,   363,   133,    24,   413,   376,   296,   nil,   352,
   343,   nil,   353,   nil,   309,   nil,   313,   133,   260,   nil,
   133,   357,   nil,    24,   nil,   nil,   267,   nil,   nil,   133,
   136,   nil,   137,   nil,   nil,   416,   nil,   nil,   184,   nil,
   nil,   nil,   nil,   nil,   136,   336,   137,   136,   364,   137,
   342,   nil,   nil,   nil,   nil,   nil,   136,   346,   137,   nil,
   398,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   345,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   nil,   167,   nil,   nil,   nil,   nil,   nil,   nil,
   184,   nil,   403,   399,   nil,   nil,   nil,   nil,   nil,   406,
   nil,   nil,   nil,   190,   nil,   375,   197,   133,   202,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,   312,
   201,   nil,   nil,    63,   418,   419,   nil,   nil,   nil,   421,
   422,   423,   133,   133,   136,   nil,   137,   133,   133,   nil,
   244,   245,    24,   nil,   nil,    16,   nil,   nil,   nil,   402,
   nil,   nil,   nil,   nil,   246,   248,   250,   251,   nil,   136,
   136,   137,   137,   nil,   136,   136,   137,   137,   nil,   260,
   nil,   nil,   nil,   nil,   273,   nil,   nil,   278,   nil,   nil,
   nil,   275,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   289,
   290,   275,   nil,   nil,   294,   411,   412,   nil,   281,   300,
   nil,   nil,   275,   304,   305,   306,   nil,   307,    24,    24,
   nil,   417,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   nil,   nil,   nil,   nil,   nil,   334,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   365,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   382,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   396,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   405,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   407,   408 ]

racc_goto_check = [
    85,     5,    12,    14,    22,    38,     8,    48,    23,     5,
    36,    74,     5,    59,     2,    25,    72,    72,    66,    60,
    77,    29,     2,    49,    85,    85,    83,    12,    12,     7,
    78,    18,    27,     4,    58,    13,    14,    45,    44,    19,
    68,    21,    70,     1,    43,     3,    16,    17,    44,    24,
    26,    28,    15,    30,    45,    43,    22,    31,     4,    44,
    68,    32,    35,    37,    29,    40,    42,    12,    50,    54,
    55,    27,    14,    19,    56,    21,    57,    12,    62,    63,
    65,     5,    18,    83,    13,    67,    69,    23,    73,    75,
     5,    76,    49,    23,    15,    79,    15,    60,    85,    15,
     5,    12,    58,     2,    81,    82,    85,   nil,    59,   nil,
    29,   nil,   nil,     2,   nil,     5,   nil,    78,   nil,    38,
   nil,   nil,    15,   nil,   nil,     7,   nil,    59,     2,   nil,
    15,   nil,     5,   nil,   nil,    68,   nil,    70,    15,   nil,
   nil,   nil,    14,   nil,   nil,    59,   nil,   nil,   nil,     8,
   nil,    22,   nil,   nil,    68,   nil,    70,    68,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,    14,
   nil,    12,   nil,    12,   nil,    38,   nil,   nil,    59,    72,
    15,    77,    66,    59,    85,    74,    25,    36,   nil,    38,
    29,   nil,    38,   nil,    14,   nil,    22,    59,    15,   nil,
    59,    38,   nil,    85,   nil,   nil,    15,   nil,   nil,    59,
    68,   nil,    70,   nil,   nil,    48,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,    68,    14,    70,    68,    29,    70,
    22,   nil,   nil,   nil,   nil,   nil,    68,    22,    70,   nil,
    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
    68,   nil,    23,    59,   nil,   nil,   nil,   nil,   nil,    38,
   nil,   nil,   nil,    47,   nil,    22,    47,    59,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,    59,
    61,   nil,   nil,     8,    38,    38,   nil,   nil,   nil,    38,
    38,    23,    59,    59,    68,   nil,    70,    59,    59,   nil,
    47,    47,    85,   nil,   nil,    12,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,    61,    61,    61,    61,   nil,    68,
    68,    70,    70,   nil,    68,    68,    70,    70,   nil,    15,
   nil,   nil,   nil,   nil,    47,   nil,   nil,    14,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    47,    47,   nil,   nil,    47,     5,     5,   nil,    61,    47,
   nil,   nil,    47,    47,    47,    47,   nil,    47,    85,    85,
   nil,     5,   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,   nil,   nil,   nil,   nil,   nil,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    43,    14,    43,    31,     1,   nil,   -48,   -22,   nil,
   nil,   nil,     0,     6,   -28,    29,    16,   -20,     1,   -28,
   nil,   -26,   -30,   -89,  -120,  -154,   -20,   -38,   -40,   -70,
   -34,  -120,  -341,   nil,   nil,    40,   -22,    -9,   -87,   nil,
  -122,   nil,   -51,   -74,  -157,  -237,   nil,   186,  -190,  -329,
   -53,   nil,   nil,   nil,  -223,  -222,  -286,  -316,  -258,   -79,
  -102,   199,  -277,  -277,   nil,   -54,  -116,  -185,   -52,  -135,
   -50,   nil,  -131,  -136,  -213,  -223,    -2,   -73,  -138,   -55,
   nil,   -51,  -110,  -111,   nil,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   124,   nil,   223,   134,   nil,   nil,   nil,   nil,
    83,   126,   112,   nil,   nil,   nil,   nil,   nil,   nil,   261,
   nil,   nil,   nil,    20,    21,   nil,   nil,   nil,   nil,   114,
   115,   116,   nil,   nil,   nil,   nil,   119,   127,   nil,   nil,
   nil,   123,   125,   130,   nil,   nil,   nil,   nil,   nil,   191,
   nil,   152,   282,   283,   384,   nil,   nil,   182,   192,   nil,
   194,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,
   150,   153,   159,   214,   161,     4,   222 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 111, :_reduce_1,
  1, 113, :_reduce_2,
  3, 113, :_reduce_3,
  1, 114, :_reduce_4,
  2, 114, :_reduce_5,
  0, 117, :_reduce_6,
  1, 117, :_reduce_7,
  3, 117, :_reduce_8,
  1, 118, :_reduce_9,
  1, 118, :_reduce_10,
  1, 118, :_reduce_11,
  1, 118, :_reduce_none,
  7, 120, :_reduce_13,
  9, 121, :_reduce_14,
  0, 123, :_reduce_15,
  2, 123, :_reduce_16,
  6, 116, :_reduce_17,
  0, 126, :_reduce_18,
  1, 126, :_reduce_19,
  3, 126, :_reduce_20,
  3, 128, :_reduce_21,
  0, 127, :_reduce_22,
  1, 127, :_reduce_23,
  3, 127, :_reduce_24,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  4, 130, :_reduce_28,
  0, 134, :_reduce_29,
  1, 134, :_reduce_30,
  3, 134, :_reduce_31,
  0, 133, :_reduce_32,
  3, 133, :_reduce_33,
  6, 122, :_reduce_34,
  0, 136, :_reduce_35,
  1, 136, :_reduce_36,
  3, 136, :_reduce_37,
  2, 137, :_reduce_38,
  3, 138, :_reduce_39,
  1, 138, :_reduce_40,
  4, 131, :_reduce_41,
  1, 140, :_reduce_none,
  1, 140, :_reduce_43,
  2, 141, :_reduce_44,
  3, 141, :_reduce_45,
  7, 141, :_reduce_46,
  0, 142, :_reduce_47,
  1, 142, :_reduce_48,
  1, 119, :_reduce_49,
  1, 119, :_reduce_50,
  6, 143, :_reduce_51,
  8, 144, :_reduce_52,
  2, 135, :_reduce_53,
  2, 135, :_reduce_54,
  1, 135, :_reduce_55,
  0, 145, :_reduce_56,
  2, 145, :_reduce_57,
  2, 148, :_reduce_58,
  0, 149, :_reduce_59,
  1, 149, :_reduce_60,
  3, 149, :_reduce_61,
  1, 150, :_reduce_62,
  2, 150, :_reduce_63,
  4, 150, :_reduce_64,
  1, 150, :_reduce_65,
  6, 150, :_reduce_66,
  3, 150, :_reduce_67,
  5, 150, :_reduce_68,
  5, 150, :_reduce_69,
  1, 150, :_reduce_70,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_74,
  1, 150, :_reduce_75,
  4, 150, :_reduce_76,
  1, 150, :_reduce_none,
  5, 163, :_reduce_78,
  3, 164, :_reduce_79,
  0, 165, :_reduce_80,
  1, 165, :_reduce_81,
  2, 165, :_reduce_82,
  4, 168, :_reduce_83,
  0, 166, :_reduce_84,
  3, 166, :_reduce_85,
  0, 167, :_reduce_86,
  3, 167, :_reduce_87,
  3, 162, :_reduce_88,
  3, 161, :_reduce_89,
  3, 160, :_reduce_90,
  1, 160, :_reduce_none,
  5, 170, :_reduce_92,
  5, 170, :_reduce_93,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 159, :_reduce_100,
  1, 159, :_reduce_101,
  5, 159, :_reduce_102,
  2, 174, :_reduce_103,
  2, 151, :_reduce_104,
  3, 175, :_reduce_105,
  3, 175, :_reduce_106,
  1, 175, :_reduce_107,
  1, 175, :_reduce_108,
  6, 139, :_reduce_109,
  3, 139, :_reduce_110,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 176, :_reduce_113,
  0, 132, :_reduce_114,
  2, 132, :_reduce_115,
  0, 179, :_reduce_116,
  1, 179, :_reduce_117,
  3, 179, :_reduce_118,
  3, 156, :_reduce_119,
  3, 156, :_reduce_120,
  3, 156, :_reduce_121,
  1, 181, :_reduce_122,
  1, 181, :_reduce_123,
  1, 181, :_reduce_124,
  1, 181, :_reduce_125,
  1, 181, :_reduce_126,
  1, 181, :_reduce_127,
  1, 181, :_reduce_128,
  1, 181, :_reduce_129,
  1, 181, :_reduce_130,
  4, 181, :_reduce_131,
  5, 181, :_reduce_132,
  0, 183, :_reduce_133,
  1, 183, :_reduce_134,
  4, 183, :_reduce_135,
  3, 184, :_reduce_136,
  2, 185, :_reduce_none,
  2, 146, :_reduce_138,
  2, 146, :_reduce_139,
  1, 146, :_reduce_140,
  2, 146, :_reduce_141,
  0, 147, :_reduce_142,
  4, 147, :_reduce_143,
  1, 186, :_reduce_144,
  3, 186, :_reduce_145,
  3, 187, :_reduce_146,
  2, 187, :_reduce_147,
  0, 188, :_reduce_148,
  2, 188, :_reduce_149,
  1, 157, :_reduce_150,
  2, 157, :_reduce_151,
  3, 157, :_reduce_152,
  3, 157, :_reduce_153,
  4, 190, :_reduce_154,
  1, 189, :_reduce_155,
  1, 189, :_reduce_156,
  2, 189, :_reduce_157,
  3, 189, :_reduce_158,
  3, 171, :_reduce_159,
  3, 171, :_reduce_160,
  3, 171, :_reduce_161,
  3, 171, :_reduce_162,
  3, 171, :_reduce_163,
  3, 171, :_reduce_164,
  3, 171, :_reduce_165,
  3, 171, :_reduce_166,
  3, 171, :_reduce_167,
  3, 171, :_reduce_168,
  3, 171, :_reduce_169,
  2, 171, :_reduce_170,
  2, 171, :_reduce_171,
  2, 171, :_reduce_172,
  3, 171, :_reduce_173,
  1, 171, :_reduce_174,
  3, 191, :_reduce_175,
  3, 191, :_reduce_176,
  3, 191, :_reduce_177,
  3, 191, :_reduce_178,
  3, 191, :_reduce_179,
  3, 191, :_reduce_180,
  3, 191, :_reduce_181,
  1, 169, :_reduce_182,
  1, 169, :_reduce_none,
  1, 169, :_reduce_184,
  2, 169, :_reduce_185,
  1, 169, :_reduce_none,
  5, 169, :_reduce_187,
  1, 169, :_reduce_188,
  1, 169, :_reduce_189,
  3, 192, :_reduce_190,
  3, 192, :_reduce_191,
  2, 194, :_reduce_192,
  3, 180, :_reduce_193,
  3, 180, :_reduce_194,
  0, 193, :_reduce_195,
  3, 193, :_reduce_196,
  0, 154, :_reduce_197,
  1, 154, :_reduce_198,
  3, 154, :_reduce_199,
  4, 178, :_reduce_200,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_227,
  0, 152, :_reduce_228,
  1, 152, :_reduce_none,
  0, 153, :_reduce_230,
  1, 153, :_reduce_none,
  0, 155, :_reduce_232,
  1, 155, :_reduce_none,
  0, 112, :_reduce_234,
  1, 112, :_reduce_235,
  1, 115, :_reduce_236,
  2, 115, :_reduce_237,
  1, 195, :_reduce_238,
  1, 195, :_reduce_none,
  0, 182, :_reduce_240,
  1, 182, :_reduce_none,
  1, 196, :_reduce_none,
  2, 196, :_reduce_none,
  1, 124, :_reduce_244 ]

racc_reduce_n = 245

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kBREAK => 26,
  :kBLOCK_GIVEN => 27,
  :kYIELD => 28,
  :kBEGIN => 29,
  :kRESCUE => 30,
  :kENSURE => 31,
  :kWHILE => 32,
  :kCLASS => 33,
  :kDATA_VAR => 34,
  :kDTYPE_UINT => 35,
  :kDTYPE_LINT => 36,
  :kDTYPE_LLINT => 37,
  :kDTYPE_CHAR => 38,
  :kDTYPE_I8 => 39,
  :kDTYPE_I16 => 40,
  :kDTYPE_I32 => 41,
  :kDTYPE_I64 => 42,
  :kDTYPE_UI8 => 43,
  :kDTYPE_UI16 => 44,
  :kDTYPE_UI32 => 45,
  :kDTYPE_UI64 => 46,
  :kDTYPE_INT => 47,
  :kDTYPE_F32 => 48,
  :kDTYPE_F64 => 49,
  :kDTYPE_LF64 => 50,
  :kDTYPE_ROBJ => 51,
  :kDTYPE_ULINT => 52,
  :kDTYPE_ULLINT => 53,
  :kDTYPE_VOID => 54,
  :kDTYPE_SIZE_T => 55,
  :kDTYPE_RB_STR => 56,
  :kDTYPE_UCHAR => 57,
  :kDTYPE_BOOL => 58,
  :tCUSTOM_DTYPE => 59,
  :kDTYPE_RB_ARR => 60,
  :kDTYPE_RB_HSH => 61,
  :tLPAREN => 62,
  :tRPAREN => 63,
  :tLSQUARE => 64,
  :tRSQUARE => 65,
  :tIDENTIFIER => 66,
  :tNL => 67,
  :tCOMMA => 68,
  :tSQUOTE => 69,
  :tSCOLON => 70,
  :EOF => 71,
  :tDOT => 72,
  :tQMARK => 73,
  :tSYMBOL => 74,
  :tLBRACE => 75,
  :tRBRACE => 76,
  :tCOLON => 77,
  :tCOLON2 => 78,
  :tPLUS => 79,
  :tMINUS => 80,
  :tSTAR => 81,
  :tDIVIDE => 82,
  :tEXPO => 83,
  :tMODULUS => 84,
  :tASSIGN => 85,
  :tEQ => 86,
  :tLT => 87,
  :tLTEQ => 88,
  :tGT => 89,
  :tGTEQ => 90,
  :tANDOP => 91,
  :tOROP => 92,
  :tBANG => 93,
  :tOP_ASSIGN => 94,
  :tSTRING => 95,
  :kSIZEOF => 96,
  :tBIT_AND => 97,
  :tBIT_OR => 98,
  :tBIT_XOR => 99,
  :tBIT_LSHIFT => 100,
  :tBIT_RSHIFT => 101,
  :tBIT_NOT => 102,
  :tINTEGER => 103,
  :tFLOAT => 104,
  :tSINGLE_CHAR => 105,
  :ADDRESS_OF => 106,
  :TYPECAST => 107,
  :UMINUS => 108,
  :tNEQ => 109 }

racc_nt_base = 110

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_30(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_31(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_46(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_70(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_75(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
            result = Statement::Yield.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_78(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_79(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_80(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_81(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_83(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_84(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_85(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_86(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_87(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_88(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_89(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_90(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_92(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_100(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_102(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_103(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_104(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_105(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_107(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_109(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_110(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_113(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_114(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_115(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_116(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_117(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 480)
  def _reduce_118(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_119(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_120(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_121(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_122(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_133(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_134(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_135(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_138(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_140(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_141(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_142(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_144(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_145(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_146(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_148(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_149(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_151(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_152(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_153(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_154(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_157(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_159(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_162(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_163(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_170(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_173(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_174(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_181(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_185(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_187(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_188(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_189(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 656)
  def _reduce_190(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 657)
  def _reduce_191(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_192(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 669)
  def _reduce_193(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_194(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_195(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 678)
  def _reduce_196(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 681)
  def _reduce_197(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 682)
  def _reduce_198(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_199(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 688)
  def _reduce_200(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_227(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 707)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_234(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 720)
  def _reduce_235(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 723)
  def _reduce_236(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 724)
  def _reduce_237(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 727)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'parser.racc', 731)
  def _reduce_240(val, _values, result)
    
    result
  end
.,.,

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'parser.racc', 739)
  def _reduce_244(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
