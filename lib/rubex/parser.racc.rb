#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 744)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'117,118,120,279,65,279,211,121,383,74,143,144,145,19,74,87,255,211,7',
'147,133,256,128,129,164,130,132,98,210,122,377,165,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,73',
'148,71,136,71,298,219,66,218,344,97,146,149,98,343,94,334,157,354,204',
'205,378,290,353,152,98,204,205,204,205,155,221,142,163,158,95,117,118',
'120,159,139,140,141,121,204,205,143,144,145,19,218,87,219,204,205,147',
'133,106,128,129,164,130,132,25,105,122,217,165,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,371',
'148,398,136,5,204,205,6,94,354,354,146,149,370,353,353,182,157,353,5',
'184,29,6,30,152,366,204,205,95,218,155,219,142,163,158,98,117,118,120',
'159,139,140,141,121,31,217,143,144,145,19,5,87,215,6,5,147,133,6,128',
'129,164,130,132,5,33,122,6,165,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,405,148,182,136,5,177',
'184,6,184,69,419,146,149,5,204,205,6,157,98,5,98,98,6,98,152,98,5,71',
'5,6,155,6,142,163,158,75,117,118,120,159,139,140,141,121,204,205,143',
'144,145,19,5,87,71,6,5,147,133,6,128,129,164,130,132,373,79,122,372',
'165,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,60,61,156,88,148,93,136,229,230,231,232,233,234,96,146,149',
'231,232,233,234,157,229,230,231,232,233,234,152,231,232,233,234,66,155',
'69,142,163,158,107,117,118,120,159,139,140,141,121,204,205,143,144,145',
'19,5,87,170,6,5,147,133,6,128,129,164,130,132,5,71,122,6,165,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60',
'61,156,178,148,179,136,204,205,204,205,204,205,181,146,149,204,205,71',
'375,157,389,390,286,287,288,289,152,204,205,204,205,186,155,189,142',
'163,158,197,117,118,120,159,139,140,141,121,204,205,143,144,145,19,197',
'87,389,390,197,147,133,209,128,129,164,130,132,220,71,122,71,165,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58',
'59,60,61,156,254,148,257,136,259,71,265,170,170,219,211,146,149,218',
'281,296,301,157,302,304,71,336,233,71,152,259,350,189,357,358,155,359',
'142,163,158,204,117,118,120,159,139,140,141,121,366,217,143,144,145',
'19,233,87,233,233,233,147,133,211,128,129,164,130,132,381,385,122,391',
'165,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,60,61,156,394,148,395,136,399,302,401,71,404,98,170,146,149',
'408,414,211,424,157,170,,,,,,152,,,,,,155,,142,163,158,,117,118,120',
'159,139,140,141,121,,,143,144,145,19,,87,,,,147,133,,128,129,164,130',
'132,,,122,,165,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,156,,148,,136,,,,,,,,146,149,,,,,157,,,,',
',,152,,,,,,155,,142,163,158,,117,118,120,159,139,140,141,121,,,143,144',
'145,19,,87,,,,147,133,,128,129,164,130,132,,,122,,165,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156',
',148,,136,5,,,6,,,,146,149,,,,,157,,,,,,,152,,,,,,155,,142,163,158,',
'117,118,120,159,139,140,141,121,,,143,144,145,19,,87,,,,147,133,,128',
'129,164,130,132,,,122,,165,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,60,61,156,,148,,136,5,,,6,,,,146,149',
',,,,157,,,,,,,152,,,,,,155,,142,163,158,,117,118,120,159,139,140,141',
'121,,,143,144,145,19,,87,,,,147,133,,128,129,164,130,132,,,122,,165',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,156,,148,,136,,,,,,,,146,149,,,,,157,,,,,,,152,,,,,,155',
',142,163,158,,117,118,120,159,139,140,141,121,,,143,144,145,19,,87,',
',,147,133,,128,129,164,130,132,,,122,,165,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,,148,,136',
'5,,22,6,,,,146,149,,143,144,145,157,,,,19,,147,152,23,,,164,,155,,142',
'163,158,165,,22,17,159,139,140,141,,,,,22,,,,,19,,,18,23,,,143,144,145',
'19,156,,148,23,194,147,17,,,,164,,146,149,,,17,165,157,229,230,231,232',
'233,234,152,,,,,,155,,142,163,158,,,236,237,159,139,140,141,,156,,148',
',194,143,144,145,,,,,146,149,147,,,22,157,164,,,,,,152,165,,,,,155,19',
'142,163,158,23,,,,159,139,140,141,,,,,,17,143,144,145,,200,,148,,194',
'147,22,,,,164,,146,149,,,,165,157,,,19,,,18,23,,,,5,,,6,142,163,158',
',,17,,159,139,140,141,,156,,148,,194,143,144,145,,,,,146,149,147,,,22',
'157,164,,,,,,152,165,5,,,6,155,19,142,163,158,23,,,,159,139,140,141',
',,,,,17,143,144,145,,156,,148,,194,147,22,382,,,164,,146,149,,,,165',
'157,,,19,,,,23,,,,5,,155,6,142,163,158,,,17,,159,139,140,141,,156,,148',
',194,143,144,145,,,,,146,149,147,,,,157,164,,,,,,152,165,5,,,6,155,',
'142,163,158,,,,,159,139,140,141,,,,,,,143,144,145,,156,,148,,194,147',
',,,,164,,146,149,,,,165,157,229,230,231,232,233,234,152,,,,,,155,,142',
'163,158,,235,236,237,159,139,140,141,,251,,148,,194,143,144,145,,,,335',
'146,149,147,,,,157,164,,,,,,,165,229,230,231,232,233,234,142,163,158',
',,,,159,139,140,141,,235,236,237,238,239,143,144,145,,251,,148,,194',
'147,,,,,164,,146,149,,,,165,157,229,230,231,232,233,234,,,,,,,,,142',
'163,158,,235,236,237,159,139,140,141,,251,,148,,194,143,144,145,,,,',
'146,149,147,,,,157,164,,,,,,,165,229,230,231,232,233,234,142,163,158',
',,,,159,139,140,141,,235,236,237,238,239,143,144,145,,156,,148,,194',
'147,,,,,164,,146,149,,,,165,157,,,,,,,152,,,,,,155,,142,163,158,,,,',
'159,139,140,141,,156,,148,,194,143,144,145,,,,,146,149,147,,,,157,164',
',,,,,152,165,,,,,155,,142,163,158,,,,,159,139,140,141,,,,,,,143,144',
'145,,251,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,,,,,,,,,142',
'163,158,,,,,159,139,140,141,,156,,148,,194,143,144,145,,,,,146,149,147',
',,,157,164,,,,,,152,165,,,,,155,,142,163,158,,,,,159,139,140,141,,,',
',,,143,144,145,,156,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,',
'152,,,,,,155,,142,163,158,,,,,159,139,140,141,,156,,148,,194,143,144',
'145,,,,,146,149,147,,,,157,164,,,,,,152,165,,,,,155,,142,163,158,,,',
',159,139,140,141,,,,,,,143,144,145,,156,,148,,194,147,,,,,164,,146,149',
',,,165,157,,,,,,,152,,,,,,155,,142,163,158,,,,,159,139,140,141,,156',
',148,,194,143,144,145,,,,,146,149,147,,,,157,164,,,,,,152,165,,,,,155',
',142,163,158,,,,,159,139,140,141,,,,,,,143,144,145,,156,,148,,194,147',
',,,,164,,146,149,,,,165,157,,,,,,,152,,,,,,155,,142,163,158,,,,,159',
'139,140,141,,156,,148,,194,143,144,145,,,,,146,149,147,,,,157,164,,',
',,,152,165,,,,,155,,142,163,158,,,,,159,139,140,141,,,,,,,143,144,145',
',156,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,152,,,,,,155,,142',
'163,158,,,,,159,139,140,141,,156,,148,,194,143,144,145,,,,,146,149,147',
',,,157,164,,,,,,152,165,,,,,155,,142,163,158,,,,,159,139,140,141,,,',
',,,143,144,145,,156,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,',
'152,,,,,,155,,142,163,158,,,,,159,139,140,141,,156,,148,,194,143,144',
'145,,,,,146,149,147,,,,157,164,,,,,,152,165,,,,,155,,142,163,158,,,',
',159,139,140,141,,,,,,,143,144,145,,,,148,,194,147,,,,,164,,146,149',
',,,165,229,230,231,232,233,234,,240,242,243,244,245,,,,142,163,,235',
'236,237,238,239,139,140,141,,251,,148,241,194,143,144,145,,,,,146,149',
'147,,,,157,164,,,,,,,165,229,230,231,232,233,234,142,163,158,,,,,159',
'139,140,141,,235,236,237,238,239,143,144,145,,251,,148,,194,147,,,,',
'164,,146,149,,,,165,157,,,,,,,,,,,,,,,142,163,158,,,,,159,139,140,141',
',251,,148,,194,143,144,145,,,,,146,149,147,,,,157,164,,,,,,,165,229',
'230,231,232,233,234,142,163,158,,,,,159,139,140,141,,235,236,237,238',
'239,143,144,145,,251,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,',
',,,,,,,,,142,163,158,,,,,159,139,140,141,,251,,148,,194,143,144,145',
',,,,146,149,147,,,,157,164,,,,,,,165,229,230,231,232,233,234,142,163',
'158,,,,,159,139,140,141,,235,236,237,238,239,143,144,145,,251,,148,',
'194,147,,,,,164,,146,149,,,,165,157,,,,,,,,,,,,,,,142,163,158,,,,,159',
'139,140,141,,251,,148,,194,143,144,145,,,,,146,149,147,,,,157,164,,',
',,,,165,229,230,231,232,233,234,142,163,158,,,,,159,139,140,141,,235',
'236,237,238,239,143,144,145,,251,,148,,194,147,,,,,164,,146,149,,,,165',
'157,,,,,,,,,,,,,,,142,163,158,,,,,159,139,140,141,,251,,148,,194,143',
'144,145,,,,,146,149,147,,,,157,164,,,,,,,165,229,230,231,232,233,234',
'142,163,158,,,,,159,139,140,141,,235,236,237,238,239,143,144,145,,251',
',148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,,,,,,,,,142,163,158',
',,,,159,139,140,141,,251,,148,,194,143,144,145,,,,,146,149,147,,,,157',
'164,,,,,,,165,229,230,231,232,233,234,142,163,158,,,,,159,139,140,141',
',235,236,237,238,239,143,144,145,,251,,148,,194,147,,,,,164,,146,149',
',,,165,157,,,,,,,,,,,,,,,142,163,158,,,,,159,139,140,141,,251,,148,',
'194,143,144,145,,,,,146,149,147,,,,157,164,,,,,,,165,229,230,231,232',
'233,234,142,163,158,,,,,159,139,140,141,,235,236,237,238,239,143,144',
'145,,251,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,,,,,,,,,142',
'163,158,,,,,159,139,140,141,,251,,148,,194,143,144,145,,,,,146,149,147',
',,,157,164,,,,,,,165,,,,,,,142,163,158,,,,,159,139,140,141,,,,,,,143',
'144,145,,251,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,,,,,,,',
',142,163,158,,,,,159,139,140,141,,251,,148,,194,143,144,145,143,144',
'145,,146,149,147,,,147,157,164,,,164,,,,165,,,165,,,,142,163,158,,,',
',159,139,140,141,,,,,,,,,,,251,,148,,194,148,,194,143,144,145,,146,149',
',146,149,147,157,,,,164,,,,,,,165,,,,142,163,158,142,163,,,159,139,140',
'141,139,140,141,,,,,,,143,144,145,,156,,148,,194,147,,,,,164,,146,149',
',,,165,157,,,,,,,152,,,,,,155,,142,163,158,,,,,159,139,140,141,,156',
',148,,194,143,144,145,143,144,145,,146,149,147,,,147,157,164,,,164,',
',152,165,,,165,,155,,142,163,158,,,,,159,139,140,141,,,,,,,,,,,156,',
'148,,194,148,,194,143,144,145,,146,149,,146,149,147,157,,,,164,,,152',
',,,165,,155,,142,163,158,142,163,,,159,139,140,141,139,140,141,,,,,',
',143,144,145,,156,,148,,194,147,,,,,164,,146,149,,,,165,157,,,,,,,152',
',,,,,155,,142,163,158,,,,,159,139,140,141,,251,,148,,194,143,144,145',
'143,144,145,,146,149,147,,,147,157,164,,,164,,,,165,,,165,,,,142,163',
'158,,,,,159,139,140,141,,,,,,,,,,,251,,148,,194,148,,194,,,,,146,149',
'175,146,149,,157,,,,,,,,,,19,,87,,,142,163,158,142,163,,,159,139,140',
'141,139,140,141,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,19,,87,,,5,,,6,,,,,,,,,,,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,335,',
',,,,81,,,,,,,,,,229,230,231,232,233,234,,240,242,243,244,245,270,,,',
',,235,236,237,238,239,,,,,,,,241,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,335,,,,,,,,,,,,,,,,229',
'230,231,232,233,234,,,286,287,288,289,,,,,,,235,236,237,238,239,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,,,,,,5,,,6,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,,-29,,,,,-29,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,169,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,,,,,169,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,60,61,229,230,231,232,233,234,,,286,287,288,289,,,,,,,235',
'236,237,238,239' ]
        racc_action_table = arr = ::Array.new(4122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'92,92,92,198,29,409,134,92,349,32,92,92,92,92,211,92,166,315,1,92,92',
'166,92,92,92,92,92,349,134,92,315,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,32,92,198,92,409',
'211,298,29,138,261,76,92,92,316,261,298,247,92,276,127,127,316,203,276',
'92,76,198,198,409,409,92,138,92,92,92,298,188,188,188,92,92,92,92,188',
'247,247,188,188,188,188,194,188,194,191,191,188,188,87,188,188,188,188',
'188,7,87,188,194,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,307',
'188,364,188,188,203,203,188,73,293,294,188,188,306,293,294,112,188,306',
'0,112,17,0,18,188,364,307,307,73,136,188,136,188,188,188,112,208,208',
'208,188,188,188,188,208,19,136,208,208,208,208,3,208,136,3,8,208,208',
'8,208,208,208,208,208,11,22,208,11,208,208,208,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
'208,208,208,379,208,345,208,208,103,345,208,272,30,406,208,208,80,275',
'275,80,208,379,89,103,345,89,272,208,406,99,31,114,99,208,114,208,208',
'208,33,264,264,264,208,208,208,208,264,277,277,264,264,264,264,132,264',
'64,132,266,264,264,266,264,264,264,264,264,311,66,264,311,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,69,264,72,264,324,324,324,324,324',
'324,74,264,264,317,317,317,317,264,325,325,325,325,325,325,264,318,318',
'318,318,78,264,81,264,264,264,88,278,278,278,264,264,264,264,278,297',
'297,278,278,278,278,398,278,97,398,399,278,278,399,278,278,278,278,278',
'414,100,278,414,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,104',
'278,108,278,303,303,308,308,309,309,110,278,278,310,310,313,313,278',
'355,355,358,358,359,359,278,369,369,386,386,113,278,115,278,278,278',
'118,281,281,281,278,278,278,278,281,400,400,281,281,281,281,128,281',
'425,425,130,281,281,133,281,281,281,281,281,137,148,281,149,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,163,281,168,281,169,171,173',
'177,183,184,192,281,281,195,199,209,212,281,213,217,224,249,250,255',
'281,257,270,274,282,284,281,285,281,281,281,292,290,290,290,281,281',
'281,281,290,295,304,290,290,290,290,319,290,320,321,322,290,290,342',
'290,290,290,290,290,347,351,290,356,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,360,290,363,290,366,368,374,375,377,384,385,290,290',
'387,396,403,418,290,424,,,,,,290,,,,,,290,,290,290,290,,390,390,390',
'290,290,290,290,390,,,390,390,390,390,,390,,,,390,390,,390,390,390,390',
'390,,,390,,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,,390,,390,,',
',,,,,390,390,,,,,390,,,,,,,390,,,,,,390,,390,390,390,,415,415,415,390',
'390,390,390,415,,,415,415,415,415,,415,,,,415,415,,415,415,415,415,415',
',,415,,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415',
'415,415,415,415,415,415,415,415,415,415,415,415,415,,415,,415,415,,',
'415,,,,415,415,,,,,415,,,,,,,415,,,,,,415,,415,415,415,,416,416,416',
'415,415,415,415,416,,,416,416,416,416,,416,,,,416,416,,416,416,416,416',
'416,,,416,,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,416,416,416,416,,416,,416,416',
',,416,,,,416,416,,,,,416,,,,,,,416,,,,,,416,,416,416,416,,420,420,420',
'416,416,416,416,420,,,420,420,420,420,,420,,,,420,420,,420,420,420,420',
'420,,,420,,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420',
'420,420,420,420,420,420,420,420,420,420,420,420,420,420,,420,,420,,',
',,,,,420,420,,,,,420,,,,,,,420,,,,,,420,,420,420,420,,421,421,421,420',
'420,420,420,421,,,421,421,421,421,,421,,,,421,421,,421,421,421,421,421',
',,421,,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,421,421,421,,421,,421,421,,77',
'421,,,,421,421,,117,117,117,421,,,,77,,117,421,77,,,117,,421,,421,421',
'421,117,,2,77,421,421,421,421,,,,,174,,,,,2,,,2,2,,,120,120,120,174',
'117,,117,174,117,120,2,,,,120,,117,117,,,174,120,117,323,323,323,323',
'323,323,117,,,,,,117,,117,117,117,,,323,323,117,117,117,117,,120,,120',
',120,121,121,121,,,,,120,120,121,,,28,120,121,,,,,,120,121,,,,,120,28',
'120,120,120,28,,,,120,120,120,120,,,,,,28,122,122,122,,121,,121,,121',
'122,27,,,,122,,121,121,,,,122,121,,,27,,,27,27,,,,28,,,28,121,121,121',
',,27,,121,121,121,121,,122,,122,,122,151,151,151,,,,,122,122,151,,,172',
'122,151,,,,,,122,151,27,,,27,122,172,122,122,122,172,,,,122,122,122',
'122,,,,,,172,155,155,155,,151,,151,,151,155,348,348,,,155,,151,151,',
',,155,151,,,348,,,,348,,,,172,,151,172,151,151,151,,,348,,151,151,151',
'151,,155,,155,,155,156,156,156,,,,,155,155,156,,,,155,156,,,,,,155,156',
'348,,,348,155,,155,155,155,,,,,155,155,155,155,,,,,,,157,157,157,,156',
',156,,156,157,,,,,157,,156,156,,,,157,156,326,326,326,326,326,326,156',
',,,,,156,,156,156,156,,326,326,326,156,156,156,156,,157,,157,,157,158',
'158,158,,,,337,157,157,158,,,,157,158,,,,,,,158,337,337,337,337,337',
'337,157,157,157,,,,,157,157,157,157,,337,337,337,337,337,159,159,159',
',158,,158,,158,159,,,,,159,,158,158,,,,159,158,327,327,327,327,327,327',
',,,,,,,,158,158,158,,327,327,327,158,158,158,158,,159,,159,,159,189',
'189,189,,,,,159,159,189,,,,159,189,,,,,,,189,328,328,328,328,328,328',
'159,159,159,,,,,159,159,159,159,,328,328,328,328,328,196,196,196,,189',
',189,,189,196,,,,,196,,189,189,,,,196,189,,,,,,,189,,,,,,189,,189,189',
'189,,,,,189,189,189,189,,196,,196,,196,200,200,200,,,,,196,196,200,',
',,196,200,,,,,,196,200,,,,,196,,196,196,196,,,,,196,196,196,196,,,,',
',,204,204,204,,200,,200,,200,204,,,,,204,,200,200,,,,204,200,,,,,,,',
',,,,,,,200,200,200,,,,,200,200,200,200,,204,,204,,204,205,205,205,,',
',,204,204,205,,,,204,205,,,,,,204,205,,,,,204,,204,204,204,,,,,204,204',
'204,204,,,,,,,206,206,206,,205,,205,,205,206,,,,,206,,205,205,,,,206',
'205,,,,,,,205,,,,,,205,,205,205,205,,,,,205,205,205,205,,206,,206,,206',
'207,207,207,,,,,206,206,207,,,,206,207,,,,,,206,207,,,,,206,,206,206',
'206,,,,,206,206,206,206,,,,,,,210,210,210,,207,,207,,207,210,,,,,210',
',207,207,,,,210,207,,,,,,,207,,,,,,207,,207,207,207,,,,,207,207,207',
'207,,210,,210,,210,215,215,215,,,,,210,210,215,,,,210,215,,,,,,210,215',
',,,,210,,210,210,210,,,,,210,210,210,210,,,,,,,218,218,218,,215,,215',
',215,218,,,,,218,,215,215,,,,218,215,,,,,,,215,,,,,,215,,215,215,215',
',,,,215,215,215,215,,218,,218,,218,219,219,219,,,,,218,218,219,,,,218',
'219,,,,,,218,219,,,,,218,,218,218,218,,,,,218,218,218,218,,,,,,,220',
'220,220,,219,,219,,219,220,,,,,220,,219,219,,,,220,219,,,,,,,219,,,',
',,219,,219,219,219,,,,,219,219,219,219,,220,,220,,220,221,221,221,,',
',,220,220,221,,,,220,221,,,,,,220,221,,,,,220,,220,220,220,,,,,220,220',
'220,220,,,,,,,223,223,223,,221,,221,,221,223,,,,,223,,221,221,,,,223',
'221,,,,,,,221,,,,,,221,,221,221,221,,,,,221,221,221,221,,223,,223,,223',
'226,226,226,,,,,223,223,226,,,,223,226,,,,,,223,226,,,,,223,,223,223',
'223,,,,,223,223,223,223,,,,,,,229,229,229,,,,226,,226,229,,,,,229,,226',
'226,,,,229,153,153,153,153,153,153,,153,153,153,153,153,,,,226,226,',
'153,153,153,153,153,226,226,226,,229,,229,153,229,230,230,230,,,,,229',
'229,230,,,,229,230,,,,,,,230,329,329,329,329,329,329,229,229,229,,,',
',229,229,229,229,,329,329,329,329,329,231,231,231,,230,,230,,230,231',
',,,,231,,230,230,,,,231,230,,,,,,,,,,,,,,,230,230,230,,,,,230,230,230',
'230,,231,,231,,231,232,232,232,,,,,231,231,232,,,,231,232,,,,,,,232',
'330,330,330,330,330,330,231,231,231,,,,,231,231,231,231,,330,330,330',
'330,330,233,233,233,,232,,232,,232,233,,,,,233,,232,232,,,,233,232,',
',,,,,,,,,,,,,232,232,232,,,,,232,232,232,232,,233,,233,,233,234,234',
'234,,,,,233,233,234,,,,233,234,,,,,,,234,331,331,331,331,331,331,233',
'233,233,,,,,233,233,233,233,,331,331,331,331,331,235,235,235,,234,,234',
',234,235,,,,,235,,234,234,,,,235,234,,,,,,,,,,,,,,,234,234,234,,,,,234',
'234,234,234,,235,,235,,235,236,236,236,,,,,235,235,236,,,,235,236,,',
',,,,236,332,332,332,332,332,332,235,235,235,,,,,235,235,235,235,,332',
'332,332,332,332,237,237,237,,236,,236,,236,237,,,,,237,,236,236,,,,237',
'236,,,,,,,,,,,,,,,236,236,236,,,,,236,236,236,236,,237,,237,,237,238',
'238,238,,,,,237,237,238,,,,237,238,,,,,,,238,333,333,333,333,333,333',
'237,237,237,,,,,237,237,237,237,,333,333,333,333,333,239,239,239,,238',
',238,,238,239,,,,,239,,238,238,,,,239,238,,,,,,,,,,,,,,,238,238,238',
',,,,238,238,238,238,,239,,239,,239,240,240,240,,,,,239,239,240,,,,239',
'240,,,,,,,240,411,411,411,411,411,411,239,239,239,,,,,239,239,239,239',
',411,411,411,411,411,241,241,241,,240,,240,,240,241,,,,,241,,240,240',
',,,241,240,,,,,,,,,,,,,,,240,240,240,,,,,240,240,240,240,,241,,241,',
'241,242,242,242,,,,,241,241,242,,,,241,242,,,,,,,242,412,412,412,412',
'412,412,241,241,241,,,,,241,241,241,241,,412,412,412,412,412,243,243',
'243,,242,,242,,242,243,,,,,243,,242,242,,,,243,242,,,,,,,,,,,,,,,242',
'242,242,,,,,242,242,242,242,,243,,243,,243,244,244,244,,,,,243,243,244',
',,,243,244,,,,,,,244,,,,,,,243,243,243,,,,,243,243,243,243,,,,,,,245',
'245,245,,244,,244,,244,245,,,,,245,,244,244,,,,245,244,,,,,,,,,,,,,',
',244,244,244,,,,,244,244,244,244,,245,,245,,245,251,251,251,259,259',
'259,,245,245,251,,,259,245,251,,,259,,,,251,,,259,,,,245,245,245,,,',
',245,245,245,245,,,,,,,,,,,251,,251,,251,259,,259,302,302,302,,251,251',
',259,259,302,251,,,,302,,,,,,,302,,,,251,251,251,259,259,,,251,251,251',
'251,259,259,259,,,,,,,353,353,353,,302,,302,,302,353,,,,,353,,302,302',
',,,353,302,,,,,,,302,,,,,,302,,302,302,302,,,,,302,302,302,302,,353',
',353,,353,372,372,372,376,376,376,,353,353,372,,,376,353,372,,,376,',
',353,372,,,376,,353,,353,353,353,,,,,353,353,353,353,,,,,,,,,,,372,',
'372,,372,376,,376,389,389,389,,372,372,,376,376,389,372,,,,389,,,372',
',,,389,,372,,372,372,372,376,376,,,372,372,372,372,376,376,376,,,,,',
',392,392,392,,389,,389,,389,392,,,,,392,,389,389,,,,392,389,,,,,,,389',
',,,,,389,,389,389,389,,,,,389,389,389,389,,392,,392,,392,393,393,393',
'402,402,402,,392,392,393,,,402,392,393,,,402,,,,393,,,402,,,,392,392',
'392,,,,,392,392,392,392,,,,,,,,,,,393,,393,,393,402,,402,,,,,393,393',
'101,402,402,,393,,,,,,,,,,101,,101,,,393,393,393,402,402,,,393,393,393',
'393,402,402,402,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,67,,67,,,101',
',,101,,,,,,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,248,,,,,,67,,,,,,,,,,248,248,248,248,248',
'248,,248,248,248,248,248,178,,,,,,248,248,248,248,248,,,,,,,,248,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,283,,,,,,,,,,,,,,,,283,283,283,283',
'283,283,,,283,283,283,283,,,,,,,283,283,283,283,283,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,,,,,,109,,,109,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,,170,,,,,170,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,,,,,93,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,,,,,256,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,23,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,343,202,202,202,202,202,202,,,202',
'202,202,202,,,,,,,202,202,202,202,202' ]
        racc_action_check = arr = ::Array.new(4122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   107,    18,  1151,   138,   nil,   nil,   nil,   123,   142,   nil,
   nil,   151,   nil,   nil,   nil,   nil,   nil,   110,    83,   133,
   nil,   nil,   198,  3901,   nil,   nil,   nil,  1282,  1239,   -21,
   194,   211,    -7,   214,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   236,  3928,   249,  3627,   nil,   270,
  3955,   nil,   287,    90,   284,   nil,     3,  1120,   289,   nil,
   197,   312,   nil,   nil,   nil,   nil,   nil,    57,   287,   203,
   nil,   nil,    -4,  3837,   nil,   nil,   nil,   337,   nil,   210,
   344,  3581,   nil,   190,   358,   nil,   nil,   nil,   443,  3767,
   385,   nil,   109,   470,   212,   469,   nil,  1116,   416,   nil,
  1161,  1215,  1260,   nil,   nil,   nil,   nil,   -13,   431,   nil,
   435,   nil,   234,   484,   -67,   nil,   122,   421,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   440,   442,
   nil,  1314,  3982,  2305,   nil,  1359,  1413,  1458,  1512,  1557,
   nil,   nil,   nil,   477,   nil,   nil,   -48,   nil,   475,   458,
  3803,   477,  1338,   543,  1161,   nil,   nil,   484,  3701,   nil,
   nil,   nil,   nil,   485,   484,   nil,   nil,   nil,    92,  1611,
   nil,    21,   477,   nil,    47,   490,  1656,   nil,    -6,   541,
  1710,   nil,  4019,    69,  1755,  1809,  1854,  1908,   188,   488,
  1953,    -2,   487,   472,   nil,  2007,   nil,   492,  2052,  2106,
  2151,  2205,   nil,  2250,   492,   nil,  2304,   nil,   nil,  2349,
  2403,  2448,  2502,  2547,  2601,  2646,  2700,  2745,  2799,  2844,
  2898,  2943,  2997,  3042,  3096,  3141,   nil,    12,  3626,   497,
   478,  3195,   nil,   nil,  4009,   495,  3869,   479,   nil,  3198,
   nil,     5,   nil,   nil,   284,   nil,   238,   nil,   nil,   nil,
   499,   nil,   193,   nil,   561,   174,    14,   204,   380,   nil,
   nil,   476,   504,  3700,   502,   504,   nil,   nil,   nil,   nil,
   572,   nil,   483,   101,   102,   553,   nil,   300,     1,   nil,
   nil,   nil,  3252,   356,   506,   nil,   105,    90,   358,   360,
   365,   249,   nil,   391,   nil,   -56,    -9,   279,   291,   506,
   508,   509,   510,  1118,   272,   286,  1415,  1514,  1567,  2359,
  2458,  2557,  2656,  2755,   nil,   nil,   nil,  1468,   nil,   nil,
   nil,   nil,   524,  4036,   nil,   191,   nil,   600,  1381,   -55,
   nil,   540,   nil,  3297,   nil,   455,   603,   nil,   376,   376,
   633,   nil,   nil,   635,   150,   nil,   573,   nil,   555,   377,
   nil,   nil,  3351,   nil,   565,   575,  3354,   554,   nil,   188,
   nil,   nil,   nil,   nil,   563,   583,   379,   646,   nil,  3408,
   668,   nil,  3453,  3507,   nil,   nil,   618,   nil,   330,   334,
   396,   nil,  3510,   578,   nil,   nil,   195,   nil,   nil,    -4,
   nil,  2854,  2953,   nil,   343,   764,   860,   nil,   588,   nil,
   956,  1052,   nil,   nil,   591,   489,   nil,   nil,   nil ]

racc_action_default = [
  -235,  -246,    -6,  -236,  -237,  -239,  -240,  -246,  -235,    -2,
    -4,  -246,    -7,    -9,   -10,   -11,   -12,  -246,  -246,  -246,
   -49,   -50,   -56,  -246,  -238,   429,    -1,  -236,    -5,   -15,
   -18,  -246,  -246,  -246,  -115,  -202,  -203,  -204,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,
  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,    -3,    -8,  -246,  -246,  -246,   -22,   -19,  -246,
   -35,  -245,  -143,  -141,  -246,   -57,  -246,    -6,   -15,   -16,
  -246,  -246,   -23,   -25,   -26,   -27,  -115,  -246,  -246,  -235,
   -36,  -115,   -59,  -246,  -139,  -140,  -142,   -32,  -116,  -235,
  -246,  -246,   -20,  -246,  -246,   -42,   -43,   -21,  -246,  -236,
   -38,   -40,  -246,  -246,  -235,   -60,   -62,  -229,  -231,   -65,
  -246,  -246,  -246,   -70,   -71,   -72,   -73,   -74,  -231,   -76,
  -231,   -78,  -246,  -246,  -175,  -115,  -196,  -183,  -196,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -241,  -241,
  -151,  -246,  -246,  -156,  -157,  -246,  -246,  -246,  -246,  -246,
  -184,  -185,  -187,  -246,  -189,  -190,  -246,  -145,  -246,  -149,
  -115,  -246,  -236,  -246,    -6,   -17,   -24,   -32,  -246,   -34,
   -37,  -115,  -115,   -32,  -112,  -113,   -51,   -58,  -236,  -246,
   -63,  -230,  -175,  -183,  -196,  -196,  -198,  -232,  -246,  -246,
  -246,   -92,  -246,  -246,  -246,  -246,  -198,  -198,   -59,  -246,
  -246,  -246,  -105,  -108,  -109,  -246,  -186,  -246,  -198,  -246,
  -246,  -246,  -193,  -117,  -242,  -243,  -134,  -152,  -115,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -158,  -246,  -156,  -157,
  -171,  -246,  -172,  -173,  -246,  -246,  -246,  -149,  -148,  -246,
   -30,  -246,  -115,   -55,   -59,   -13,  -246,   -28,   -41,  -115,
  -246,   -39,  -246,  -111,   -61,   -67,  -233,  -199,   -59,   -99,
  -100,   -59,  -246,  -246,  -246,  -246,   -95,   -96,   -97,   -98,
   -59,  -153,  -154,  -233,  -233,   -81,   -89,   -90,  -141,  -194,
  -195,  -115,  -246,  -120,  -192,  -191,  -246,  -246,  -121,  -122,
  -118,  -246,  -244,  -241,  -135,  -246,  -246,  -160,  -161,  -162,
  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -176,  -177,
  -178,  -179,  -180,  -181,  -159,  -174,  -182,  -246,  -115,  -144,
  -146,  -147,  -150,  -115,   -33,   -53,   -54,  -246,  -246,   -44,
  -115,  -246,   -64,  -246,  -234,  -101,  -246,   -91,  -246,  -246,
  -246,   -75,   -77,  -246,   -85,   -82,  -246,  -106,  -107,  -114,
  -197,  -201,  -246,  -132,  -246,  -241,  -246,  -246,  -155,  -246,
   -31,   -52,   -14,  -115,   -45,   -32,  -200,  -246,  -102,  -246,
   -59,   -68,  -246,  -246,   -69,   -79,   -87,   -83,  -246,  -246,
  -119,  -133,  -246,  -137,  -138,  -188,   -47,  -110,   -66,  -246,
  -104,   -93,   -94,   -80,  -246,   -59,   -59,  -136,  -246,   -48,
   -59,   -59,   -86,   -84,   -32,  -101,   -88,   -46,  -103 ]

racc_goto_table = [
    24,     3,    16,    70,    76,   113,    63,   278,   171,    27,
   314,   260,    28,   223,   226,   134,   167,   214,    72,   111,
    99,   387,   258,   138,    24,    24,   201,    16,    16,   222,
   365,    68,    90,     2,    64,    82,    77,     9,     1,   137,
    85,    26,   276,     8,    67,   196,    80,   261,   352,    89,
   110,   104,   293,   294,   268,   206,   103,   207,   418,   185,
    34,    32,    62,   213,   306,   361,   362,    84,    92,   176,
   274,   180,   174,   190,    85,   199,   363,    16,   364,   396,
   413,   101,   102,   100,   392,   393,   222,   212,   267,   351,
   109,   428,   311,   313,   273,   376,   166,   227,    24,   397,
   172,    84,    78,   249,    86,   282,    24,    91,   305,   271,
   341,   134,   nil,   nil,   nil,   188,   nil,   266,   nil,   138,
   nil,   295,   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   168,   134,   173,   208,   nil,   137,   nil,   nil,    86,   138,
   nil,   nil,   nil,   264,   nil,   nil,    91,   187,   nil,   315,
    63,   nil,   272,   nil,   nil,   137,   nil,   nil,   300,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   280,   nil,    16,   nil,    16,   nil,   nil,   347,   374,   340,
   nil,   nil,   342,   367,   380,    24,   417,   134,   nil,   228,
   346,   355,   nil,   nil,   356,   138,   312,   299,   316,   nil,
   nil,   134,   nil,   360,   134,    24,   nil,   262,   nil,   138,
   nil,   137,   138,   134,   nil,   269,   nil,   nil,   420,   185,
   nil,   138,   nil,   nil,   nil,   137,   nil,   339,   137,   368,
   nil,   nil,   345,   nil,   nil,   nil,   nil,   137,   nil,   349,
   402,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   198,   nil,
   203,   338,   185,   168,   nil,   nil,   407,   nil,   nil,   403,
   nil,   nil,   nil,   410,   nil,   nil,   nil,   nil,   379,   nil,
   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   384,   138,   nil,   246,   247,   315,    63,   nil,   422,   423,
   nil,   nil,   nil,   425,   426,   427,   nil,   137,   134,   134,
   nil,   nil,   nil,   134,   134,    24,   138,   138,    16,   nil,
   nil,   138,   138,   406,   nil,   nil,   nil,   275,   nil,   nil,
   nil,   nil,   137,   137,   277,   nil,   202,   137,   137,   nil,
   nil,   nil,   291,   292,   277,   277,   nil,   nil,   297,   nil,
   262,   280,   nil,   303,   nil,   nil,   277,   307,   308,   309,
   nil,   310,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   415,
   416,   248,   250,   252,   253,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,    24,   nil,   421,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   283,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   369,   nil,   nil,   nil,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   nil,   nil,   nil,   nil,   nil,   337,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   386,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   400,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   409,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   411,   412 ]

racc_goto_check = [
    85,     5,    12,    14,    22,    38,     8,    48,    23,     5,
    74,    25,     5,    72,    72,    59,    77,    66,    36,    29,
     7,    49,    78,    70,    85,    85,    60,    12,    12,    83,
    58,    18,    27,     2,    13,    19,    14,     4,     1,    68,
    21,     2,    44,     3,    16,    43,    17,    24,    45,    26,
    28,    30,    44,    44,    31,    43,    22,    43,    32,    68,
    15,    35,     4,    29,    44,    45,    45,    12,    37,    19,
    40,    27,    14,    42,    21,    50,    54,    12,    55,    56,
    57,     5,    18,    13,    62,    63,    83,    65,    23,    67,
     5,    49,    69,    73,    23,    75,    76,    79,    85,    58,
     5,    12,    15,    81,    15,    60,    85,    15,    82,    29,
    78,    59,   nil,   nil,   nil,     5,   nil,     7,   nil,    70,
   nil,    38,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,    59,     2,     5,   nil,    68,   nil,   nil,    15,    70,
   nil,   nil,   nil,    14,   nil,   nil,    15,     2,   nil,    59,
     8,   nil,    22,   nil,   nil,    68,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,
    14,   nil,    12,   nil,    12,   nil,   nil,    38,    72,    77,
   nil,   nil,    59,    66,    25,    85,    74,    59,   nil,    15,
    29,    38,   nil,   nil,    38,    70,    14,    36,    22,   nil,
   nil,    59,   nil,    38,    59,    85,   nil,    15,   nil,    70,
   nil,    68,    70,    59,   nil,    15,   nil,   nil,    48,    68,
   nil,    70,   nil,   nil,   nil,    68,   nil,    14,    68,    29,
   nil,   nil,    22,   nil,   nil,   nil,   nil,    68,   nil,    22,
    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,    47,   nil,
    47,    15,    68,    15,   nil,   nil,    23,   nil,   nil,    59,
   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    70,   nil,    47,    47,    59,     8,   nil,    38,    38,
   nil,   nil,   nil,    38,    38,    23,   nil,    68,    59,    59,
   nil,   nil,   nil,    59,    59,    85,    70,    70,    12,   nil,
   nil,    70,    70,    22,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,    68,    68,    47,   nil,    61,    68,    68,   nil,
   nil,   nil,    47,    47,    47,    47,   nil,   nil,    47,   nil,
    15,    14,   nil,    47,   nil,   nil,    47,    47,    47,    47,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
     5,    61,    61,    61,    61,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    85,    85,   nil,     5,   nil,   nil,    85,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    38,    33,    41,    35,     1,   nil,   -57,   -22,   nil,
   nil,   nil,     0,     5,   -28,    37,    14,   -21,     1,   -32,
   nil,   -27,   -30,   -89,  -123,  -159,   -21,   -38,   -41,   -72,
   -36,  -124,  -348,   nil,   nil,    39,   -14,    -4,   -87,   nil,
  -118,   nil,   -44,   -73,  -154,  -228,   nil,   168,  -191,  -334,
   -46,   nil,   nil,   nil,  -219,  -217,  -285,  -316,  -265,   -77,
   -95,   245,  -274,  -274,   nil,   -48,  -118,  -183,   -53,  -131,
   -69,   nil,  -135,  -133,  -216,  -220,     3,   -77,  -147,   -54,
   nil,   -53,  -109,  -109,   nil,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   124,   nil,   225,   135,   nil,   nil,   nil,   nil,
    83,   126,   112,   nil,   nil,   nil,   nil,   nil,   nil,   263,
   nil,   nil,   nil,    20,    21,   nil,   nil,   nil,   nil,   114,
   115,   116,   nil,   nil,   nil,   nil,   119,   127,   nil,   nil,
   nil,   123,   125,   131,   nil,   nil,   nil,   nil,   nil,   192,
   nil,   153,   284,   285,   388,   nil,   nil,   183,   193,   nil,
   195,   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,
   151,   154,   160,   216,   162,     4,   224 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 112, :_reduce_1,
  1, 114, :_reduce_2,
  3, 114, :_reduce_3,
  1, 115, :_reduce_4,
  2, 115, :_reduce_5,
  0, 118, :_reduce_6,
  1, 118, :_reduce_7,
  3, 118, :_reduce_8,
  1, 119, :_reduce_9,
  1, 119, :_reduce_10,
  1, 119, :_reduce_11,
  1, 119, :_reduce_12,
  7, 121, :_reduce_13,
  9, 122, :_reduce_14,
  0, 124, :_reduce_15,
  2, 124, :_reduce_16,
  6, 117, :_reduce_17,
  0, 127, :_reduce_18,
  1, 127, :_reduce_19,
  3, 127, :_reduce_20,
  3, 129, :_reduce_21,
  0, 128, :_reduce_22,
  1, 128, :_reduce_23,
  3, 128, :_reduce_24,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  4, 131, :_reduce_28,
  0, 135, :_reduce_29,
  1, 135, :_reduce_30,
  3, 135, :_reduce_31,
  0, 134, :_reduce_32,
  3, 134, :_reduce_33,
  6, 123, :_reduce_34,
  0, 137, :_reduce_35,
  1, 137, :_reduce_36,
  3, 137, :_reduce_37,
  2, 138, :_reduce_38,
  3, 139, :_reduce_39,
  1, 139, :_reduce_40,
  4, 132, :_reduce_41,
  1, 141, :_reduce_none,
  1, 141, :_reduce_43,
  2, 142, :_reduce_44,
  3, 142, :_reduce_45,
  7, 142, :_reduce_46,
  0, 143, :_reduce_47,
  1, 143, :_reduce_48,
  1, 120, :_reduce_49,
  1, 120, :_reduce_50,
  6, 144, :_reduce_51,
  8, 145, :_reduce_52,
  2, 136, :_reduce_53,
  2, 136, :_reduce_54,
  1, 136, :_reduce_55,
  0, 146, :_reduce_56,
  2, 146, :_reduce_57,
  2, 149, :_reduce_58,
  0, 150, :_reduce_59,
  1, 150, :_reduce_60,
  3, 150, :_reduce_61,
  1, 151, :_reduce_62,
  2, 151, :_reduce_63,
  4, 151, :_reduce_64,
  1, 151, :_reduce_65,
  6, 151, :_reduce_66,
  3, 151, :_reduce_67,
  5, 151, :_reduce_68,
  5, 151, :_reduce_69,
  1, 151, :_reduce_70,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_74,
  4, 151, :_reduce_75,
  1, 151, :_reduce_76,
  4, 151, :_reduce_77,
  1, 151, :_reduce_none,
  5, 164, :_reduce_79,
  3, 165, :_reduce_80,
  0, 166, :_reduce_81,
  1, 166, :_reduce_82,
  2, 166, :_reduce_83,
  4, 169, :_reduce_84,
  0, 167, :_reduce_85,
  3, 167, :_reduce_86,
  0, 168, :_reduce_87,
  3, 168, :_reduce_88,
  3, 163, :_reduce_89,
  3, 162, :_reduce_90,
  3, 161, :_reduce_91,
  1, 161, :_reduce_none,
  5, 171, :_reduce_93,
  5, 171, :_reduce_94,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  0, 160, :_reduce_101,
  1, 160, :_reduce_102,
  5, 160, :_reduce_103,
  2, 175, :_reduce_104,
  2, 152, :_reduce_105,
  3, 176, :_reduce_106,
  3, 176, :_reduce_107,
  1, 176, :_reduce_108,
  1, 176, :_reduce_109,
  6, 140, :_reduce_110,
  3, 140, :_reduce_111,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 177, :_reduce_114,
  0, 133, :_reduce_115,
  2, 133, :_reduce_116,
  0, 180, :_reduce_117,
  1, 180, :_reduce_118,
  3, 180, :_reduce_119,
  3, 157, :_reduce_120,
  3, 157, :_reduce_121,
  3, 157, :_reduce_122,
  1, 182, :_reduce_123,
  1, 182, :_reduce_124,
  1, 182, :_reduce_125,
  1, 182, :_reduce_126,
  1, 182, :_reduce_127,
  1, 182, :_reduce_128,
  1, 182, :_reduce_129,
  1, 182, :_reduce_130,
  1, 182, :_reduce_131,
  4, 182, :_reduce_132,
  5, 182, :_reduce_133,
  0, 184, :_reduce_134,
  1, 184, :_reduce_135,
  4, 184, :_reduce_136,
  3, 185, :_reduce_137,
  2, 186, :_reduce_none,
  2, 147, :_reduce_139,
  2, 147, :_reduce_140,
  1, 147, :_reduce_141,
  2, 147, :_reduce_142,
  0, 148, :_reduce_143,
  4, 148, :_reduce_144,
  1, 187, :_reduce_145,
  3, 187, :_reduce_146,
  3, 188, :_reduce_147,
  2, 188, :_reduce_148,
  0, 189, :_reduce_149,
  2, 189, :_reduce_150,
  1, 158, :_reduce_151,
  2, 158, :_reduce_152,
  3, 158, :_reduce_153,
  3, 158, :_reduce_154,
  4, 191, :_reduce_155,
  1, 190, :_reduce_156,
  1, 190, :_reduce_157,
  2, 190, :_reduce_158,
  3, 190, :_reduce_159,
  3, 172, :_reduce_160,
  3, 172, :_reduce_161,
  3, 172, :_reduce_162,
  3, 172, :_reduce_163,
  3, 172, :_reduce_164,
  3, 172, :_reduce_165,
  3, 172, :_reduce_166,
  3, 172, :_reduce_167,
  3, 172, :_reduce_168,
  3, 172, :_reduce_169,
  3, 172, :_reduce_170,
  2, 172, :_reduce_171,
  2, 172, :_reduce_172,
  2, 172, :_reduce_173,
  3, 172, :_reduce_174,
  1, 172, :_reduce_175,
  3, 192, :_reduce_176,
  3, 192, :_reduce_177,
  3, 192, :_reduce_178,
  3, 192, :_reduce_179,
  3, 192, :_reduce_180,
  3, 192, :_reduce_181,
  3, 192, :_reduce_182,
  1, 170, :_reduce_183,
  1, 170, :_reduce_none,
  1, 170, :_reduce_185,
  2, 170, :_reduce_186,
  1, 170, :_reduce_none,
  5, 170, :_reduce_188,
  1, 170, :_reduce_189,
  1, 170, :_reduce_190,
  3, 193, :_reduce_191,
  3, 193, :_reduce_192,
  2, 195, :_reduce_193,
  3, 181, :_reduce_194,
  3, 181, :_reduce_195,
  0, 194, :_reduce_196,
  3, 194, :_reduce_197,
  0, 155, :_reduce_198,
  1, 155, :_reduce_199,
  3, 155, :_reduce_200,
  4, 179, :_reduce_201,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_228,
  0, 153, :_reduce_229,
  1, 153, :_reduce_none,
  0, 154, :_reduce_231,
  1, 154, :_reduce_none,
  0, 156, :_reduce_233,
  1, 156, :_reduce_none,
  0, 113, :_reduce_235,
  1, 113, :_reduce_236,
  1, 116, :_reduce_237,
  2, 116, :_reduce_238,
  1, 196, :_reduce_239,
  1, 196, :_reduce_none,
  0, 183, :_reduce_241,
  1, 183, :_reduce_none,
  1, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 125, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 429

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDATA_VAR => 35,
  :kDTYPE_UINT => 36,
  :kDTYPE_LINT => 37,
  :kDTYPE_LLINT => 38,
  :kDTYPE_CHAR => 39,
  :kDTYPE_I8 => 40,
  :kDTYPE_I16 => 41,
  :kDTYPE_I32 => 42,
  :kDTYPE_I64 => 43,
  :kDTYPE_UI8 => 44,
  :kDTYPE_UI16 => 45,
  :kDTYPE_UI32 => 46,
  :kDTYPE_UI64 => 47,
  :kDTYPE_INT => 48,
  :kDTYPE_F32 => 49,
  :kDTYPE_F64 => 50,
  :kDTYPE_LF64 => 51,
  :kDTYPE_ROBJ => 52,
  :kDTYPE_ULINT => 53,
  :kDTYPE_ULLINT => 54,
  :kDTYPE_VOID => 55,
  :kDTYPE_SIZE_T => 56,
  :kDTYPE_RB_STR => 57,
  :kDTYPE_UCHAR => 58,
  :kDTYPE_BOOL => 59,
  :tCUSTOM_DTYPE => 60,
  :kDTYPE_RB_ARR => 61,
  :kDTYPE_RB_HSH => 62,
  :tLPAREN => 63,
  :tRPAREN => 64,
  :tLSQUARE => 65,
  :tRSQUARE => 66,
  :tIDENTIFIER => 67,
  :tNL => 68,
  :tCOMMA => 69,
  :tSQUOTE => 70,
  :tSCOLON => 71,
  :EOF => 72,
  :tDOT => 73,
  :tQMARK => 74,
  :tSYMBOL => 75,
  :tLBRACE => 76,
  :tRBRACE => 77,
  :tCOLON => 78,
  :tCOLON2 => 79,
  :tPLUS => 80,
  :tMINUS => 81,
  :tSTAR => 82,
  :tDIVIDE => 83,
  :tEXPO => 84,
  :tMODULUS => 85,
  :tASSIGN => 86,
  :tEQ => 87,
  :tLT => 88,
  :tLTEQ => 89,
  :tGT => 90,
  :tGTEQ => 91,
  :tANDOP => 92,
  :tOROP => 93,
  :tBANG => 94,
  :tOP_ASSIGN => 95,
  :tSTRING => 96,
  :kSIZEOF => 97,
  :tBIT_AND => 98,
  :tBIT_OR => 99,
  :tBIT_XOR => 100,
  :tBIT_LSHIFT => 101,
  :tBIT_RSHIFT => 102,
  :tBIT_NOT => 103,
  :tINTEGER => 104,
  :tFLOAT => 105,
  :tSINGLE_CHAR => 106,
  :ADDRESS_OF => 107,
  :TYPECAST => 108,
  :UMINUS => 109,
  :tNEQ => 110 }

racc_nt_base = 111

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_30(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_31(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_46(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_70(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_84(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_145(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_146(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_153(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_154(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_162(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_163(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_170(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_186(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_188(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_189(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_190(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 652)
  def _reduce_191(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2])  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 653)
  def _reduce_192(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_193(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 665)
  def _reduce_194(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 669)
  def _reduce_195(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_196(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 674)
  def _reduce_197(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_198(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 678)
  def _reduce_199(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 679)
  def _reduce_200(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 684)
  def _reduce_201(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 695)
  def _reduce_228(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 699)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_231(val, _values, result)
    
    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'parser.racc', 707)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_235(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 712)
  def _reduce_236(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_237(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 716)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_239(val, _values, result)
    
    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'parser.racc', 723)
  def _reduce_241(val, _values, result)
    
    result
  end
.,.,

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.racc', 731)
  def _reduce_245(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
