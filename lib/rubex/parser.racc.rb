#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 730)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'117,119,270,65,270,204,120,391,74,140,141,142,19,74,87,281,98,5,144',
'130,6,127,161,129,364,98,121,203,162,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,153,73,145,71,133,71',
'287,179,66,211,204,181,143,146,106,248,7,324,154,334,249,105,25,363',
'333,149,98,199,200,199,200,152,214,139,160,155,199,200,117,119,156,136',
'137,138,120,199,200,140,141,142,19,5,87,355,6,29,144,130,356,127,161',
'129,5,30,121,6,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,153,22,145,22,133,5,94,212,6,369,179,31',
'143,146,181,19,94,19,154,23,18,23,97,33,383,149,95,357,98,98,17,152',
'17,139,160,155,95,98,117,119,156,136,137,138,120,351,69,140,141,142',
'19,71,87,199,200,5,144,130,6,127,161,129,5,75,121,6,162,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61',
'153,22,145,71,133,5,174,211,6,212,79,181,143,146,405,19,88,5,154,23',
'6,98,93,210,5,149,98,6,96,98,17,152,66,139,160,155,199,200,117,119,156',
'136,137,138,120,199,200,140,141,142,19,5,87,69,6,5,144,130,6,127,161',
'129,5,107,121,6,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,60,61,153,211,145,212,133,222,223,224,225',
'226,227,359,143,146,358,199,200,210,154,224,225,226,227,167,208,149',
'224,225,226,227,71,152,175,139,160,155,199,200,117,119,156,136,137,138',
'120,199,200,140,141,142,19,5,87,176,6,5,144,130,6,127,161,129,5,178',
'121,6,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,153,183,145,186,133,222,223,224,225,226,227,202',
'143,146,199,200,199,200,154,199,200,199,200,71,361,149,374,375,277,278',
'213,152,71,139,160,155,279,280,117,119,156,136,137,138,120,199,200,140',
'141,142,19,71,87,199,200,247,144,130,250,127,161,129,199,200,121,252',
'162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,60,61,153,71,145,258,133,374,375,167,167,212,204,211,143,146',
'272,285,290,291,154,293,71,326,226,71,252,149,340,186,344,345,346,152',
'199,139,160,155,351,210,117,119,156,136,137,138,120,226,226,140,141',
'142,19,226,87,226,204,367,144,130,371,127,161,129,376,379,121,380,162',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,153,384,145,291,133,387,71,390,98,167,394,400,143,146,204',
'410,167,,154,,,,,,,149,,,,,,152,,139,160,155,,,117,119,156,136,137,138',
'120,,,140,141,142,19,,87,,,,144,130,,127,161,129,,,121,,162,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60',
'61,153,,145,,133,,,,,,,,143,146,,,,,154,,,,,,,149,,,,,,152,,139,160',
'155,,,117,119,156,136,137,138,120,,,140,141,142,19,,87,,,,144,130,,127',
'161,129,,,121,,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,153,,145,,133,5,,,6,,,,143,146,,,,,154',
',,,,,,149,,,,,,152,,139,160,155,,,117,119,156,136,137,138,120,,,140',
'141,142,19,,87,,,,144,130,,127,161,129,,,121,,162,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,153,',
'145,,133,5,,,6,,,,143,146,,,,,154,,,,,,,149,,,,,,152,,139,160,155,,',
'117,119,156,136,137,138,120,,,140,141,142,19,,87,,,,144,130,,127,161',
'129,,,121,,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,153,,145,,133,,,,,,,,143,146,,,,,154,,,,',
',,149,,,,,,152,,139,160,155,,,117,119,156,136,137,138,120,,,140,141',
'142,19,,87,,,,144,130,,127,161,129,,,121,,162,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,153,,145,,133',
'5,,,6,,,,143,146,,,,,154,140,141,142,,,,149,,,144,,,152,161,139,160',
'155,,,162,,156,136,137,138,,140,141,142,,,,,,22,144,,,,161,,,,,,162',
',153,19,145,,191,23,,,,,,,143,146,,,17,,154,,,,,,,149,153,,145,,191',
'152,,139,160,155,,,143,146,156,136,137,138,154,140,141,142,,,5,149,',
'6,144,,,152,161,139,160,155,,,162,,156,136,137,138,,140,141,142,,,,',
',22,144,,,,161,,,,,,162,,195,19,145,,191,23,,,,,,,143,146,,,17,,154',
',,,,,,,153,,145,,191,,,139,160,155,,,143,146,156,136,137,138,154,140',
'141,142,,,5,149,,6,144,,,152,161,139,160,155,,,162,,156,136,137,138',
',140,141,142,,,,,,,144,,,,161,,,,,,162,,153,,145,,191,222,223,224,225',
'226,227,,143,146,,,,,154,,,,,,229,230,153,,145,,191,152,,139,160,155',
',,143,146,156,136,137,138,154,140,141,142,,,,149,,,144,,,152,161,139',
'160,155,,,162,,156,136,137,138,,140,141,142,,,,22,368,,144,,,,161,,',
',,,162,19,153,,145,23,191,,,,,,,,143,146,17,,,,154,,,,,,,149,244,,145',
',191,152,,139,160,155,,,143,146,156,136,137,138,154,140,141,142,5,,',
'6,,,144,,,,161,139,160,155,,,162,,156,136,137,138,,140,141,142,,,,,',
',144,,,,161,,,,,,162,,244,,145,,191,222,223,224,225,226,227,,143,146',
',,,,154,,,,,228,229,230,244,,145,,191,,,139,160,155,,,143,146,156,136',
'137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,,156,136',
'137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,153,,145,,191,,,,,,',
',143,146,,,,,154,,,,,,,149,244,,145,,191,152,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,153,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,149,153,,145,,191,152,,139,160,155,,,143',
'146,156,136,137,138,154,140,141,142,,,,149,,,144,,,152,161,139,160,155',
',,162,,156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,153,',
'145,,191,,,,,,,,143,146,,,,,154,,,,,,,149,153,,145,,191,152,,139,160',
'155,,,143,146,156,136,137,138,154,140,141,142,,,,149,,,144,,,152,161',
'139,160,155,,,162,,156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,',
',,162,,153,,145,,191,,,,,,,,143,146,,,,,154,,,,,,,149,153,,145,,191',
'152,,139,160,155,,,143,146,156,136,137,138,154,140,141,142,,,,149,,',
'144,,,152,161,139,160,155,,,162,,156,136,137,138,,140,141,142,,,,,,',
'144,,,,161,,,,,,162,,153,,145,,191,,,,,,,,143,146,,,,,154,,,,,,,149',
'153,,145,,191,152,,139,160,155,,,143,146,156,136,137,138,154,140,141',
'142,,,,149,,,144,,,152,161,139,160,155,,,162,,156,136,137,138,140,141',
'142,,,,,,,144,,,,161,,,,,,162,,,153,,145,,191,,,,,,,,143,146,,,,,154',
',,,,,,149,,145,,191,,152,,139,160,155,,143,146,,156,136,137,138,140',
'141,142,22,,,,,,144,,,,161,139,160,,19,,162,18,23,136,137,138,,140,141',
'142,,,,17,,,144,,,,161,,,,,,162,,244,,145,,191,222,223,224,225,226,227',
',143,146,,,,,154,5,,,6,228,229,230,244,,145,,191,,,139,160,155,,,143',
'146,156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162',
',156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,244,,145,,191,,,139,160,155,,,143,146',
'156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162,',
'156,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,,,145,,191,140',
'141,142,,,,,143,146,144,,,,161,,,,,,162,,153,,145,,191,,,139,160,,,',
'143,146,,136,137,138,154,,,,,,,149,153,,145,,191,152,,139,160,155,,',
'143,146,156,136,137,138,154,140,141,142,,,,149,,,144,,,152,161,139,160',
'155,,,162,,156,136,137,138,140,141,142,,,,,,,144,,,,161,,,,,,162,,,153',
',145,,191,,,,,,,,143,146,,,,,154,,,,,,,149,,145,,191,,152,,139,160,155',
',143,146,,156,136,137,138,140,141,142,,,,,,,144,,,,161,139,160,,,,162',
',,136,137,138,,140,141,142,,,,,,,144,,,,161,,,,,,162,,153,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,149,244,,145,,191,152,,139,160,155,,,143',
'146,156,136,137,138,154,140,141,142,,,,,,,144,,,,161,139,160,155,,,162',
',156,136,137,138,140,141,142,,,,,,,144,,,,161,,,,,,162,,,244,,145,,191',
',,,,,,,143,146,,,,,154,,,,,,,,,145,,191,,,,139,160,155,,143,146,172',
'156,136,137,138,,,,,,,,,19,,87,,,,139,160,,,,,,,136,137,138,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60',
'61,19,,87,,,5,,,6,,,,,,,,,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,60,61,325,,,,,,81,,,,,,,,,,222,223',
'224,225,226,227,,233,235,236,237,238,,,263,,,,228,229,230,231,232,,',
',,,,,234,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,325,,,,,,,,,,,,325,,,,222,223,224,225,226,227,',
',277,278,279,280,222,223,224,225,226,227,228,229,230,231,232,,,,,,,',
'228,229,230,231,232,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,60,61,,,,,,5,,,6,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,-29,,,,,-29',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,,,,,166,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,60,61,,,,,166,222,223,224,225,226,227,,233',
'235,236,237,238,,,,,,,228,229,230,231,232,,,,,,,,234,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58',
'59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,222,223,224',
'225,226,227,,,277,278,279,280,222,223,224,225,226,227,228,229,230,231',
'232,222,223,224,225,226,227,,228,229,230,231,232,222,223,224,225,226',
'227,228,229,230,231,232,222,223,224,225,226,227,,228,229,230,231,232',
'222,223,224,225,226,227,228,229,230,231,232,222,223,224,225,226,227',
',228,229,230,231,232,222,223,224,225,226,227,228,229,230,231,232,222',
'223,224,225,226,227,,228,229,230,231,232,,,,,,,228,229,230,231,232' ]
        racc_action_table = arr = ::Array.new(4003, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'92,92,193,29,395,131,92,365,32,92,92,92,92,204,92,198,306,0,92,92,0',
'92,92,92,306,365,92,131,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,32,92,193,92,395,204,112,29',
'135,305,112,92,92,87,163,1,240,92,254,163,87,7,305,254,92,112,193,193',
'395,395,92,135,92,92,92,198,198,185,185,92,92,92,92,185,240,240,185',
'185,185,185,3,185,296,3,17,185,185,296,185,185,185,8,18,185,8,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,77,185,2,185,185,73,287,185',
'339,335,19,185,185,335,77,287,2,185,77,2,2,76,22,349,185,73,297,339',
'335,77,185,2,185,185,185,287,76,201,201,185,185,185,185,201,349,30,201',
'201,201,201,31,201,297,297,11,201,201,11,201,201,201,80,33,201,80,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,171,201,64,201,201,103,191',
'201,191,66,265,201,201,392,171,69,89,201,171,89,103,72,191,99,201,265',
'99,74,392,171,201,78,201,201,201,126,126,257,257,201,201,201,201,257',
'188,188,257,257,257,257,114,257,81,114,129,257,257,129,257,257,257,259',
'88,257,259,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,133,257,133',
'257,314,314,314,314,314,314,301,257,257,301,268,268,133,257,307,307',
'307,307,97,133,257,308,308,308,308,100,257,104,257,257,257,286,286,269',
'269,257,257,257,257,269,292,292,269,269,269,269,383,269,108,383,384',
'269,269,384,269,269,269,400,110,269,400,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,113,269,115,269,315,315,315,315,315,315,130,269',
'269,295,295,298,298,269,299,299,300,300,303,303,269,342,342,345,345',
'134,269,145,269,269,269,346,346,272,272,269,269,269,269,272,354,354',
'272,272,272,272,146,272,385,385,160,272,272,165,272,272,272,386,386',
'272,166,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,168,272,170',
'272,411,411,174,180,181,189,192,272,272,194,202,205,206,272,210,217',
'242,243,248,250,272,263,267,273,275,276,272,283,272,272,272,284,293',
'281,281,272,272,272,272,281,309,310,281,281,281,281,311,281,312,332',
'337,281,281,341,281,281,281,343,347,281,348,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,351,281,353,281,360,361,363,370,371,372,381',
'281,281,389,404,410,,281,,,,,,,281,,,,,,281,,281,281,281,,,375,375,281',
'281,281,281,375,,,375,375,375,375,,375,,,,375,375,,375,375,375,,,375',
',375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,,375,,375,,,,,,,,375',
'375,,,,,375,,,,,,,375,,,,,,375,,375,375,375,,,401,401,375,375,375,375',
'401,,,401,401,401,401,,401,,,,401,401,,401,401,401,,,401,,401,401,401',
'401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401',
'401,401,401,401,401,401,401,401,401,,401,,401,401,,,401,,,,401,401,',
',,,401,,,,,,,401,,,,,,401,,401,401,401,,,402,402,401,401,401,401,402',
',,402,402,402,402,,402,,,,402,402,,402,402,402,,,402,,402,402,402,402',
'402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402',
'402,402,402,402,402,402,402,402,,402,,402,402,,,402,,,,402,402,,,,,402',
',,,,,,402,,,,,,402,,402,402,402,,,406,406,402,402,402,402,406,,,406',
'406,406,406,,406,,,,406,406,,406,406,406,,,406,,406,406,406,406,406',
'406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,406,406,406,406,,406,,406,,,,,,,,406,406,,,,,406,,,,,,,406',
',,,,,406,,406,406,406,,,407,407,406,406,406,406,407,,,407,407,407,407',
',407,,,,407,407,,407,407,407,,,407,,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,,407,,407,407,,,407,,,,407,407,,,,,407,117,117,117,',
',,407,,,117,,,407,117,407,407,407,,,117,,407,407,407,407,,119,119,119',
',,,,,28,119,,,,119,,,,,,119,,117,28,117,,117,28,,,,,,,117,117,,,28,',
'117,,,,,,,117,119,,119,,119,117,,117,117,117,,,119,119,117,117,117,117',
'119,120,120,120,,,28,119,,28,120,,,119,120,119,119,119,,,120,,119,119',
'119,119,,121,121,121,,,,,,169,121,,,,121,,,,,,121,,120,169,120,,120',
'169,,,,,,,120,120,,,169,,120,,,,,,,,121,,121,,121,,,120,120,120,,,121',
'121,120,120,120,120,121,148,148,148,,,169,121,,169,148,,,121,148,121',
'121,121,,,148,,121,121,121,121,,152,152,152,,,,,,,152,,,,152,,,,,,152',
',148,,148,,148,313,313,313,313,313,313,,148,148,,,,,148,,,,,,313,313',
'152,,152,,152,148,,148,148,148,,,152,152,148,148,148,148,152,153,153',
'153,,,,152,,,153,,,152,153,152,152,152,,,153,,152,152,152,152,,154,154',
'154,,,,338,338,,154,,,,154,,,,,,154,338,153,,153,338,153,,,,,,,,153',
'153,338,,,,153,,,,,,,153,154,,154,,154,153,,153,153,153,,,154,154,153',
'153,153,153,154,155,155,155,338,,,338,,,155,,,,155,154,154,154,,,155',
',154,154,154,154,,156,156,156,,,,,,,156,,,,156,,,,,,156,,155,,155,,155',
'316,316,316,316,316,316,,155,155,,,,,155,,,,,316,316,316,156,,156,,156',
',,155,155,155,,,156,156,155,155,155,155,156,186,186,186,,,,,,,186,,',
',186,156,156,156,,,186,,156,156,156,156,,195,195,195,,,,,,,195,,,,195',
',,,,,195,,186,,186,,186,,,,,,,,186,186,,,,,186,,,,,,,186,195,,195,,195',
'186,,186,186,186,,,195,195,186,186,186,186,195,199,199,199,,,,,,,199',
',,,199,195,195,195,,,199,,195,195,195,195,,200,200,200,,,,,,,200,,,',
'200,,,,,,200,,199,,199,,199,,,,,,,,199,199,,,,,199,,,,,,,199,200,,200',
',200,199,,199,199,199,,,200,200,199,199,199,199,200,203,203,203,,,,200',
',,203,,,200,203,200,200,200,,,203,,200,200,200,200,,208,208,208,,,,',
',,208,,,,208,,,,,,208,,203,,203,,203,,,,,,,,203,203,,,,,203,,,,,,,203',
'208,,208,,208,203,,203,203,203,,,208,208,203,203,203,203,208,211,211',
'211,,,,208,,,211,,,208,211,208,208,208,,,211,,208,208,208,208,,212,212',
'212,,,,,,,212,,,,212,,,,,,212,,211,,211,,211,,,,,,,,211,211,,,,,211',
',,,,,,211,212,,212,,212,211,,211,211,211,,,212,212,211,211,211,211,212',
'213,213,213,,,,212,,,213,,,212,213,212,212,212,,,213,,212,212,212,212',
',214,214,214,,,,,,,214,,,,214,,,,,,214,,213,,213,,213,,,,,,,,213,213',
',,,,213,,,,,,,213,214,,214,,214,213,,213,213,213,,,214,214,213,213,213',
'213,214,216,216,216,,,,214,,,216,,,214,216,214,214,214,,,216,,214,214',
'214,214,219,219,219,,,,,,,219,,,,219,,,,,,219,,,216,,216,,216,,,,,,',
',216,216,,,,,216,,,,,,,216,,219,,219,,216,,216,216,216,,219,219,,216',
'216,216,216,222,222,222,27,,,,,,222,,,,222,219,219,,27,,222,27,27,219',
'219,219,,223,223,223,,,,27,,,223,,,,223,,,,,,223,,222,,222,,222,317',
'317,317,317,317,317,,222,222,,,,,222,27,,,27,317,317,317,223,,223,,223',
',,222,222,222,,,223,223,222,222,222,222,223,224,224,224,,,,,,,224,,',
',224,223,223,223,,,224,,223,223,223,223,,225,225,225,,,,,,,225,,,,225',
',,,,,225,,224,,224,,224,,,,,,,,224,224,,,,,224,,,,,,,,225,,225,,225',
',,224,224,224,,,225,225,224,224,224,224,225,226,226,226,,,,,,,226,,',
',226,225,225,225,,,226,,225,225,225,225,,227,227,227,,,,,,,227,,,,227',
',,,,,227,,226,,226,,226,,,,,,,,226,226,,,,,226,,,,,,,,227,,227,,227',
',,226,226,226,,,227,227,226,226,226,226,227,228,228,228,,,,,,,228,,',
',228,227,227,227,,,228,,227,227,227,227,,229,229,229,,,,,,,229,,,,229',
',,,,,229,,228,,228,,228,,,,,,,,228,228,,,,,228,,,,,,,,229,,229,,229',
',,228,228,228,,,229,229,228,228,228,228,229,230,230,230,,,,,,,230,,',
',230,229,229,229,,,230,,229,229,229,229,,231,231,231,,,,,,,231,,,,231',
',,,,,231,,230,,230,,230,,,,,,,,230,230,,,,,230,,,,,,,,231,,231,,231',
',,230,230,230,,,231,231,230,230,230,230,231,232,232,232,,,,,,,232,,',
',232,231,231,231,,,232,,231,231,231,231,,233,233,233,,,,,,,233,,,,233',
',,,,,233,,232,,232,,232,,,,,,,,232,232,,,,,232,,,,,,,,233,,233,,233',
',,232,232,232,,,233,233,232,232,232,232,233,234,234,234,,,,,,,234,,',
',234,233,233,233,,,234,,233,233,233,233,,235,235,235,,,,,,,235,,,,235',
',,,,,235,,234,,234,,234,,,,,,,,234,234,,,,,234,,,,,,,,235,,235,,235',
',,234,234,234,,,235,235,234,234,234,234,235,236,236,236,,,,,,,236,,',
',236,235,235,235,,,236,,235,235,235,235,,237,237,237,,,,,,,237,,,,237',
',,,,,237,,236,,236,,236,,,,,,,,236,236,,,,,236,,,,,,,,237,,237,,237',
',,236,236,236,,,237,237,236,236,236,236,237,238,238,238,,,,,,,238,,',
',238,237,237,237,,,238,,237,237,237,237,,244,244,244,,,,,,,244,,,,244',
',,,,,244,,238,,238,,238,,,,,,,,238,238,,,,,238,,,,,,,,244,,244,,244',
',,238,238,238,,,244,244,238,238,238,238,244,252,252,252,,,,,,,252,,',
',252,244,244,244,,,252,,244,244,244,244,,291,291,291,,,,,,,291,,,,291',
',,,,,291,,,,252,,252,356,356,356,,,,,252,252,356,,,,356,,,,,,356,,291',
',291,,291,,,252,252,,,,291,291,,252,252,252,291,,,,,,,291,356,,356,',
'356,291,,291,291,291,,,356,356,291,291,291,291,356,358,358,358,,,,356',
',,358,,,356,358,356,356,356,,,358,,356,356,356,356,362,362,362,,,,,',
',362,,,,362,,,,,,362,,,358,,358,,358,,,,,,,,358,358,,,,,358,,,,,,,358',
',362,,362,,358,,358,358,358,,362,362,,358,358,358,358,374,374,374,,',
',,,,374,,,,374,362,362,,,,374,,,362,362,362,,377,377,377,,,,,,,377,',
',,377,,,,,,377,,374,,374,,374,,,,,,,,374,374,,,,,374,,,,,,,374,377,',
'377,,377,374,,374,374,374,,,377,377,374,374,374,374,377,378,378,378',
',,,,,,378,,,,378,377,377,377,,,378,,377,377,377,377,388,388,388,,,,',
',,388,,,,388,,,,,,388,,,378,,378,,378,,,,,,,,378,378,,,,,378,,,,,,,',
',388,,388,,,,378,378,378,,388,388,101,378,378,378,378,,,,,,,,,101,,101',
',,,388,388,,,,,,,388,388,388,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'67,,67,,,101,,,101,,,,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,241,,,,,,67,,,,,,,,,,241,241',
'241,241,241,241,,241,241,241,241,241,,,175,,,,241,241,241,241,241,,',
',,,,,241,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,274,,,,,,,,,,,,327,',
',,274,274,274,274,274,274,,,274,274,274,274,327,327,327,327,327,327',
'274,274,274,274,274,,,,,,,,327,327,327,327,327,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,,,,,,109,,,109,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
',167,,,,,167,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,,,,,93,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
',,,,249,150,150,150,150,150,150,,150,150,150,150,150,,,,,,,150,150,150',
'150,150,,,,,,,,150,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,65,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,70,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,333',
'333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333',
'333,333,333,333,333,333,333,333,333,197,197,197,197,197,197,,,197,197',
'197,197,318,318,318,318,318,318,197,197,197,197,197,319,319,319,319',
'319,319,,318,318,318,318,318,320,320,320,320,320,320,319,319,319,319',
'319,321,321,321,321,321,321,,320,320,320,320,320,322,322,322,322,322',
'322,321,321,321,321,321,323,323,323,323,323,323,,322,322,322,322,322',
'397,397,397,397,397,397,323,323,323,323,323,398,398,398,398,398,398',
',397,397,397,397,397,,,,,,,398,398,398,398,398' ]
        racc_action_check = arr = ::Array.new(4003, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   -48,    72,   151,    42,   nil,   nil,   nil,    78,    53,   nil,
   nil,   140,   nil,   nil,   nil,   nil,   nil,    47,    26,    97,
   nil,   nil,   152,  3693,   nil,   nil,   nil,  2121,  1141,   -21,
   132,   136,    -7,   143,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   182,  3720,   190,  3376,   nil,   185,
  3747,   nil,   206,    85,   201,   nil,   108,   149,   191,   nil,
   147,   233,   nil,   nil,   nil,   nil,   nil,    13,   214,   196,
   nil,   nil,    -4,  3598,   nil,   nil,   nil,   301,   nil,   203,
   303,  3332,   nil,   186,   287,   nil,   nil,   nil,   388,  3528,
   335,   nil,     3,   430,   230,   430,   nil,  1096,   nil,  1122,
  1188,  1214,   nil,   nil,   nil,   nil,   191,   nil,   nil,   234,
   427,   -65,   nil,   279,   379,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   399,   418,   nil,  1280,  3774,
  3618,   nil,  1306,  1372,  1398,  1464,  1490,   nil,   nil,   nil,
   427,   nil,   nil,    10,   nil,   426,   414,  3564,   462,  1233,
   526,   243,   nil,   nil,   473,  3450,   nil,   nil,   nil,   nil,
   474,   473,   nil,   nil,   nil,    90,  1556,   nil,   200,   466,
   nil,   191,   477,    -6,   528,  1582,   nil,  3811,     3,  1648,
  1674,   184,   477,  1740,    -2,   476,   460,   nil,  1766,   nil,
   481,  1832,  1858,  1924,  1950,   nil,  2016,   481,   nil,  2041,
   nil,   nil,  2107,  2133,  2199,  2225,  2291,  2317,  2383,  2409,
  2475,  2501,  2567,  2593,  2659,  2685,  2751,  2777,  2843,   nil,
    12,  3375,   486,   467,  2869,   nil,   nil,  3801,   484,  3630,
   467,   nil,  2935,   nil,    14,   nil,   nil,   278,   nil,   241,
   nil,   nil,   nil,   488,   nil,   191,   nil,   548,   264,   372,
   nil,   nil,   466,   493,  3449,   491,   492,   nil,   nil,   nil,
   nil,   560,   nil,   469,   534,   nil,   285,    95,   nil,   nil,
   nil,  2961,   294,   487,   nil,   357,    48,   114,   359,   362,
   364,   286,   nil,   390,   nil,    -4,   -63,   278,   285,   490,
   491,   496,   498,  1268,   266,   360,  1452,  2095,  3823,  3834,
  3846,  3857,  3869,  3880,   nil,   nil,   nil,  3461,   nil,   nil,
   nil,   nil,   510,  3828,   nil,   100,   nil,   578,  1415,    99,
   nil,   523,   452,   585,   nil,   375,   381,   586,   588,   167,
   nil,   557,   nil,   540,   388,   nil,  2987,   nil,  3053,   nil,
   551,   561,  3078,   540,   nil,   -54,   nil,   nil,   nil,   nil,
   549,   569,   627,   nil,  3144,   654,   nil,  3170,  3236,   nil,
   nil,   602,   nil,   324,   328,   396,   405,   nil,  3261,   564,
   nil,   nil,   194,   nil,   nil,    -4,   nil,  3892,  3903,   nil,
   335,   748,   842,   nil,   574,   nil,   936,  1030,   nil,   nil,
   576,   525,   nil,   nil,   nil ]

racc_action_default = [
  -228,  -239,    -6,  -229,  -230,  -232,  -233,  -239,  -228,    -2,
    -4,  -239,    -7,    -9,   -10,   -11,   -12,  -239,  -239,  -239,
   -49,   -50,   -56,  -239,  -231,   415,    -1,  -229,    -5,   -15,
   -18,  -239,  -239,  -239,  -112,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,    -3,    -8,  -239,  -239,  -239,   -22,   -19,  -239,
   -35,  -238,  -140,  -138,  -239,   -57,  -239,    -6,   -15,   -16,
  -239,  -239,   -23,   -25,   -26,   -27,  -112,  -239,  -239,  -228,
   -36,  -112,   -59,  -239,  -136,  -137,  -139,   -32,  -113,  -228,
  -239,  -239,   -20,  -239,  -239,   -42,   -43,   -21,  -239,  -229,
   -38,   -40,  -239,  -239,  -228,   -60,   -62,  -226,   -64,  -239,
  -239,  -239,   -69,   -70,   -71,   -72,   -73,   -74,   -75,  -239,
  -239,  -172,  -112,  -193,  -180,  -193,  -120,  -121,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -234,  -234,  -148,  -239,  -239,
  -153,  -154,  -239,  -239,  -239,  -239,  -239,  -181,  -182,  -184,
  -239,  -186,  -187,  -239,  -142,  -239,  -146,  -112,  -239,  -229,
  -239,    -6,   -17,   -24,   -32,  -239,   -34,   -37,  -112,  -112,
   -32,  -109,  -110,   -51,   -58,  -229,  -239,   -63,  -227,  -172,
  -180,  -193,  -193,  -239,  -239,  -239,   -89,  -239,  -239,  -239,
  -239,   -59,  -239,  -239,  -239,  -102,  -105,  -106,  -239,  -183,
  -239,  -195,  -239,  -239,  -239,  -190,  -114,  -235,  -236,  -131,
  -149,  -112,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,
  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -239,  -155,
  -239,  -153,  -154,  -168,  -239,  -169,  -170,  -239,  -239,  -239,
  -146,  -145,  -239,   -30,  -239,  -112,   -55,   -59,   -13,  -239,
   -28,   -41,  -112,  -239,   -39,  -239,  -108,   -61,   -66,   -59,
   -96,   -97,   -59,  -239,  -239,  -239,  -239,   -92,   -93,   -94,
   -95,   -59,  -150,  -151,   -78,   -86,   -87,  -138,  -191,  -192,
  -112,  -239,  -117,  -189,  -188,  -196,  -239,  -239,  -118,  -119,
  -115,  -239,  -237,  -234,  -132,  -239,  -239,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -173,  -174,
  -175,  -176,  -177,  -178,  -156,  -171,  -179,  -239,  -112,  -141,
  -143,  -144,  -147,  -112,   -33,   -53,   -54,  -239,  -239,   -44,
  -112,  -239,   -98,  -239,   -88,  -239,  -239,  -239,  -239,   -82,
   -79,  -239,  -103,  -104,  -111,  -194,  -239,  -198,  -239,  -129,
  -239,  -234,  -239,  -239,  -152,  -239,   -31,   -52,   -14,  -112,
   -45,   -32,  -239,   -99,  -239,   -59,   -67,  -239,  -239,   -68,
   -76,   -84,   -80,  -239,  -239,  -197,  -116,  -130,  -239,  -134,
  -135,  -185,   -47,  -107,   -65,  -239,  -101,   -90,   -91,   -77,
  -239,   -59,   -59,  -133,  -239,   -48,   -59,   -59,   -83,   -81,
   -32,   -98,   -85,   -46,  -100 ]

racc_goto_table = [
    24,     3,    70,    16,   113,    76,    63,   269,   168,    27,
   253,    72,    28,   207,   131,   216,   219,   304,    99,   251,
   196,   111,   164,    34,    24,    24,   215,   372,    16,    16,
     2,    68,   350,    90,   134,    77,     9,    64,    26,    82,
    85,     1,     8,    67,    80,   254,    89,   135,   110,   104,
   261,   404,    32,    92,   182,   267,   187,   103,   194,   348,
   349,    62,   206,   381,   399,    78,   377,    86,    84,   378,
    91,   171,   177,   173,    85,   205,   341,   301,    16,   303,
   362,   101,   102,   215,   163,   260,   100,   220,   242,   294,
   109,   266,   296,   165,   nil,   273,   414,   382,    24,   nil,
   169,    86,    84,   331,   nil,   nil,    24,   131,   264,    91,
   nil,   nil,   259,   284,   nil,   185,   nil,   nil,   nil,   108,
   nil,   nil,   nil,   131,   nil,   nil,   nil,   134,   nil,   170,
   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   135,   305,   nil,   134,   184,   nil,   289,    63,   nil,   221,
   265,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   271,   nil,    24,   255,   nil,   337,
    16,   352,    16,   360,   332,   262,   366,   nil,   330,   131,
   nil,   342,    24,   288,   343,   336,   403,   nil,   302,   nil,
   nil,   131,   306,   347,   131,   nil,   nil,   nil,    24,   134,
   nil,   nil,   nil,   131,   nil,   nil,   nil,   182,   nil,   406,
   nil,   134,   135,   nil,   134,   nil,   nil,   nil,   nil,   329,
   353,   nil,   nil,   134,   135,   nil,   335,   135,   nil,   nil,
   nil,   388,   nil,   339,   nil,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   328,   nil,   165,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   338,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,
   nil,   nil,   393,   nil,   389,   nil,   nil,   396,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   188,   131,   193,   365,
   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   305,   370,   nil,   408,   409,   nil,    63,   134,   411,   412,
   nil,   413,   nil,   131,   131,   nil,   nil,   nil,   131,   131,
   135,   239,   240,   255,   197,    24,   nil,   nil,   nil,    16,
   392,   nil,   nil,   134,   134,   nil,   nil,   nil,   134,   134,
   nil,   nil,   nil,   nil,   nil,   nil,   135,   135,   nil,   nil,
   nil,   135,   135,   nil,   nil,   268,   271,   241,   243,   245,
   246,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,   283,
   nil,   nil,   286,   nil,   401,   402,   nil,   292,   nil,   nil,
   295,   297,   298,   299,   nil,   300,   nil,   nil,    24,    24,
   nil,   407,   nil,   nil,    24,   nil,   nil,   nil,   nil,   274,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   nil,   nil,   nil,   nil,   nil,   327,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   354,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   385,   nil,   386,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   395,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   397,   398 ]

racc_goto_check = [
    83,     5,    14,    12,    38,    22,     8,    45,    23,     5,
    25,    36,     5,    63,    56,    69,    69,    71,     7,    75,
    57,    29,    74,    15,    83,    83,    80,    46,    12,    12,
     2,    18,    55,    27,    65,    14,     4,    13,     2,    19,
    21,     1,     3,    16,    17,    24,    26,    67,    28,    30,
    31,    32,    35,    37,    65,    40,    42,    22,    47,    51,
    52,     4,    29,    53,    54,    15,    59,    15,    12,    60,
    15,    14,    27,    19,    21,    62,    64,    66,    12,    70,
    72,     5,    18,    80,    73,    23,    13,    76,    78,    79,
     5,    23,    82,    15,   nil,    57,    46,    55,    83,   nil,
     5,    15,    12,    75,   nil,   nil,    83,    56,    29,    15,
   nil,   nil,     7,    38,   nil,     5,   nil,   nil,   nil,     2,
   nil,   nil,   nil,    56,   nil,   nil,   nil,    65,   nil,     2,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
    67,    56,   nil,    65,     2,   nil,    65,     8,   nil,    15,
    22,   nil,   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    14,   nil,    83,    15,   nil,    38,
    12,    63,    12,    69,    56,    15,    25,   nil,    74,    56,
   nil,    38,    83,    36,    38,    29,    71,   nil,    14,   nil,
   nil,    56,    22,    38,    56,   nil,   nil,   nil,    83,    65,
   nil,   nil,   nil,    56,   nil,   nil,   nil,    65,   nil,    45,
   nil,    65,    67,   nil,    65,   nil,   nil,   nil,   nil,    14,
    29,   nil,   nil,    65,    67,   nil,    22,    67,   nil,   nil,
   nil,    69,   nil,    22,   nil,   nil,    67,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,
   nil,   nil,    23,   nil,    56,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,    56,    44,    22,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    22,   nil,    38,    38,   nil,     8,    65,    38,    38,
   nil,    23,   nil,    56,    56,   nil,   nil,   nil,    56,    56,
    67,    44,    44,    15,    58,    83,   nil,   nil,   nil,    12,
    22,   nil,   nil,    65,    65,   nil,   nil,   nil,    65,    65,
   nil,   nil,   nil,   nil,   nil,   nil,    67,    67,   nil,   nil,
   nil,    67,    67,   nil,   nil,    44,    14,    58,    58,    58,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,    44,
   nil,   nil,    44,   nil,     5,     5,   nil,    44,   nil,   nil,
    44,    44,    44,    44,   nil,    44,   nil,   nil,    83,    83,
   nil,     5,   nil,   nil,    83,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    58,    58,    58,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,   nil,   nil,   nil,   nil,   nil,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    44,   nil,    44,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    58,    58 ]

racc_goto_pointer = [
   nil,    41,    30,    40,    34,     1,   nil,   -59,   -22,   nil,
   nil,   nil,     1,     8,   -29,     0,    13,   -23,     1,   -28,
   nil,   -27,   -29,   -89,  -122,  -157,   -24,   -37,   -43,   -70,
   -38,  -125,  -341,   nil,   nil,    30,   -21,   -19,   -88,   nil,
  -130,   nil,   -61,   nil,   179,  -186,  -315,   -62,   nil,   nil,
   nil,  -225,  -224,  -286,  -317,  -252,   -78,  -100,   214,  -279,
  -277,   nil,   -57,  -119,  -189,   -58,  -139,   -45,   nil,  -130,
  -140,  -202,  -225,    -9,   -71,  -147,   -61,   nil,   -65,  -121,
  -109,   nil,  -119,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   123,   nil,   218,   132,   nil,   nil,   nil,   nil,
    83,   125,   112,   nil,   nil,   nil,   nil,   nil,   nil,   256,
   nil,   nil,   nil,    20,    21,   nil,   nil,   nil,   nil,   114,
   115,   116,   nil,   118,   126,   nil,   nil,   nil,   122,   124,
   128,   nil,   nil,   nil,   nil,   nil,   189,   nil,   150,   275,
   276,   373,   nil,   nil,   180,   190,   nil,   192,   158,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   147,   148,   151,   157,
   209,   159,   nil,     4,   217 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 109, :_reduce_1,
  1, 111, :_reduce_2,
  3, 111, :_reduce_3,
  1, 112, :_reduce_4,
  2, 112, :_reduce_5,
  0, 115, :_reduce_6,
  1, 115, :_reduce_7,
  3, 115, :_reduce_8,
  1, 116, :_reduce_9,
  1, 116, :_reduce_10,
  1, 116, :_reduce_11,
  1, 116, :_reduce_none,
  7, 118, :_reduce_13,
  9, 119, :_reduce_14,
  0, 121, :_reduce_15,
  2, 121, :_reduce_16,
  6, 114, :_reduce_17,
  0, 124, :_reduce_18,
  1, 124, :_reduce_19,
  3, 124, :_reduce_20,
  3, 126, :_reduce_21,
  0, 125, :_reduce_22,
  1, 125, :_reduce_23,
  3, 125, :_reduce_24,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  4, 128, :_reduce_28,
  0, 132, :_reduce_29,
  1, 132, :_reduce_30,
  3, 132, :_reduce_31,
  0, 131, :_reduce_32,
  3, 131, :_reduce_33,
  6, 120, :_reduce_34,
  0, 134, :_reduce_35,
  1, 134, :_reduce_36,
  3, 134, :_reduce_37,
  2, 135, :_reduce_38,
  3, 136, :_reduce_39,
  1, 136, :_reduce_40,
  4, 129, :_reduce_41,
  1, 138, :_reduce_none,
  1, 138, :_reduce_43,
  2, 139, :_reduce_44,
  3, 139, :_reduce_45,
  7, 139, :_reduce_46,
  0, 140, :_reduce_47,
  1, 140, :_reduce_48,
  1, 117, :_reduce_49,
  1, 117, :_reduce_50,
  6, 141, :_reduce_51,
  8, 142, :_reduce_52,
  2, 133, :_reduce_53,
  2, 133, :_reduce_54,
  1, 133, :_reduce_55,
  0, 143, :_reduce_56,
  2, 143, :_reduce_57,
  2, 146, :_reduce_58,
  0, 147, :_reduce_59,
  1, 147, :_reduce_60,
  3, 147, :_reduce_61,
  1, 148, :_reduce_62,
  2, 148, :_reduce_63,
  1, 148, :_reduce_64,
  6, 148, :_reduce_65,
  3, 148, :_reduce_66,
  5, 148, :_reduce_67,
  5, 148, :_reduce_68,
  1, 148, :_reduce_69,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_73,
  1, 148, :_reduce_74,
  1, 148, :_reduce_none,
  5, 158, :_reduce_76,
  3, 159, :_reduce_77,
  0, 160, :_reduce_78,
  1, 160, :_reduce_79,
  2, 160, :_reduce_80,
  4, 163, :_reduce_81,
  0, 161, :_reduce_82,
  3, 161, :_reduce_83,
  0, 162, :_reduce_84,
  3, 162, :_reduce_85,
  3, 157, :_reduce_86,
  3, 156, :_reduce_87,
  3, 155, :_reduce_88,
  1, 155, :_reduce_none,
  5, 165, :_reduce_90,
  5, 165, :_reduce_91,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 154, :_reduce_98,
  1, 154, :_reduce_99,
  5, 154, :_reduce_100,
  2, 169, :_reduce_101,
  2, 149, :_reduce_102,
  3, 170, :_reduce_103,
  3, 170, :_reduce_104,
  1, 170, :_reduce_105,
  1, 170, :_reduce_106,
  6, 137, :_reduce_107,
  3, 137, :_reduce_108,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  3, 171, :_reduce_111,
  0, 130, :_reduce_112,
  2, 130, :_reduce_113,
  0, 174, :_reduce_114,
  1, 174, :_reduce_115,
  3, 174, :_reduce_116,
  3, 151, :_reduce_117,
  3, 151, :_reduce_118,
  3, 151, :_reduce_119,
  1, 176, :_reduce_120,
  1, 176, :_reduce_121,
  1, 176, :_reduce_122,
  1, 176, :_reduce_123,
  1, 176, :_reduce_124,
  1, 176, :_reduce_125,
  1, 176, :_reduce_126,
  1, 176, :_reduce_127,
  1, 176, :_reduce_128,
  4, 176, :_reduce_129,
  5, 176, :_reduce_130,
  0, 178, :_reduce_131,
  1, 178, :_reduce_132,
  4, 178, :_reduce_133,
  3, 179, :_reduce_134,
  2, 180, :_reduce_none,
  2, 144, :_reduce_136,
  2, 144, :_reduce_137,
  1, 144, :_reduce_138,
  2, 144, :_reduce_139,
  0, 145, :_reduce_140,
  4, 145, :_reduce_141,
  1, 181, :_reduce_142,
  3, 181, :_reduce_143,
  3, 182, :_reduce_144,
  2, 182, :_reduce_145,
  0, 183, :_reduce_146,
  2, 183, :_reduce_147,
  1, 152, :_reduce_148,
  2, 152, :_reduce_149,
  3, 152, :_reduce_150,
  3, 152, :_reduce_151,
  4, 185, :_reduce_152,
  1, 184, :_reduce_153,
  1, 184, :_reduce_154,
  2, 184, :_reduce_155,
  3, 184, :_reduce_156,
  3, 166, :_reduce_157,
  3, 166, :_reduce_158,
  3, 166, :_reduce_159,
  3, 166, :_reduce_160,
  3, 166, :_reduce_161,
  3, 166, :_reduce_162,
  3, 166, :_reduce_163,
  3, 166, :_reduce_164,
  3, 166, :_reduce_165,
  3, 166, :_reduce_166,
  3, 166, :_reduce_167,
  2, 166, :_reduce_168,
  2, 166, :_reduce_169,
  2, 166, :_reduce_170,
  3, 166, :_reduce_171,
  1, 166, :_reduce_172,
  3, 186, :_reduce_173,
  3, 186, :_reduce_174,
  3, 186, :_reduce_175,
  3, 186, :_reduce_176,
  3, 186, :_reduce_177,
  3, 186, :_reduce_178,
  3, 186, :_reduce_179,
  1, 164, :_reduce_180,
  1, 164, :_reduce_none,
  1, 164, :_reduce_182,
  2, 164, :_reduce_183,
  1, 164, :_reduce_none,
  5, 164, :_reduce_185,
  1, 164, :_reduce_186,
  1, 164, :_reduce_187,
  3, 187, :_reduce_188,
  3, 187, :_reduce_189,
  2, 189, :_reduce_190,
  3, 175, :_reduce_191,
  3, 175, :_reduce_192,
  0, 188, :_reduce_193,
  3, 188, :_reduce_194,
  0, 190, :_reduce_195,
  1, 190, :_reduce_196,
  3, 190, :_reduce_197,
  4, 173, :_reduce_198,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_225,
  0, 150, :_reduce_226,
  1, 150, :_reduce_none,
  0, 110, :_reduce_228,
  1, 110, :_reduce_229,
  1, 113, :_reduce_230,
  2, 113, :_reduce_231,
  1, 191, :_reduce_232,
  1, 191, :_reduce_none,
  0, 177, :_reduce_234,
  1, 177, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  1, 122, :_reduce_238 ]

racc_reduce_n = 239

racc_shift_n = 415

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kDTYPE_UINT => 33,
  :kDTYPE_LINT => 34,
  :kDTYPE_LLINT => 35,
  :kDTYPE_CHAR => 36,
  :kDTYPE_I8 => 37,
  :kDTYPE_I16 => 38,
  :kDTYPE_I32 => 39,
  :kDTYPE_I64 => 40,
  :kDTYPE_UI8 => 41,
  :kDTYPE_UI16 => 42,
  :kDTYPE_UI32 => 43,
  :kDTYPE_UI64 => 44,
  :kDTYPE_INT => 45,
  :kDTYPE_F32 => 46,
  :kDTYPE_F64 => 47,
  :kDTYPE_LF64 => 48,
  :kDTYPE_ROBJ => 49,
  :kDTYPE_ULINT => 50,
  :kDTYPE_ULLINT => 51,
  :kDTYPE_VOID => 52,
  :kDTYPE_SIZE_T => 53,
  :kDTYPE_RB_STR => 54,
  :kDTYPE_UCHAR => 55,
  :kDTYPE_BOOL => 56,
  :tCUSTOM_DTYPE => 57,
  :kDTYPE_RB_ARR => 58,
  :kDTYPE_RB_HSH => 59,
  :tLPAREN => 60,
  :tRPAREN => 61,
  :tLSQUARE => 62,
  :tRSQUARE => 63,
  :tIDENTIFIER => 64,
  :tNL => 65,
  :tCOMMA => 66,
  :tSQUOTE => 67,
  :tSCOLON => 68,
  :EOF => 69,
  :tDOT => 70,
  :tQMARK => 71,
  :tSYMBOL => 72,
  :tLBRACE => 73,
  :tRBRACE => 74,
  :tCOLON => 75,
  :tCOLON2 => 76,
  :tPLUS => 77,
  :tMINUS => 78,
  :tSTAR => 79,
  :tDIVIDE => 80,
  :tEXPO => 81,
  :tMODULUS => 82,
  :tASSIGN => 83,
  :tEQ => 84,
  :tLT => 85,
  :tLTEQ => 86,
  :tGT => 87,
  :tGTEQ => 88,
  :tANDOP => 89,
  :tOROP => 90,
  :tBANG => 91,
  :tOP_ASSIGN => 92,
  :tSTRING => 93,
  :kSIZEOF => 94,
  :tBIT_AND => 95,
  :tBIT_OR => 96,
  :tBIT_XOR => 97,
  :tBIT_LSHIFT => 98,
  :tBIT_RSHIFT => 99,
  :tBIT_NOT => 100,
  :tINTEGER => 101,
  :tFLOAT => 102,
  :tSINGLE_CHAR => 103,
  :ADDRESS_OF => 104,
  :TYPECAST => 105,
  :UMINUS => 106,
  :tNEQ => 107 }

racc_nt_base = 108

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_30(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_31(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_46(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_64(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_65(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_66(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_67(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_68(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_69(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_73(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_74(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_76(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_77(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_78(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_79(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_80(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_81(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_82(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_83(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_84(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_85(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_86(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_87(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_88(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_90(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_91(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_100(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_101(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_102(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_103(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_104(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_105(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_107(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_108(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_111(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_112(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_113(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_114(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_115(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_116(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_117(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_118(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_119(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_120(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_121(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_122(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_131(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_132(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_133(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_134(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_137(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_138(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_140(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_141(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_142(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_143(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_144(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_145(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_146(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_149(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_150(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 577)
  def _reduce_151(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 580)
  def _reduce_152(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_153(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_154(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_155(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_157(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_158(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_159(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_162(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_163(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_168(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_169(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_170(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_172(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_180(val, _values, result)
    
    result
  end
.,.,

# reduce 181 omitted

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_183(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_185(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_186(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_187(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 642)
  def _reduce_188(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_189(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 649)
  def _reduce_190(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 655)
  def _reduce_191(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_192(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_193(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 664)
  def _reduce_194(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 667)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 669)
  def _reduce_197(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 674)
  def _reduce_198(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

module_eval(<<'.,.,', 'parser.racc', 689)
  def _reduce_225(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 693)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 697)
  def _reduce_228(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 698)
  def _reduce_229(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 701)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 702)
  def _reduce_231(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 705)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'parser.racc', 709)
  def _reduce_234(val, _values, result)
    
    result
  end
.,.,

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.racc', 717)
  def _reduce_238(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
