#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 743)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'23,205,26,28,194,181,194,279,29,131,190,49,50,51,19,190,20,18,24,110',
'53,39,309,36,70,38,109,280,30,17,71,72,73,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,189,54,147,42,147',
'213,218,182,139,7,220,52,55,222,131,100,255,63,301,126,127,310,104,302',
'58,222,126,127,126,127,61,142,48,69,64,23,130,26,28,65,45,46,47,29,126',
'127,49,50,51,19,105,20,18,24,106,53,39,377,36,70,38,107,378,30,17,71',
'72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',
'95,96,97,98,62,140,54,351,42,5,131,374,6,364,279,394,52,55,282,112,393',
'220,63,303,129,139,141,140,294,58,222,222,130,222,280,61,222,48,69,64',
'23,138,26,28,65,45,46,47,29,126,127,49,50,51,19,147,20,147,24,5,53,39',
'6,36,70,38,126,127,30,17,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,139,54,140,42,5,370,218,6',
'126,127,220,52,55,417,176,5,138,63,6,5,222,185,6,136,58,222,5,147,222',
'6,61,187,48,69,64,23,126,127,191,65,45,46,47,126,127,131,49,50,51,19',
'139,20,196,24,5,53,39,6,23,70,5,126,127,6,17,71,126,127,211,49,50,51',
'19,256,20,216,24,305,53,39,304,217,70,153,154,155,156,17,71,151,152',
'153,154,155,156,54,224,118,151,152,153,154,155,156,147,52,55,157,158',
'159,160,161,151,152,153,154,155,156,54,5,118,5,6,257,6,155,48,69,52',
'55,5,158,159,6,45,46,47,151,152,153,154,155,156,153,154,155,156,126',
'127,48,69,23,5,5,147,6,6,45,46,47,126,127,49,50,51,19,262,20,270,24',
'5,53,39,6,5,70,278,6,23,421,17,71,5,126,127,6,147,307,281,49,50,51,19',
'285,20,286,24,287,53,39,341,342,70,201,202,203,204,17,71,126,127,54',
'126,118,104,151,152,153,154,155,156,52,55,201,202,203,204,151,152,153',
'154,155,156,157,158,159,160,161,54,294,118,5,48,69,6,157,158,159,52',
'55,45,46,47,126,127,126,127,341,342,299,140,138,26,28,155,155,155,155',
'29,48,69,49,50,51,19,182,20,45,46,47,53,39,185,36,70,38,326,332,30,299',
'71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,62,343,54,346,42,5,348,352,6,217,360,147,52,55,363,147',
'371,373,63,376,379,381,147,383,104,58,389,392,131,399,299,61,222,48',
'69,64,147,381,26,28,65,45,46,47,29,299,131,49,50,51,19,418,20,422,299',
',53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52,55,,,,,63',
',,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51,19,,20',
',,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52,55,,,,,63',
',,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51,19,,20',
',,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52,55,,,,,63',
',,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51,19,,20',
',,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52,55,,,,,63',
',,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51,19,,20',
',,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,5,,,6,,,,52,55,,,',
',63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51,19',
',20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52,55',
',,,,63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50,51',
'19,,20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,,,,,,,,52',
'55,,,,,63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,,49,50',
'51,19,,20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79,80,81',
'82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42,5,,,6',
',,,52,55,,,,,63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47,29,,',
'49,50,51,19,,20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,,42',
'5,,,6,,,,52,55,,,,,63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47',
'29,,,49,50,51,19,,20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,',
'42,,,,,,,,52,55,,,,,63,,,,,,,58,,,,,,61,,48,69,64,,,26,28,65,45,46,47',
'29,,,49,50,51,19,,20,,,,53,39,,36,70,38,,,30,,71,72,73,74,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,62,,54,',
'42,5,,,6,,,,52,55,,,,,63,49,50,51,,,,58,,,53,,,61,70,48,69,64,,,71,',
'65,45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,,,,,52',
'55,,,,,63,,,,,,,58,62,,54,,118,61,,48,69,64,,,52,55,65,45,46,47,63,49',
'50,51,,,,58,,,53,,,61,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,',
'53,,,,70,,,,,,71,,122,,54,,118,151,152,153,154,155,156,,52,55,,,,,63',
',,,,157,158,159,62,,54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50',
'51,,,,58,,,53,,,61,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53',
',,,70,,,,,,71,,62,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,62,,54,,118,61',
',48,69,64,,,52,55,65,45,46,47,63,49,50,51,,,,58,,,53,,,61,70,48,69,64',
',,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,',
',,,52,55,,,,,63,,,,,,,58,173,,54,,118,61,,48,69,64,,,52,55,65,45,46',
'47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51,',
',,,,,53,,,,70,,,,,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,',
'54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48',
'69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118',
',,,,,,,52,55,,,,,63,,,,,,,58,173,,54,,118,61,,48,69,64,,,52,55,65,45',
'46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51',
',,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,58,62',
',54,,118,61,,48,69,64,,,52,55,65,45,46,47,63,49,50,51,,,,58,,,53,,,61',
'70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,',
'54,,118,,,,,,,,52,55,,,,,63,,,,,,,58,62,,54,,118,61,,48,69,64,,,52,55',
'65,45,46,47,63,49,50,51,,,,58,,,53,,,61,70,48,69,64,,,71,,65,45,46,47',
',49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,,,,,52,55,,,,,63,,',
',,,,58,62,,54,,118,61,,48,69,64,,,52,55,65,45,46,47,63,49,50,51,,,,58',
',,53,,,61,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,,,',
',,71,,62,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,58,62,,54,,118,61,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,58,,,53,,,61,70,48,69,64,,,71',
',65,45,46,47,49,50,51,,,,,,,53,,,,70,,,,,,71,,,62,,54,,118,,,,,,,,52',
'55,,,,,63,,,,,,,58,,54,,118,,61,,48,69,64,,52,55,,65,45,46,47,49,50',
'51,,,,,,,53,,,,70,48,69,,,,71,,,45,46,47,,49,50,51,,,,,,,53,,,,70,,',
',,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,,54,,118,,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,173,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,,173,,54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50,51',
',,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,',
',,,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,,54,,118,,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,173,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,,173,,54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50,51',
',,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,',
',,,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,,54,,118,,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,173,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,,173,,54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50,51',
',,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,',
',,,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,,54,,118,,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,173,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,,173,,54,,118,,,48,69,64,,,52,55,65,45,46,47,63,49,50,51',
',,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,,49,50,51,,,,,,,53,,,,70,',
',,,,71,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,173,,54,,118,,,48,69',
'64,,,52,55,65,45,46,47,63,49,50,51,,,,,,,53,,,,70,48,69,64,,,71,,65',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,58,62,,54,,118,61,,48,69,64,,,52,55,65,45,46,47,63,49,50',
'51,,,,58,,,53,,,61,70,48,69,64,,,71,,65,45,46,47,49,50,51,,,,,,,53,',
',,70,,,,,,71,,,62,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,58,,54,,118,,61',
',48,69,64,,52,55,,65,45,46,47,49,50,51,,,,,,,53,,,,70,48,69,,,,71,,',
'45,46,47,,49,50,51,,,,,,,53,,,,70,,,,,,71,,62,,54,,118,,,,,,,,52,55',
',,,,63,,,,,,,58,173,,54,,118,61,,48,69,64,,,52,55,65,45,46,47,63,49',
'50,51,,,,,,,53,,,,70,48,69,64,,,71,,65,45,46,47,49,50,51,,,,,,,53,,',
',70,,,,,,71,,,173,,54,,118,,,,,,,,52,55,,,,,63,,,,,,,,,54,,118,,,,48',
'69,64,,52,55,,65,45,46,47,49,50,51,,,,,,,53,256,,,70,48,69,,,,71,,,45',
'46,47,,151,152,153,154,155,156,,162,164,165,166,167,,,,,,,157,158,159',
'160,161,54,,118,,,,,163,,,52,55,368,,,151,152,153,154,155,156,,,,,19',
',20,,,,48,69,157,158,159,160,161,,45,46,47,72,73,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,19,,20,,,5,,,6',
',,,,,,,,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91',
'92,93,94,95,96,97,98,276,,,,,,264,,,,,,,,,,,72,73,74,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,256,,,,,,,',
',,151,152,153,154,155,156,151,152,153,154,155,156,,,201,202,203,204',
'157,158,159,160,161,,157,158,159,160,161,72,73,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,,,,,,5,,,6,72',
'73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95',
'96,97,98,,-39,,,,,-39,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87',
'88,89,90,91,92,93,94,95,96,97,98,,,,,337,72,73,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,,,,,337,151,152',
'153,154,155,156,,162,164,165,166,167,,,,,,,157,158,159,160,161,,,,,',
',,163,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92',
'93,94,95,96,97,98,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88',
'89,90,91,92,93,94,95,96,97,98,72,73,74,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,72,73,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,72,73,74,75,76',
'77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,72',
'73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95',
'96,97,98,151,152,153,154,155,156,151,152,153,154,155,156,151,152,153',
'154,155,156,157,158,159,160,161,,157,158,159,160,161,,157,158,159,160',
'161,151,152,153,154,155,156,151,152,153,154,155,156,151,152,153,154',
'155,156,157,158,159,160,161,,157,158,159,160,161,,157,158,159,160,161' ]
        racc_action_table = arr = ::Array.new(4465, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,125,2,2,120,105,384,189,2,236,111,2,2,2,2,131,2,2,2,20,2,2,236,2,2',
'2,20,189,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,111,2,120,2,384,131,135,105,44,1,135,2,2,237,40,7,169,2,227,125,125',
'237,16,227,2,135,120,120,384,384,2,44,2,2,2,102,40,102,102,2,2,2,2,102',
'169,169,102,102,102,102,17,102,102,102,18,102,102,334,102,102,102,19',
'334,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,213,102',
'292,102,102,321,331,102,311,213,355,102,102,192,23,355,298,102,228,39',
'118,43,118,292,102,331,311,321,192,213,102,298,102,102,102,103,118,103',
'103,102,102,102,102,103,228,228,103,103,103,103,54,103,55,103,0,103',
'103,0,103,103,103,35,35,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,42,103,42,103,103,325,395,103,115,115,395,103,103,403,69',
'3,42,103,3,8,325,106,8,42,103,395,11,107,403,11,103,108,103,103,103',
'260,179,179,112,103,103,103,103,212,212,116,260,260,260,260,119,260',
'121,260,38,260,260,38,365,260,208,223,223,208,260,260,226,226,129,365',
'365,365,365,258,365,132,365,232,365,365,232,133,365,238,238,238,238',
'365,365,258,258,258,258,258,258,260,138,260,245,245,245,245,245,245',
'145,260,260,258,258,258,258,258,244,244,244,244,244,244,365,263,365',
'365,263,171,365,172,260,260,365,365,271,244,244,271,260,260,260,246',
'246,246,246,246,246,239,239,239,239,229,229,365,365,367,313,351,180',
'313,351,365,365,365,230,230,367,367,367,367,182,367,185,367,352,367',
'367,352,389,367,188,389,415,415,367,367,400,231,231,400,234,234,190',
'415,415,415,415,197,415,199,415,200,415,415,283,283,415,286,286,287',
'287,415,415,297,297,367,207,367,209,124,124,124,124,124,124,367,367',
'124,124,124,124,247,247,247,247,247,247,124,124,124,124,124,415,210',
'415,415,367,367,415,247,247,247,415,415,367,367,367,358,358,359,359',
'419,419,219,220,224,128,128,240,241,242,243,128,415,415,128,128,128',
'128,261,128,415,415,415,128,128,264,128,128,128,270,276,128,282,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,284,128,288,128,128,291',
'294,128,296,306,307,128,128,309,322,327,329,128,333,336,337,338,339',
'347,128,349,353,362,366,370,128,375,128,128,128,377,379,193,193,128',
'128,128,128,193,392,407,193,193,193,193,408,193,416,422,,193,193,,193',
'193,193,,,193,,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,,193,,193',
',,,,,,,193,193,,,,,193,,,,,,,193,,,,,,193,,193,193,193,,,196,196,193',
'193,193,193,196,,,196,196,196,196,,196,,,,196,196,,196,196,196,,,196',
',196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,,196,,196,,,,,,,,196',
'196,,,,,196,,,,,,,196,,,,,,196,,196,196,196,,,205,205,196,196,196,196',
'205,,,205,205,205,205,,205,,,,205,205,,205,205,205,,,205,,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,,205,,205,,,,,,,,205,205,,,,,205',
',,,,,,205,,,,,,205,,205,205,205,,,277,277,205,205,205,205,277,,,277',
'277,277,277,,277,,,,277,277,,277,277,277,,,277,,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,,277,,277,,,,,,,,277,277,,,,,277,,,,,,,277',
',,,,,277,,277,277,277,,,290,290,277,277,277,277,290,,,290,290,290,290',
',290,,,,290,290,,290,290,290,,,290,,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,,290,,290,290,,,290,,,,290,290,,,,,290,,,,,,,290,,,',
',,290,,290,290,290,,,342,342,290,290,290,290,342,,,342,342,342,342,',
'342,,,,342,342,,342,342,342,,,342,,342,342,342,342,342,342,342,342,342',
'342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342',
'342,342,342,,342,,342,,,,,,,,342,342,,,,,342,,,,,,,342,,,,,,342,,342',
'342,342,,,382,382,342,342,342,342,382,,,382,382,382,382,,382,,,,382',
'382,,382,382,382,,,382,,382,382,382,382,382,382,382,382,382,382,382',
'382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382',
'382,,382,,382,,,,,,,,382,382,,,,,382,,,,,,,382,,,,,,382,,382,382,382',
',,390,390,382,382,382,382,390,,,390,390,390,390,,390,,,,390,390,,390',
'390,390,,,390,,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,,390,,390',
'390,,,390,,,,390,390,,,,,390,,,,,,,390,,,,,,390,,390,390,390,,,391,391',
'390,390,390,390,391,,,391,391,391,391,,391,,,,391,391,,391,391,391,',
',391,,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391',
'391,391,391,391,391,391,391,391,391,391,391,391,391,,391,,391,391,,',
'391,,,,391,391,,,,,391,,,,,,,391,,,,,,391,,391,391,391,,,409,409,391',
'391,391,391,409,,,409,409,409,409,,409,,,,409,409,,409,409,409,,,409',
',409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409',
'409,409,409,409,409,409,409,409,409,409,409,409,,409,,409,,,,,,,,409',
'409,,,,,409,,,,,,,409,,,,,,409,,409,409,409,,,410,410,409,409,409,409',
'410,,,410,410,410,410,,410,,,,410,410,,410,410,410,,,410,,410,410,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,410,410,410,,410,,410,410,,,410,,,,410,410,',
',,,410,26,26,26,,,,410,,,26,,,410,26,410,410,410,,,26,,410,410,410,410',
',28,28,28,,,,,,,28,,,,28,,,,,,28,,26,,26,,26,,,,,,,,26,26,,,,,26,,,',
',,,26,28,,28,,28,26,,26,26,26,,,28,28,26,26,26,26,28,29,29,29,,,,28',
',,29,,,28,29,28,28,28,,,29,,28,28,28,28,,30,30,30,,,,,,,30,,,,30,,,',
',,30,,29,,29,,29,248,248,248,248,248,248,,29,29,,,,,29,,,,,248,248,248',
'30,,30,,30,,,29,29,29,,,30,30,29,29,29,29,30,57,57,57,,,,30,,,57,,,30',
'57,30,30,30,,,57,,30,30,30,30,,61,61,61,,,,,,,61,,,,61,,,,,,61,,57,',
'57,,57,,,,,,,,57,57,,,,,57,,,,,,,,61,,61,,61,57,,57,57,57,,,61,61,57',
'57,57,57,61,62,62,62,,,,61,,,62,,,61,62,61,61,61,,,62,,61,61,61,61,',
'63,63,63,,,,,,,63,,,,63,,,,,,63,,62,,62,,62,,,,,,,,62,62,,,,,62,,,,',
',,62,63,,63,,63,62,,62,62,62,,,63,63,62,62,62,62,63,64,64,64,,,,,,,64',
',,,64,63,63,63,,,64,,63,63,63,63,,65,65,65,,,,,,,65,,,,65,,,,,,65,,64',
',64,,64,,,,,,,,64,64,,,,,64,,,,,,,,65,,65,,65,,,64,64,64,,,65,65,64',
'64,64,64,65,104,104,104,,,,,,,104,,,,104,65,65,65,,,104,,65,65,65,65',
',122,122,122,,,,,,,122,,,,122,,,,,,122,,104,,104,,104,,,,,,,,104,104',
',,,,104,,,,,,,104,122,,122,,122,104,,104,104,104,,,122,122,104,104,104',
'104,122,126,126,126,,,,,,,126,,,,126,122,122,122,,,126,,122,122,122',
'122,,127,127,127,,,,,,,127,,,,127,,,,,,127,,126,,126,,126,,,,,,,,126',
'126,,,,,126,,,,,,,126,127,,127,,127,126,,126,126,126,,,127,127,126,126',
'126,126,127,130,130,130,,,,127,,,130,,,127,130,127,127,127,,,130,,127',
'127,127,127,,136,136,136,,,,,,,136,,,,136,,,,,,136,,130,,130,,130,,',
',,,,,130,130,,,,,130,,,,,,,130,136,,136,,136,130,,130,130,130,,,136',
'136,130,130,130,130,136,139,139,139,,,,136,,,139,,,136,139,136,136,136',
',,139,,136,136,136,136,,140,140,140,,,,,,,140,,,,140,,,,,,140,,139,',
'139,,139,,,,,,,,139,139,,,,,139,,,,,,,139,140,,140,,140,139,,139,139',
'139,,,140,140,139,139,139,139,140,141,141,141,,,,140,,,141,,,140,141',
'140,140,140,,,141,,140,140,140,140,,142,142,142,,,,,,,142,,,,142,,,',
',,142,,141,,141,,141,,,,,,,,141,141,,,,,141,,,,,,,141,142,,142,,142',
'141,,141,141,141,,,142,142,141,141,141,141,142,144,144,144,,,,142,,',
'144,,,142,144,142,142,142,,,144,,142,142,142,142,148,148,148,,,,,,,148',
',,,148,,,,,,148,,,144,,144,,144,,,,,,,,144,144,,,,,144,,,,,,,144,,148',
',148,,144,,144,144,144,,148,148,,144,144,144,144,151,151,151,,,,,,,151',
',,,151,148,148,,,,151,,,148,148,148,,152,152,152,,,,,,,152,,,,152,,',
',,,152,,151,,151,,151,,,,,,,,151,151,,,,,151,,,,,,,,152,,152,,152,,',
'151,151,151,,,152,152,151,151,151,151,152,153,153,153,,,,,,,153,,,,153',
'152,152,152,,,153,,152,152,152,152,,154,154,154,,,,,,,154,,,,154,,,',
',,154,,153,,153,,153,,,,,,,,153,153,,,,,153,,,,,,,,154,,154,,154,,,153',
'153,153,,,154,154,153,153,153,153,154,155,155,155,,,,,,,155,,,,155,154',
'154,154,,,155,,154,154,154,154,,156,156,156,,,,,,,156,,,,156,,,,,,156',
',155,,155,,155,,,,,,,,155,155,,,,,155,,,,,,,,156,,156,,156,,,155,155',
'155,,,156,156,155,155,155,155,156,157,157,157,,,,,,,157,,,,157,156,156',
'156,,,157,,156,156,156,156,,158,158,158,,,,,,,158,,,,158,,,,,,158,,157',
',157,,157,,,,,,,,157,157,,,,,157,,,,,,,,158,,158,,158,,,157,157,157',
',,158,158,157,157,157,157,158,159,159,159,,,,,,,159,,,,159,158,158,158',
',,159,,158,158,158,158,,160,160,160,,,,,,,160,,,,160,,,,,,160,,159,',
'159,,159,,,,,,,,159,159,,,,,159,,,,,,,,160,,160,,160,,,159,159,159,',
',160,160,159,159,159,159,160,161,161,161,,,,,,,161,,,,161,160,160,160',
',,161,,160,160,160,160,,162,162,162,,,,,,,162,,,,162,,,,,,162,,161,',
'161,,161,,,,,,,,161,161,,,,,161,,,,,,,,162,,162,,162,,,161,161,161,',
',162,162,161,161,161,161,162,163,163,163,,,,,,,163,,,,163,162,162,162',
',,163,,162,162,162,162,,164,164,164,,,,,,,164,,,,164,,,,,,164,,163,',
'163,,163,,,,,,,,163,163,,,,,163,,,,,,,,164,,164,,164,,,163,163,163,',
',164,164,163,163,163,163,164,165,165,165,,,,,,,165,,,,165,164,164,164',
',,165,,164,164,164,164,,166,166,166,,,,,,,166,,,,166,,,,,,166,,165,',
'165,,165,,,,,,,,165,165,,,,,165,,,,,,,,166,,166,,166,,,165,165,165,',
',166,166,165,165,165,165,166,167,167,167,,,,,,,167,,,,167,166,166,166',
',,167,,166,166,166,166,,173,173,173,,,,,,,173,,,,173,,,,,,173,,167,',
'167,,167,,,,,,,,167,167,,,,,167,,,,,,,,173,,173,,173,,,167,167,167,',
',173,173,167,167,167,167,173,217,217,217,,,,,,,217,,,,217,173,173,173',
',,217,,173,173,173,173,,302,302,302,,,,,,,302,,,,302,,,,,,302,,217,',
'217,,217,,,,,,,,217,217,,,,,217,,,,,,,217,302,,302,,302,217,,217,217',
'217,,,302,302,217,217,217,217,302,304,304,304,,,,302,,,304,,,302,304',
'302,302,302,,,304,,302,302,302,302,308,308,308,,,,,,,308,,,,308,,,,',
',308,,,304,,304,,304,,,,,,,,304,304,,,,,304,,,,,,,304,,308,,308,,304',
',304,304,304,,308,308,,304,304,304,304,341,341,341,,,,,,,341,,,,341',
'308,308,,,,341,,,308,308,308,,344,344,344,,,,,,,344,,,,344,,,,,,344',
',341,,341,,341,,,,,,,,341,341,,,,,341,,,,,,,341,344,,344,,344,341,,341',
'341,341,,,344,344,341,341,341,341,344,345,345,345,,,,,,,345,,,,345,344',
'344,344,,,345,,344,344,344,344,361,361,361,,,,,,,361,,,,361,,,,,,361',
',,345,,345,,345,,,,,,,,345,345,,,,,345,,,,,,,,,361,,361,,,,345,345,345',
',361,361,,345,345,345,345,381,381,381,,,,,,,381,170,,,381,361,361,,',
',381,,,361,361,361,,170,170,170,170,170,170,,170,170,170,170,170,,,',
',,,170,170,170,170,170,381,,381,,,,,170,,,381,381,323,,,249,249,249',
'249,249,249,,,,,323,,323,,,,381,381,249,249,249,249,249,,381,381,381',
'323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323',
'323,323,323,323,323,323,323,323,323,323,183,,183,,,323,,,323,,,,,,,',
',183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,187,,,,,,183,,,,,,,,,,,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,198,,,,,,,,,,250,250,250,250,250,250',
'198,198,198,198,198,198,,,198,198,198,198,250,250,250,250,250,,198,198',
'198,198,198,328,328,328,328,328,328,328,328,328,328,328,328,328,328',
'328,328,328,328,328,328,328,328,328,328,328,328,328,,,,,,328,,,328,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,,299,,,,,299,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,,,,,278,378,378,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378',
',,,,378,59,59,59,59,59,59,,59,59,59,59,59,,,,,,,59,59,59,59,59,,,,,',
',,59,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24',
'24,24,24,24,24,24,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58',
'58,58,58,58,58,58,58,58,58,58,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,393,393,393,393,393,393,393,393,393,393,393,393,393,393',
'393,393,393,393,393,393,393,393,393,393,393,393,393,251,251,251,251',
'251,251,252,252,252,252,252,252,253,253,253,253,253,253,251,251,251',
'251,251,,252,252,252,252,252,,253,253,253,253,253,254,254,254,254,254',
'254,386,386,386,386,386,386,387,387,387,387,387,387,254,254,254,254',
'254,,386,386,386,386,386,,387,387,387,387,387' ]
        racc_action_check = arr = ::Array.new(4465, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   142,    68,    -2,   197,   nil,   nil,   nil,    74,   201,   nil,
   nil,   208,   nil,   nil,   nil,   nil,    76,    45,    20,    56,
   -38,   nil,   nil,   146,  4200,   nil,  1605,   nil,  1631,  1697,
  1723,   nil,   nil,   nil,   nil,   125,   nil,   nil,   236,   156,
     3,   nil,   187,    91,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   138,   140,   nil,  1789,  4227,  4125,
   nil,  1815,  1881,  1907,  1973,  1999,   nil,   nil,   nil,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    92,   186,  2065,   -19,   204,   209,   195,   nil,
   nil,    -5,   215,   nil,   nil,   166,   222,   nil,   113,   237,
    -4,   287,  2091,   nil,   385,   -11,  2157,  2183,   505,   251,
  2249,     0,   256,   245,   nil,     5,  2275,   nil,   279,  2341,
  2367,  2433,  2459,   nil,  2525,   286,   nil,   nil,  2550,   nil,
   nil,  2616,  2642,  2708,  2734,  2800,  2826,  2892,  2918,  2984,
  3010,  3076,  3102,  3168,  3194,  3260,  3286,  3352,   nil,    14,
  3772,   309,   291,  3378,   nil,   nil,  4254,   nil,   nil,   194,
   336,  4281,   349,  3925,   nil,   340,  4308,  3969,   363,   -64,
   364,   nil,   102,   599,   nil,   nil,   693,   379,  3968,   378,
   380,   nil,   nil,   nil,   nil,   787,   nil,   370,   242,   456,
   458,   nil,   201,    91,   nil,   nil,   nil,  3444,   nil,   446,
   445,   nil,   nil,   219,   432,   nil,   224,    16,   108,   305,
   318,   341,   261,   nil,   368,   nil,   -61,    -7,   251,   311,
   430,   431,   432,   433,   282,   268,   307,   397,  1685,  3810,
  3962,  4318,  4324,  4330,  4353,   nil,   nil,   nil,   259,   nil,
   280,   437,   nil,   301,   465,   nil,   nil,   nil,   nil,   nil,
   440,   312,   nil,   nil,   nil,   nil,   470,   881,  4105,   nil,
   nil,   nil,   476,   441,   563,   nil,   365,   365,   565,   nil,
   975,   568,   148,   nil,   508,   nil,   491,   367,   105,  4071,
   nil,   nil,  3470,   nil,  3536,   nil,   501,   511,  3561,   492,
   nil,   100,   nil,   334,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    88,   515,  3881,   nil,   188,   nil,   578,  4035,   516,
   nil,    99,   nil,   581,    55,   nil,   521,   503,   522,   585,
   nil,  3627,  1069,   nil,  3653,  3719,   nil,   584,   nil,   562,
   nil,   335,   352,   531,   nil,   102,   nil,   nil,   411,   413,
   nil,  3744,   523,   nil,   nil,   303,   591,   396,   nil,   nil,
   535,   nil,   nil,   nil,   nil,   518,   nil,   536,  4137,   519,
   nil,  3810,  1163,   nil,    -2,   nil,  4359,  4365,   nil,   356,
  1257,  1351,   550,  4335,   nil,   193,   nil,   nil,   nil,   nil,
   364,   nil,   nil,   196,   nil,   nil,   nil,   541,   613,  1445,
  1539,   nil,   nil,   nil,   nil,   423,   557,   nil,   nil,   498,
   nil,   nil,   559,   nil,   nil ]

racc_action_default = [
  -238,  -249,    -6,  -239,  -240,  -242,  -243,  -249,  -238,    -2,
    -4,  -249,    -7,    -9,   -10,   -11,   -12,  -249,  -249,  -249,
  -249,   -59,   -60,   -66,  -249,   -72,  -236,   -74,  -249,  -249,
  -249,   -79,   -80,   -81,   -82,   -83,   -84,   -85,  -249,  -249,
  -182,  -122,  -203,  -190,  -203,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -244,  -244,  -158,  -249,  -249,  -163,
  -164,  -249,  -249,  -249,  -249,  -249,  -191,  -192,  -194,  -249,
  -196,  -197,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,
  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -231,  -232,  -233,  -234,  -235,  -241,
   425,    -1,  -239,    -5,  -249,   -25,   -28,  -249,  -249,   -52,
   -53,  -249,  -249,  -122,   -73,  -237,  -182,  -190,  -203,  -203,
  -249,  -249,  -249,   -99,  -249,  -249,  -249,  -249,   -69,  -249,
  -249,  -249,  -112,  -115,  -116,  -249,  -249,  -193,  -249,  -205,
  -249,  -249,  -249,  -200,  -124,  -245,  -246,  -248,  -141,  -159,
  -122,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -165,  -249,
  -163,  -164,  -178,  -249,  -179,  -180,  -249,    -3,    -8,   -76,
  -249,  -249,  -249,   -32,   -29,  -249,   -45,  -249,  -150,  -148,
  -249,   -67,  -249,   -69,  -106,  -107,   -69,  -249,  -249,  -249,
  -249,  -102,  -103,  -104,  -105,   -69,  -160,  -161,  -238,   -70,
   -88,   -96,   -97,  -148,  -201,  -202,  -122,  -249,  -122,   -42,
  -119,  -120,  -123,  -127,  -199,  -198,  -206,  -249,  -249,  -128,
  -129,  -125,  -249,  -247,  -244,  -142,  -249,  -249,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -183,
  -184,  -185,  -186,  -187,  -188,  -166,  -181,  -189,  -249,  -122,
   -13,   -25,   -26,  -249,  -249,   -33,   -35,   -36,   -37,  -122,
  -249,  -238,   -46,  -122,   -51,  -122,  -249,   -69,  -249,  -146,
  -147,  -149,   -42,  -108,  -249,   -98,  -249,  -249,  -249,   -68,
  -239,  -249,   -92,   -89,  -249,  -113,  -114,  -121,  -249,  -122,
  -118,  -204,  -249,  -208,  -249,  -139,  -249,  -244,  -249,  -249,
  -162,  -249,   -14,  -238,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,  -249,  -249,  -249,   -30,  -249,   -31,  -249,  -239,   -48,
   -50,   -54,  -122,  -249,  -249,  -152,  -249,  -156,  -249,  -249,
  -109,  -249,   -69,   -77,  -249,  -249,   -78,   -71,   -86,   -94,
   -90,  -249,  -249,  -249,   -40,  -249,  -122,   -65,  -207,  -126,
  -140,  -249,  -144,  -145,  -195,  -239,  -249,   -13,   -27,   -34,
   -42,   -44,   -47,  -122,  -122,   -55,   -61,  -249,  -249,  -156,
  -155,  -249,   -69,   -75,  -249,  -111,  -100,  -101,   -87,  -249,
   -69,   -69,   -42,  -122,   -43,   -63,   -64,  -143,   -15,   -23,
  -249,   -38,   -49,   -57,  -151,  -153,  -154,  -157,  -249,   -69,
   -69,   -93,   -91,  -117,   -41,  -249,  -249,   -58,   -62,  -108,
   -95,   -24,   -42,  -110,   -56 ]

racc_goto_table = [
    40,     3,   133,   193,    99,     2,   235,    43,   113,   102,
    16,   300,   103,   101,   134,   210,   184,    44,   265,   180,
   144,   148,     9,   339,   313,   335,   272,   319,   123,   398,
   320,   293,   188,   354,   143,   380,     1,     8,    13,   128,
   178,    14,   150,   183,    15,   263,   355,   271,   329,   108,
   186,   274,   214,   267,   416,   111,   277,   114,   121,   291,
   292,   192,   349,   195,   388,   344,   345,   132,   353,   232,
   234,   308,   334,   149,   338,   171,   225,   406,   227,   398,
   283,   nil,   nil,   284,   268,   nil,   nil,   nil,   233,   nil,
   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   237,   nil,
    40,    40,   nil,    99,    99,   nil,   nil,    43,    43,   143,
    16,    16,   nil,   350,   nil,   nil,   nil,    44,    44,   124,
   nil,   197,   177,   260,   nil,   405,    40,   414,   nil,    99,
   317,   400,   319,    43,   319,   320,   215,   320,    13,    13,
   221,    14,    14,    44,    15,    15,   236,   nil,   nil,   nil,
   nil,   nil,   170,   172,   174,   175,   nil,   nil,   369,   423,
   259,   318,   401,   nil,   333,   261,   298,   269,   372,   nil,
   273,   275,   nil,   nil,   324,   322,   nil,   296,   nil,   nil,
   nil,   nil,   319,   nil,   413,   320,   nil,   nil,   nil,   295,
   nil,    40,   nil,   267,    40,   nil,   nil,   nil,    43,   nil,
   306,    43,   nil,    40,   nil,   nil,   nil,   311,    44,   290,
    43,    44,   198,   289,   424,   nil,   nil,   325,   nil,   397,
    44,   nil,   nil,   331,   268,   nil,   nil,   nil,   nil,   385,
   nil,   nil,   nil,   nil,   330,   317,   nil,   317,   nil,   nil,
   nil,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   321,   nil,
   nil,   nil,   336,   258,   323,   367,   318,   409,   318,   408,
   nil,   nil,   328,   361,   nil,    40,   327,   411,   412,   nil,
   375,   382,    43,   356,   nil,   317,   nil,   nil,    40,   nil,
   nil,    99,    44,   nil,   nil,    43,   419,   420,   347,   nil,
   nil,   nil,   nil,   221,   395,    44,   362,   269,   nil,   nil,
   nil,   nil,   273,   nil,   365,   nil,   318,   396,   366,   nil,
   404,   nil,   403,   nil,    99,   nil,   nil,   195,   nil,    99,
   nil,   nil,   nil,   nil,   402,   nil,   nil,   nil,   nil,   115,
    40,   120,   nil,   125,   nil,   nil,   nil,    43,   nil,   nil,
   nil,   nil,   390,   391,   nil,   nil,   nil,    44,   nil,   236,
   nil,   nil,   336,   321,   nil,   321,    99,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   169,   nil,   356,   nil,   407,
    40,   nil,   nil,   nil,   nil,   nil,   nil,    43,    40,    40,
   410,    99,    99,   nil,   nil,    43,    43,    44,   nil,   nil,
   221,   415,   nil,   nil,   nil,    44,    44,    40,    40,   nil,
   nil,    99,   nil,   321,    43,    43,    99,   179,   nil,   nil,
   nil,   nil,   nil,   nil,    44,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   386,   387,   nil,   nil,   nil,   206,
   207,   nil,   nil,   212,   nil,   nil,   nil,   nil,   nil,   223,
   nil,   nil,   226,   228,   229,   230,   nil,   231,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   297,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   358,   nil,   359,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   384 ]

racc_goto_check = [
    58,     5,    34,    49,    85,     2,    73,    67,    21,     5,
    12,    28,     5,     2,    65,    43,    24,    69,    25,    19,
    71,    71,     4,    50,    13,    76,    32,    17,    59,    14,
    18,    57,    41,    30,    82,    77,     1,     3,     9,     5,
     8,    10,    21,    22,    11,    23,    29,    31,    33,    35,
    20,    36,    41,    15,    37,    40,    42,    46,    51,    53,
    54,    27,    55,    20,    56,    61,    62,    64,    66,    68,
    72,    74,    75,    78,    28,    80,    81,    77,    84,    14,
    43,   nil,   nil,    43,    16,   nil,   nil,   nil,    20,   nil,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,    27,   nil,
    58,    58,   nil,    85,    85,   nil,   nil,    67,    67,    82,
    12,    12,   nil,    57,   nil,   nil,   nil,    69,    69,    60,
   nil,    59,     4,    20,   nil,    76,    58,    30,   nil,    85,
    15,    13,    17,    67,    17,    18,    67,    18,     9,     9,
    67,    10,    10,    69,    11,    11,    58,   nil,   nil,   nil,
   nil,   nil,    60,    60,    60,    60,   nil,   nil,    25,    50,
    21,    16,    28,   nil,    43,    21,    27,    21,    32,   nil,
    21,    21,   nil,   nil,    24,    19,   nil,    34,   nil,   nil,
   nil,   nil,    17,   nil,    28,    18,   nil,   nil,   nil,    65,
   nil,    58,   nil,    15,    58,   nil,   nil,   nil,    67,   nil,
    71,    67,   nil,    58,   nil,   nil,   nil,    27,    69,     5,
    67,    69,    60,     2,    28,   nil,   nil,    27,   nil,    73,
    69,   nil,   nil,    27,    16,   nil,   nil,   nil,   nil,    43,
   nil,   nil,   nil,   nil,    34,    15,   nil,    15,   nil,   nil,
   nil,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    58,   nil,
   nil,   nil,    21,    60,     5,    20,    16,    49,    16,    43,
   nil,   nil,     5,    71,   nil,    58,     2,    43,    43,   nil,
    27,    20,    67,    21,   nil,    15,   nil,   nil,    58,   nil,
   nil,    85,    69,   nil,   nil,    67,    43,    43,    12,   nil,
   nil,   nil,   nil,    67,    27,    69,    58,    21,   nil,   nil,
   nil,   nil,    21,   nil,     5,   nil,    16,    34,     2,   nil,
    20,   nil,    27,   nil,    85,   nil,   nil,    20,   nil,    85,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,    48,
    58,    48,   nil,    48,   nil,   nil,   nil,    67,   nil,   nil,
   nil,   nil,     5,     5,   nil,   nil,   nil,    69,   nil,    58,
   nil,   nil,    21,    58,   nil,    58,    85,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    48,   nil,    21,   nil,    58,
    58,   nil,   nil,   nil,   nil,   nil,   nil,    67,    58,    58,
     5,    85,    85,   nil,   nil,    67,    67,    69,   nil,   nil,
    67,     5,   nil,   nil,   nil,    69,    69,    58,    58,   nil,
   nil,    85,   nil,    58,    67,    67,    85,    48,   nil,   nil,
   nil,   nil,   nil,   nil,    69,    69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    60,    60,   nil,   nil,   nil,    48,
    48,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,    48,
   nil,   nil,    48,    48,    48,    48,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48 ]

racc_goto_pointer = [
   nil,    36,     5,    35,    20,     1,   nil,   nil,   -63,    36,
    39,    42,     8,  -236,  -336,  -130,   -99,  -233,  -230,   -86,
   -57,   -16,   -63,  -138,   -90,  -165,   nil,   -52,  -208,  -253,
  -266,  -139,  -160,  -225,   -39,    29,  -136,  -349,   nil,   nil,
    32,   -79,  -132,  -113,   nil,   nil,    31,   nil,   313,  -117,
  -260,    29,   nil,  -151,  -150,  -230,  -285,  -179,    -2,    -1,
    90,  -221,  -221,   nil,    26,   -27,  -230,     5,   -75,    15,
   nil,   -34,   -78,  -142,  -165,  -206,  -253,  -302,    16,   nil,
    13,   -62,   -10,   nil,   -61,     1,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,   314,
   315,   316,   209,   nil,   312,    32,    34,    31,    33,   nil,
   146,    41,   nil,   nil,   nil,   nil,   266,   135,   nil,   nil,
   nil,   nil,   nil,   nil,   357,   nil,   nil,   nil,    21,    22,
   nil,   nil,   nil,   nil,   208,    25,   nil,    27,    35,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   116,   nil,
    59,   199,   200,   340,   nil,   nil,   219,   117,   nil,   119,
    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,    57,
    60,    66,   137,    68,   nil,     4,   145 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 109, :_reduce_1,
  1, 111, :_reduce_2,
  3, 111, :_reduce_3,
  1, 112, :_reduce_4,
  2, 112, :_reduce_5,
  0, 115, :_reduce_6,
  1, 115, :_reduce_7,
  3, 115, :_reduce_8,
  1, 116, :_reduce_9,
  1, 116, :_reduce_10,
  1, 116, :_reduce_11,
  1, 116, :_reduce_12,
  0, 121, :_reduce_13,
  1, 121, :_reduce_14,
  3, 121, :_reduce_15,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  7, 118, :_reduce_23,
  9, 119, :_reduce_24,
  0, 127, :_reduce_25,
  2, 127, :_reduce_26,
  6, 114, :_reduce_27,
  0, 130, :_reduce_28,
  1, 130, :_reduce_29,
  3, 130, :_reduce_30,
  3, 132, :_reduce_31,
  0, 131, :_reduce_32,
  1, 131, :_reduce_33,
  3, 131, :_reduce_34,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  4, 134, :_reduce_38,
  0, 137, :_reduce_39,
  1, 137, :_reduce_40,
  3, 137, :_reduce_41,
  0, 136, :_reduce_42,
  3, 136, :_reduce_43,
  6, 123, :_reduce_44,
  0, 139, :_reduce_45,
  1, 139, :_reduce_46,
  3, 139, :_reduce_47,
  2, 140, :_reduce_48,
  3, 141, :_reduce_49,
  1, 141, :_reduce_50,
  4, 124, :_reduce_51,
  1, 143, :_reduce_none,
  1, 143, :_reduce_53,
  2, 144, :_reduce_54,
  3, 144, :_reduce_55,
  7, 144, :_reduce_56,
  0, 145, :_reduce_57,
  1, 145, :_reduce_58,
  1, 117, :_reduce_59,
  1, 117, :_reduce_60,
  6, 146, :_reduce_61,
  8, 147, :_reduce_62,
  2, 138, :_reduce_63,
  2, 138, :_reduce_64,
  1, 138, :_reduce_65,
  0, 148, :_reduce_66,
  2, 148, :_reduce_67,
  2, 151, :_reduce_68,
  0, 152, :_reduce_69,
  1, 152, :_reduce_70,
  3, 152, :_reduce_71,
  1, 120, :_reduce_72,
  2, 120, :_reduce_73,
  1, 120, :_reduce_74,
  6, 120, :_reduce_75,
  3, 120, :_reduce_76,
  5, 120, :_reduce_77,
  5, 120, :_reduce_78,
  1, 120, :_reduce_79,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_83,
  1, 120, :_reduce_84,
  1, 120, :_reduce_none,
  5, 160, :_reduce_86,
  3, 161, :_reduce_87,
  0, 162, :_reduce_88,
  1, 162, :_reduce_89,
  2, 162, :_reduce_90,
  4, 165, :_reduce_91,
  0, 163, :_reduce_92,
  3, 163, :_reduce_93,
  0, 164, :_reduce_94,
  3, 164, :_reduce_95,
  3, 126, :_reduce_96,
  3, 125, :_reduce_97,
  3, 159, :_reduce_98,
  1, 159, :_reduce_none,
  5, 167, :_reduce_100,
  5, 167, :_reduce_101,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  0, 158, :_reduce_108,
  1, 158, :_reduce_109,
  5, 158, :_reduce_110,
  2, 171, :_reduce_111,
  2, 153, :_reduce_112,
  3, 172, :_reduce_113,
  3, 172, :_reduce_114,
  1, 172, :_reduce_115,
  1, 172, :_reduce_116,
  6, 142, :_reduce_117,
  3, 142, :_reduce_118,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  3, 173, :_reduce_121,
  0, 135, :_reduce_122,
  2, 135, :_reduce_123,
  0, 176, :_reduce_124,
  1, 176, :_reduce_125,
  3, 176, :_reduce_126,
  3, 155, :_reduce_127,
  3, 155, :_reduce_128,
  3, 155, :_reduce_129,
  1, 178, :_reduce_130,
  1, 178, :_reduce_131,
  1, 178, :_reduce_132,
  1, 178, :_reduce_133,
  1, 178, :_reduce_134,
  1, 178, :_reduce_135,
  1, 178, :_reduce_136,
  1, 178, :_reduce_137,
  1, 178, :_reduce_138,
  4, 178, :_reduce_139,
  5, 178, :_reduce_140,
  0, 180, :_reduce_141,
  1, 180, :_reduce_142,
  4, 180, :_reduce_143,
  3, 181, :_reduce_144,
  2, 182, :_reduce_none,
  2, 149, :_reduce_146,
  2, 149, :_reduce_147,
  1, 149, :_reduce_148,
  2, 149, :_reduce_149,
  0, 150, :_reduce_150,
  4, 150, :_reduce_151,
  1, 183, :_reduce_152,
  3, 183, :_reduce_153,
  3, 184, :_reduce_154,
  2, 184, :_reduce_155,
  0, 185, :_reduce_156,
  2, 185, :_reduce_157,
  1, 156, :_reduce_158,
  2, 156, :_reduce_159,
  3, 156, :_reduce_160,
  3, 156, :_reduce_161,
  4, 187, :_reduce_162,
  1, 186, :_reduce_163,
  1, 186, :_reduce_164,
  2, 186, :_reduce_165,
  3, 186, :_reduce_166,
  3, 168, :_reduce_167,
  3, 168, :_reduce_168,
  3, 168, :_reduce_169,
  3, 168, :_reduce_170,
  3, 168, :_reduce_171,
  3, 168, :_reduce_172,
  3, 168, :_reduce_173,
  3, 168, :_reduce_174,
  3, 168, :_reduce_175,
  3, 168, :_reduce_176,
  3, 168, :_reduce_177,
  2, 168, :_reduce_178,
  2, 168, :_reduce_179,
  2, 168, :_reduce_180,
  3, 168, :_reduce_181,
  1, 168, :_reduce_182,
  3, 188, :_reduce_183,
  3, 188, :_reduce_184,
  3, 188, :_reduce_185,
  3, 188, :_reduce_186,
  3, 188, :_reduce_187,
  3, 188, :_reduce_188,
  3, 188, :_reduce_189,
  1, 166, :_reduce_190,
  1, 166, :_reduce_none,
  1, 166, :_reduce_192,
  2, 166, :_reduce_193,
  1, 166, :_reduce_none,
  5, 166, :_reduce_195,
  1, 166, :_reduce_196,
  1, 166, :_reduce_197,
  3, 189, :_reduce_198,
  3, 189, :_reduce_199,
  2, 191, :_reduce_200,
  3, 177, :_reduce_201,
  3, 177, :_reduce_202,
  0, 190, :_reduce_203,
  3, 190, :_reduce_204,
  0, 192, :_reduce_205,
  1, 192, :_reduce_206,
  3, 192, :_reduce_207,
  4, 175, :_reduce_208,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_235,
  0, 154, :_reduce_236,
  1, 154, :_reduce_none,
  0, 110, :_reduce_238,
  1, 110, :_reduce_239,
  1, 113, :_reduce_240,
  2, 113, :_reduce_241,
  1, 193, :_reduce_242,
  1, 193, :_reduce_none,
  0, 179, :_reduce_244,
  1, 179, :_reduce_none,
  1, 194, :_reduce_none,
  2, 194, :_reduce_none,
  1, 128, :_reduce_248 ]

racc_reduce_n = 249

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kDTYPE_UINT => 33,
  :kDTYPE_LINT => 34,
  :kDTYPE_LLINT => 35,
  :kDTYPE_CHAR => 36,
  :kDTYPE_I8 => 37,
  :kDTYPE_I16 => 38,
  :kDTYPE_I32 => 39,
  :kDTYPE_I64 => 40,
  :kDTYPE_UI8 => 41,
  :kDTYPE_UI16 => 42,
  :kDTYPE_UI32 => 43,
  :kDTYPE_UI64 => 44,
  :kDTYPE_INT => 45,
  :kDTYPE_F32 => 46,
  :kDTYPE_F64 => 47,
  :kDTYPE_LF64 => 48,
  :kDTYPE_ROBJ => 49,
  :kDTYPE_ULINT => 50,
  :kDTYPE_ULLINT => 51,
  :kDTYPE_VOID => 52,
  :kDTYPE_SIZE_T => 53,
  :kDTYPE_RB_STR => 54,
  :kDTYPE_UCHAR => 55,
  :kDTYPE_BOOL => 56,
  :tCUSTOM_DTYPE => 57,
  :kDTYPE_RB_ARR => 58,
  :kDTYPE_RB_HSH => 59,
  :tLPAREN => 60,
  :tRPAREN => 61,
  :tLSQUARE => 62,
  :tRSQUARE => 63,
  :tIDENTIFIER => 64,
  :tNL => 65,
  :tCOMMA => 66,
  :tSQUOTE => 67,
  :tSCOLON => 68,
  :EOF => 69,
  :tDOT => 70,
  :tQMARK => 71,
  :tSYMBOL => 72,
  :tLBRACE => 73,
  :tRBRACE => 74,
  :tCOLON => 75,
  :tCOLON2 => 76,
  :tPLUS => 77,
  :tMINUS => 78,
  :tSTAR => 79,
  :tDIVIDE => 80,
  :tEXPO => 81,
  :tMODULUS => 82,
  :tASSIGN => 83,
  :tEQ => 84,
  :tLT => 85,
  :tLTEQ => 86,
  :tGT => 87,
  :tGTEQ => 88,
  :tANDOP => 89,
  :tOROP => 90,
  :tBANG => 91,
  :tOP_ASSIGN => 92,
  :tSTRING => 93,
  :kSIZEOF => 94,
  :tBIT_AND => 95,
  :tBIT_OR => 96,
  :tBIT_XOR => 97,
  :tBIT_LSHIFT => 98,
  :tBIT_RSHIFT => 99,
  :tBIT_NOT => 100,
  :tINTEGER => 101,
  :tFLOAT => 102,
  :tSINGLE_CHAR => 103,
  :ADDRESS_OF => 104,
  :TYPECAST => 105,
  :UMINUS => 106,
  :tNEQ => 107 }

racc_nt_base = 108

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "stmt",
  "klass_stmts",
  "klass_stmt",
  "struct_or_union_def",
  "alias_stmt",
  "op_assign",
  "forward_declaration",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_15(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_23(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_24(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_25(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_27(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_28(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_29(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_31(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_33(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_38(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_40(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_41(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_42(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_43(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_46(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_47(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_48(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_49(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_50(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_51(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_54(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_55(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_56(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_57(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_61(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_62(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_63(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_64(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_65(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_66(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_67(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_70(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_71(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_72(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_73(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_74(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_75(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_76(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_77(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_78(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_79(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_83(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_84(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_86(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_87(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_88(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_90(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_91(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_93(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_94(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_95(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_96(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_97(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_98(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_100(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_101(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_108(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_109(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_110(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_111(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_112(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_113(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_114(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_117(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_118(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_121(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_122(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_123(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_125(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_126(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_127(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_128(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_129(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_134(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_135(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_136(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_137(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_138(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_139(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_140(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_141(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_142(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_143(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_144(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_146(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_147(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_149(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_150(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_151(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_152(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_153(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_154(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_155(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_156(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 580)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_158(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_159(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_162(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_165(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_166(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_170(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_171(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_172(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_178(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_179(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_180(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_181(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_183(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_184(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_185(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_186(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_187(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_188(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_189(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 629)
  def _reduce_190(val, _values, result)
    
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_193(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_195(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_196(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 650)
  def _reduce_197(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 655)
  def _reduce_198(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 656)
  def _reduce_199(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 662)
  def _reduce_200(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_201(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 672)
  def _reduce_202(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 676)
  def _reduce_203(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_204(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 680)
  def _reduce_205(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 681)
  def _reduce_206(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 682)
  def _reduce_207(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_208(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.racc', 702)
  def _reduce_235(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 706)
  def _reduce_236(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.racc', 710)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_239(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 714)
  def _reduce_240(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_241(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 718)
  def _reduce_242(val, _values, result)
    
    result
  end
.,.,

# reduce 243 omitted

module_eval(<<'.,.,', 'parser.racc', 722)
  def _reduce_244(val, _values, result)
    
    result
  end
.,.,

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'parser.racc', 730)
  def _reduce_248(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
