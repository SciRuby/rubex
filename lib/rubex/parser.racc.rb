#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 744)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'22,308,74,65,192,400,297,74,7,185,97,114,115,116,19,297,87,25,23,193',
'118,108,94,22,127,98,371,229,94,17,128,184,22,29,114,115,116,19,335',
'87,22,23,95,118,108,30,19,127,95,18,23,73,17,128,19,356,271,192,23,193',
'119,17,124,71,66,386,221,222,98,17,117,120,71,191,5,31,375,6,221,222',
'227,221,222,119,98,124,5,221,222,6,22,113,126,117,120,5,221,222,6,110',
'111,112,384,5,19,33,6,18,23,185,192,69,193,71,113,126,22,75,199,17,98',
'71,110,111,112,185,191,114,115,116,19,184,87,98,23,206,118,108,353,5',
'127,136,6,22,385,17,128,204,135,204,98,206,79,206,114,115,116,19,88',
'87,415,23,93,118,108,257,98,127,98,344,258,96,17,128,343,98,119,66,124',
'69,232,233,234,235,236,237,117,120,304,305,306,307,232,233,234,235,236',
'237,238,239,240,241,242,119,137,124,5,113,126,6,179,239,240,117,120',
'110,111,112,354,5,183,5,6,355,6,71,5,147,149,6,221,222,71,150,113,126',
'114,115,116,19,194,87,110,111,112,118,108,192,157,127,159,5,71,151,6',
'128,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,60,61,171,200,119,201,162,232,233,234,235,236,237,5,117,120',
'6,221,222,203,172,232,233,234,235,236,237,167,5,5,208,6,6,170,211,113',
'126,173,221,222,147,149,174,110,111,112,150,221,222,114,115,116,19,349',
'87,228,348,5,118,108,6,157,127,159,5,259,151,6,128,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,171,261',
'119,5,162,5,6,5,6,71,6,268,117,120,234,235,236,237,172,234,235,236,237',
'71,351,167,221,222,221,222,269,170,71,113,126,173,221,222,147,149,174',
'110,111,112,150,221,222,114,115,116,19,280,87,221,222,179,118,108,179',
'157,127,159,391,392,151,193,128,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,171,185,119,299,162,5,304',
'305,6,306,307,312,117,120,221,222,221,222,172,221,222,391,392,313,337',
'167,236,71,261,191,360,170,211,113,126,173,364,365,147,149,174,110,111',
'112,150,366,221,114,115,116,19,371,87,236,236,236,118,108,236,157,127',
'159,185,377,151,379,128,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,60,61,171,71,119,382,162,388,393,396,397',
'401,313,185,117,120,98,179,405,411,172,420,179,,,,,167,,,,,,170,,113',
'126,173,,,147,149,174,110,111,112,150,,,114,115,116,19,,87,,,,118,108',
',157,127,159,,,151,,128,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,60,61,171,,119,,162,,,,,,,,117,120,,,',
',172,,,,,,,167,,,,,,170,,113,126,173,,,147,149,174,110,111,112,150,',
',114,115,116,19,,87,,,,118,108,,157,127,159,,,151,,128,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,171',
',119,,162,,,,,,,,117,120,,,,,172,,,,,,,167,,,,,,170,,113,126,173,,,147',
'149,174,110,111,112,150,,,114,115,116,19,,87,,,,118,108,,157,127,159',
',,151,,128,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,60,61,171,,119,,162,,,,,,,,117,120,,,,,172,,,,,,,167',
',,,,,170,,113,126,173,,,147,149,174,110,111,112,150,,,114,115,116,19',
',87,,,,118,108,,157,127,159,,,151,,128,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,171,,119,,162,,,',
',,,,117,120,,,,,172,,,,,,,167,,,,,,170,,113,126,173,,,147,149,174,110',
'111,112,150,,,114,115,116,19,,87,,,,118,108,,157,127,159,,,151,,128',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,60,61,171,,119,,162,5,,,6,,,,117,120,,,,,172,,,,,,,167,,,,,,170',
',113,126,173,,,147,149,174,110,111,112,150,,,114,115,116,19,,87,,,,118',
'108,,157,127,159,,,151,,128,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,60,61,171,,119,,162,5,,,6,,,,117,120',
',,,,172,,,,,,,167,,,,,,170,,113,126,173,,,147,149,174,110,111,112,150',
',,114,115,116,19,,87,,,,118,108,,157,127,159,,,151,,128,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61',
'171,,119,,162,,,,,,,,117,120,,,,,172,,,,,,,167,,,,,,170,,113,126,173',
',,147,149,174,110,111,112,150,,,114,115,116,19,,87,,,,118,108,,157,127',
'159,,,151,,128,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,60,61,171,,119,,162,5,,,6,,,,117,120,,,,,172,114',
'115,116,,,,167,,,118,,,170,127,113,126,173,,,128,,174,110,111,112,,114',
'115,116,,,,,,,118,,,,127,,,,,,128,,171,,119,,124,,,,,,,,117,120,,,,',
'172,,,,,,,167,171,,119,,124,170,,113,126,173,,,117,120,174,110,111,112',
'172,114,115,116,,,,167,,,118,,,170,127,113,126,173,,,128,,174,110,111',
'112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,217,,119,,124,232,233,234',
'235,236,237,,117,120,,,,,172,,,,,238,239,240,171,,119,,124,,,113,126',
'173,,,117,120,174,110,111,112,172,114,115,116,,,,167,,,118,,,170,127',
'113,126,173,,,128,,174,110,111,112,,114,115,116,,,,,,,118,,,,127,,,',
',,128,,171,,119,,124,232,233,234,235,236,237,,117,120,,,,,172,,,,,238',
'239,240,171,,119,,124,170,,113,126,173,,,117,120,174,110,111,112,172',
'114,115,116,,,,167,,,118,,,170,127,113,126,173,,,128,,174,110,111,112',
',114,115,116,,,,,,,118,,,,127,,,,,,128,,171,,119,,124,,,,,,,,117,120',
',,,,172,,,,,,,167,254,,119,,124,170,,113,126,173,,,117,120,174,110,111',
'112,172,114,115,116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111',
'112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117',
'120,,,,,172,,,,,,,,254,,119,,124,,,113,126,173,,,117,120,174,110,111',
'112,172,114,115,116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111',
'112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,171,,119,,124,,,,,,,,117',
'120,,,,,172,,,,,,,167,171,,119,,124,170,,113,126,173,,,117,120,174,110',
'111,112,172,114,115,116,,,,167,,,118,,,170,127,113,126,173,,,128,,174',
'110,111,112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,,,119,,124,114,115',
'116,,,,,117,120,118,,,,127,,,,,,128,,171,,119,,124,,,113,126,,,,117',
'120,,110,111,112,172,,,,,,,167,171,,119,,124,170,,113,126,173,,,117',
'120,174,110,111,112,172,114,115,116,,,,167,,,118,,,170,127,113,126,173',
',,128,,174,110,111,112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,171,',
'119,,124,,,,,,,,117,120,,,,,172,,,,,,,167,254,,119,,124,170,,113,126',
'173,,,117,120,174,110,111,112,172,114,115,116,,,,,,,118,,,,127,113,126',
'173,,,128,,174,110,111,112,,114,115,116,,,,,,,118,,,,127,,,,,,128,,171',
',119,,124,,,,,,,,117,120,,,,,172,,,,,,,167,171,,119,,124,170,,113,126',
'173,,,117,120,174,110,111,112,172,114,115,116,,,,167,,,118,,,170,127',
'113,126,173,,,128,,174,110,111,112,,114,115,116,,,,,,,118,,,,127,,,',
',,128,,171,,119,,124,,,,,,,,117,120,,,,,172,,,,,,,167,171,,119,,124',
'170,,113,126,173,,,117,120,174,110,111,112,172,114,115,116,,,,167,,',
'118,,,170,127,113,126,173,,,128,,174,110,111,112,,114,115,116,,,,,,',
'118,,,,127,,,,,,128,,171,,119,,124,,,,,,,,117,120,,,,,172,,,,,,,167',
'254,,119,,124,170,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,254,,119,,124,,,,,,,,117,120,,,,,172,,,,',
',,,254,,119,,124,,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,,128,,174,110,111,112,114,115,116',
',,,,,,118,,,,127,,,,,,128,,,254,,119,,124,,,,,,,,117,120,,,,,172,,,',
',,,,,119,,124,,,,113,126,173,,117,120,,174,110,111,112,114,115,116,',
',,,,,118,,,,127,113,126,,,,128,,,110,111,112,,114,115,116,,,,,,,118',
',,,127,,,,,,128,,171,,119,,124,,,,,,,,117,120,,,,,172,,,,,,,167,171',
',119,,124,170,,113,126,173,,,117,120,174,110,111,112,172,114,115,116',
',,,167,,,118,,,170,127,113,126,173,,,128,,174,110,111,112,,114,115,116',
',,,,,,118,,,,127,,,,,,128,,,,119,,124,114,115,116,,,,,117,120,118,,',
',127,,,,,,128,,171,,119,,124,,,113,126,,,,117,120,,110,111,112,172,',
',,,,,167,,,119,,124,170,,113,126,173,,,117,120,174,110,111,112,114,115',
'116,,,,,,,118,,,,127,,113,126,,,128,,,,110,111,112,114,115,116,,,,,',
',118,,,,127,,,,,,128,,171,,119,,124,,,,,,,,117,120,,,,,172,,,,,,,167',
'254,,119,,124,170,,113,126,173,,,117,120,174,110,111,112,172,114,115',
'116,,,,,,,118,,,,127,113,126,173,,336,128,,174,110,111,112,,,,,,,,,',
'232,233,234,235,236,237,,243,245,246,247,248,,254,,119,,124,238,239',
'240,241,242,,,117,120,197,,,244,172,,,,,,,,,19,,87,,,,113,126,173,,',
',,174,110,111,112,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,19,,87,,,5,,,6,,,,,,,,,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,290',
',,,,,81,,,,,,,,,,,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,336,,,,,,,,,,,,336,,,,232,233,234,235',
'236,237,,,304,305,306,307,232,233,234,235,236,237,238,239,240,241,242',
',,,,,,,238,239,240,241,242,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,,5,,,6,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,-39',
',,,,-39,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,,,,,178,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,178,232,233,234,235,236',
'237,,243,245,246,247,248,,,,,,,238,239,240,241,242,,,,,,,,244,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,232',
'233,234,235,236,237,232,233,234,235,236,237,232,233,234,235,236,237',
'238,239,240,241,242,,238,239,240,241,242,,238,239,240,241,242,232,233',
'234,235,236,237,232,233,234,235,236,237,232,233,234,235,236,237,238',
'239,240,241,242,,238,239,240,241,242,,238,239,240,241,242,232,233,234',
'235,236,237,232,233,234,235,236,237,,,,,,,238,239,240,241,242,,238,239',
'240,241,242' ]
        racc_action_table = arr = ::Array.new(4185, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'77,220,32,29,164,369,215,185,1,109,76,77,77,77,77,406,77,7,77,271,77',
'77,73,181,77,76,369,164,271,77,77,109,27,17,181,181,181,181,250,181',
'28,181,73,181,181,18,27,181,271,27,27,32,181,181,28,284,185,162,28,162',
'77,27,77,215,29,359,250,250,317,28,77,77,406,162,0,19,317,0,220,220',
'162,284,284,181,359,181,181,215,215,181,2,77,77,181,181,27,406,406,27',
'77,77,77,357,28,2,22,28,2,2,160,124,30,124,31,181,181,196,33,133,2,357',
'64,181,181,181,279,124,196,196,196,196,160,196,133,196,292,196,196,279',
'3,196,87,3,358,358,196,196,142,87,345,292,142,66,345,358,358,358,358',
'69,358,403,358,72,358,358,175,142,358,345,263,175,74,358,358,263,403',
'196,78,196,81,219,219,219,219,219,219,196,196,219,219,219,219,324,324',
'324,324,324,324,219,219,219,219,219,358,88,358,358,196,196,358,97,324',
'324,358,358,196,196,196,283,8,108,11,8,283,11,119,80,92,92,80,156,156',
'120,92,358,358,92,92,92,92,126,92,358,358,358,92,92,129,92,92,92,89',
'130,92,89,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,134,92,138,92,325,325,325,325,325,325,100',
'92,92,100,213,213,140,92,326,326,326,326,326,326,92,144,159,143,144',
'159,92,145,92,92,92,270,270,210,210,92,92,92,92,210,274,274,210,210',
'210,210,275,210,163,275,286,210,210,286,210,210,210,400,177,210,400',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,178,210,401,210,210',
'401,411,210,180,411,182,210,210,318,318,318,318,210,319,319,319,319',
'277,277,210,282,282,295,295,183,210,187,210,210,210,314,314,223,223',
'210,210,210,210,223,315,315,223,223,223,223,191,223,316,316,199,223',
'223,205,223,223,223,362,362,223,206,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,214,223,216,223,223,365,365,223,366,366,224,223,223',
'374,374,378,378,223,383,383,421,421,225,252,223,253,257,259,280,290',
'223,294,223,223,223,300,302,266,266,223,223,223,223,266,303,310,266',
'266,266,266,311,266,320,321,322,266,266,323,266,266,266,342,347,266',
'350,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,351,266,353,266',
'361,363,367,368,371,373,381,266,266,387,388,389,398,266,414,420,,,,',
'266,,,,,,266,,266,266,266,,,296,296,266,266,266,266,296,,,296,296,296',
'296,,296,,,,296,296,,296,296,296,,,296,,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,,296,,296,,,,,,,,296,296,,,,,296,,,,,,,296,,,,,',
'296,,296,296,296,,,299,299,296,296,296,296,299,,,299,299,299,299,,299',
',,,299,299,,299,299,299,,,299,,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,,299,,299,,,,,,,,299,299,,,,,299,,,,,,,299,,,,,,299,,299,299',
'299,,,308,308,299,299,299,299,308,,,308,308,308,308,,308,,,,308,308',
',308,308,308,,,308,,308,308,308,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
',308,,308,,,,,,,,308,308,,,,,308,,,,,,,308,,,,,,308,,308,308,308,,,392',
'392,308,308,308,308,392,,,392,392,392,392,,392,,,,392,392,,392,392,392',
',,392,,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392',
'392,392,392,392,392,392,392,392,392,392,392,392,392,,392,,392,,,,,,',
',392,392,,,,,392,,,,,,,392,,,,,,392,,392,392,392,,,412,412,392,392,392',
'392,412,,,412,412,412,412,,412,,,,412,412,,412,412,412,,,412,,412,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,,412,,412,412,,,412,,,,412,412',
',,,,412,,,,,,,412,,,,,,412,,412,412,412,,,413,413,412,412,412,412,413',
',,413,413,413,413,,413,,,,413,413,,413,413,413,,,413,,413,413,413,413',
'413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413',
'413,413,413,413,413,413,413,413,,413,,413,413,,,413,,,,413,413,,,,,413',
',,,,,,413,,,,,,413,,413,413,413,,,416,416,413,413,413,413,416,,,416',
'416,416,416,,416,,,,416,416,,416,416,416,,,416,,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,416,,416,,416,,,,,,,,416,416,,,,,416,,,,,,,416',
',,,,,416,,416,416,416,,,417,417,416,416,416,416,417,,,417,417,417,417',
',417,,,,417,417,,417,417,417,,,417,,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,,417,,417,417,,,417,,,,417,417,,,,,417,147,147,147,',
',,417,,,147,,,417,147,417,417,417,,,147,,417,417,417,417,,149,149,149',
',,,,,,149,,,,149,,,,,,149,,147,,147,,147,,,,,,,,147,147,,,,,147,,,,',
',,147,149,,149,,149,147,,147,147,147,,,149,149,147,147,147,147,149,150',
'150,150,,,,149,,,150,,,149,150,149,149,149,,,150,,149,149,149,149,,151',
'151,151,,,,,,,151,,,,151,,,,,,151,,150,,150,,150,327,327,327,327,327',
'327,,150,150,,,,,150,,,,,327,327,327,151,,151,,151,,,150,150,150,,,151',
'151,150,150,150,150,151,166,166,166,,,,151,,,166,,,151,166,151,151,151',
',,166,,151,151,151,151,,170,170,170,,,,,,,170,,,,170,,,,,,170,,166,',
'166,,166,328,328,328,328,328,328,,166,166,,,,,166,,,,,328,328,328,170',
',170,,170,166,,166,166,166,,,170,170,166,166,166,166,170,171,171,171',
',,,170,,,171,,,170,171,170,170,170,,,171,,170,170,170,170,,172,172,172',
',,,,,,172,,,,172,,,,,,172,,171,,171,,171,,,,,,,,171,171,,,,,171,,,,',
',,171,172,,172,,172,171,,171,171,171,,,172,172,171,171,171,171,172,173',
'173,173,,,,,,,173,,,,173,172,172,172,,,173,,172,172,172,172,,174,174',
'174,,,,,,,174,,,,174,,,,,,174,,173,,173,,173,,,,,,,,173,173,,,,,173',
',,,,,,,174,,174,,174,,,173,173,173,,,174,174,173,173,173,173,174,184',
'184,184,,,,,,,184,,,,184,174,174,174,,,184,,174,174,174,174,,186,186',
'186,,,,,,,186,,,,186,,,,,,186,,184,,184,,184,,,,,,,,184,184,,,,,184',
',,,,,,184,186,,186,,186,184,,184,184,184,,,186,186,184,184,184,184,186',
'189,189,189,,,,186,,,189,,,186,189,186,186,186,,,189,,186,186,186,186',
',192,192,192,,,,,,,192,,,,192,,,,,,192,,,,189,,189,193,193,193,,,,,189',
'189,193,,,,193,,,,,,193,,192,,192,,192,,,189,189,,,,192,192,,189,189',
'189,192,,,,,,,192,193,,193,,193,192,,192,192,192,,,193,193,192,192,192',
'192,193,211,211,211,,,,193,,,211,,,193,211,193,193,193,,,211,,193,193',
'193,193,,217,217,217,,,,,,,217,,,,217,,,,,,217,,211,,211,,211,,,,,,',
',211,211,,,,,211,,,,,,,211,217,,217,,217,211,,211,211,211,,,217,217',
'211,211,211,211,217,221,221,221,,,,,,,221,,,,221,217,217,217,,,221,',
'217,217,217,217,,222,222,222,,,,,,,222,,,,222,,,,,,222,,221,,221,,221',
',,,,,,,221,221,,,,,221,,,,,,,221,222,,222,,222,221,,221,221,221,,,222',
'222,221,221,221,221,222,227,227,227,,,,222,,,227,,,222,227,222,222,222',
',,227,,222,222,222,222,,228,228,228,,,,,,,228,,,,228,,,,,,228,,227,',
'227,,227,,,,,,,,227,227,,,,,227,,,,,,,227,228,,228,,228,227,,227,227',
'227,,,228,228,227,227,227,227,228,229,229,229,,,,228,,,229,,,228,229',
'228,228,228,,,229,,228,228,228,228,,232,232,232,,,,,,,232,,,,232,,,',
',,232,,229,,229,,229,,,,,,,,229,229,,,,,229,,,,,,,229,232,,232,,232',
'229,,229,229,229,,,232,232,229,229,229,229,232,233,233,233,,,,,,,233',
',,,233,232,232,232,,,233,,232,232,232,232,,234,234,234,,,,,,,234,,,',
'234,,,,,,234,,233,,233,,233,,,,,,,,233,233,,,,,233,,,,,,,,234,,234,',
'234,,,233,233,233,,,234,234,233,233,233,233,234,235,235,235,,,,,,,235',
',,,235,234,234,234,,,235,,234,234,234,234,,236,236,236,,,,,,,236,,,',
'236,,,,,,236,,235,,235,,235,,,,,,,,235,235,,,,,235,,,,,,,,236,,236,',
'236,,,235,235,235,,,236,236,235,235,235,235,236,237,237,237,,,,,,,237',
',,,237,236,236,236,,,237,,236,236,236,236,,238,238,238,,,,,,,238,,,',
'238,,,,,,238,,237,,237,,237,,,,,,,,237,237,,,,,237,,,,,,,,238,,238,',
'238,,,237,237,237,,,238,238,237,237,237,237,238,239,239,239,,,,,,,239',
',,,239,238,238,238,,,239,,238,238,238,238,,240,240,240,,,,,,,240,,,',
'240,,,,,,240,,239,,239,,239,,,,,,,,239,239,,,,,239,,,,,,,,240,,240,',
'240,,,239,239,239,,,240,240,239,239,239,239,240,241,241,241,,,,,,,241',
',,,241,240,240,240,,,241,,240,240,240,240,,242,242,242,,,,,,,242,,,',
'242,,,,,,242,,241,,241,,241,,,,,,,,241,241,,,,,241,,,,,,,,242,,242,',
'242,,,241,241,241,,,242,242,241,241,241,241,242,243,243,243,,,,,,,243',
',,,243,242,242,242,,,243,,242,242,242,242,,244,244,244,,,,,,,244,,,',
'244,,,,,,244,,243,,243,,243,,,,,,,,243,243,,,,,243,,,,,,,,244,,244,',
'244,,,243,243,243,,,244,244,243,243,243,243,244,245,245,245,,,,,,,245',
',,,245,244,244,244,,,245,,244,244,244,244,,246,246,246,,,,,,,246,,,',
'246,,,,,,246,,245,,245,,245,,,,,,,,245,245,,,,,245,,,,,,,,246,,246,',
'246,,,245,245,245,,,246,246,245,245,245,245,246,247,247,247,,,,,,,247',
',,,247,246,246,246,,,247,,246,246,246,246,,248,248,248,,,,,,,248,,,',
'248,,,,,,248,,247,,247,,247,,,,,,,,247,247,,,,,247,,,,,,,,248,,248,',
'248,,,247,247,247,,,248,248,247,247,247,247,248,254,254,254,,,,,,,254',
',,,254,248,248,248,,,254,,248,248,248,248,261,261,261,,,,,,,261,,,,261',
',,,,,261,,,254,,254,,254,,,,,,,,254,254,,,,,254,,,,,,,,,261,,261,,,',
'254,254,254,,261,261,,254,254,254,254,313,313,313,,,,,,,313,,,,313,261',
'261,,,,313,,,261,261,261,,348,348,348,,,,,,,348,,,,348,,,,,,348,,313',
',313,,313,,,,,,,,313,313,,,,,313,,,,,,,313,348,,348,,348,313,,313,313',
'313,,,348,348,313,313,313,313,348,352,352,352,,,,348,,,352,,,348,352',
'348,348,348,,,352,,348,348,348,348,,355,355,355,,,,,,,355,,,,355,,,',
',,355,,,,352,,352,380,380,380,,,,,352,352,380,,,,380,,,,,,380,,355,',
'355,,355,,,352,352,,,,355,355,,352,352,352,355,,,,,,,355,,,380,,380',
'355,,355,355,355,,,380,380,355,355,355,355,391,391,391,,,,,,,391,,,',
'391,,380,380,,,391,,,,380,380,380,394,394,394,,,,,,,394,,,,394,,,,,',
'394,,391,,391,,391,,,,,,,,391,391,,,,,391,,,,,,,391,394,,394,,394,391',
',391,391,391,,,394,394,391,391,391,391,394,395,395,395,,,,,,,395,,,',
'395,394,394,394,,251,395,,394,394,394,394,,,,,,,,,,251,251,251,251,251',
'251,,251,251,251,251,251,,395,,395,,395,251,251,251,251,251,,,395,395',
'131,,,251,395,,,,,,,,,131,,131,,,,395,395,395,,,,,395,395,395,395,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,67,,67,,,131,,,131,,,,,,,,,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,200,,,,,,67,,,,,,,,,,,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'301,,,,,,,,,,,,338,,,,301,301,301,301,301,301,,,301,301,301,301,338',
'338,338,338,338,338,301,301,301,301,301,,,,,,,,338,338,338,338,338,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,139,,,,,,139,,,139,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,,179,,,,,179,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,,,,,93,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,,,,,258,168,168,168,168,168,168,,168,168,168',
'168,168,,,,,,,168,168,168,168,168,,,,,,,,168,23,23,23,23,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,329',
'329,329,329,329,329,330,330,330,330,330,330,331,331,331,331,331,331',
'329,329,329,329,329,,330,330,330,330,330,,331,331,331,331,331,332,332',
'332,332,332,332,333,333,333,333,333,333,334,334,334,334,334,334,332',
'332,332,332,332,,333,333,333,333,333,,334,334,334,334,334,408,408,408',
'408,408,408,409,409,409,409,409,409,,,,,,,408,408,408,408,408,,409,409',
'409,409,409' ]
        racc_action_check = arr = ::Array.new(4185, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
     9,     8,    88,    74,   nil,   nil,   nil,    17,   154,   nil,
   nil,   156,   nil,   nil,   nil,   nil,   nil,   -31,   -48,    11,
   nil,   nil,    84,  3891,   nil,   nil,   nil,    30,    38,   -21,
    47,    48,   -13,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,  3918,    88,  3604,   nil,    83,
  3945,   nil,   102,   -49,   100,   nil,   -54,    -2,    92,   nil,
   161,   115,   nil,   nil,   nil,   nil,   nil,    84,   111,   186,
   nil,   nil,   223,  3796,   nil,   nil,   nil,   150,   nil,   nil,
   229,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,   -61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   167,   nil,   nil,   nil,    50,   nil,   180,   nil,   nil,   187,
   187,  3560,   nil,    54,   201,   nil,   nil,   nil,   283,  3726,
   234,   nil,    87,   308,   244,   310,   nil,  1323,   nil,  1349,
  1415,  1441,   nil,   nil,   nil,   nil,   141,   nil,   nil,   245,
    39,   nil,    -3,   253,   -56,   nil,  1507,  3972,  3816,   nil,
  1533,  1599,  1625,  1691,  1717,   104,   nil,   282,   295,  3762,
   321,    21,   385,   343,  1783,    -8,  1809,   344,   nil,  1875,
   nil,   364,  1901,  1927,  3999,   nil,   114,   nil,   nil,   372,
  3648,   nil,   nil,   nil,   nil,   375,   380,   nil,   nil,   nil,
   317,  1993,   nil,   209,   402,    -2,   462,  2019,   nil,   103,
   -11,  2085,  2111,   411,   416,   411,   nil,  2177,  2203,  2269,
   nil,   nil,  2295,  2361,  2387,  2453,  2479,  2545,  2571,  2637,
  2663,  2729,  2755,  2821,  2847,  2913,  2939,  3005,  3031,   nil,
   -23,  3459,   434,   416,  3097,   nil,   nil,   433,  3828,   416,
   nil,  3122,   nil,   108,   nil,   nil,   505,   nil,   nil,   nil,
   230,   -43,   nil,   nil,   239,   271,   nil,   335,   nil,    55,
   424,   nil,   314,   157,    -8,   nil,   273,   nil,   nil,   nil,
   437,   nil,    71,   nil,   498,   316,   599,   nil,   nil,   693,
   446,  3647,   444,   452,   nil,   nil,   nil,   nil,   787,   nil,
   428,   494,   nil,  3188,   324,   333,   341,   -11,   312,   317,
   443,   444,   445,   448,   115,   211,   225,  1403,  1495,  4009,
  4015,  4021,  4044,  4050,  4056,   nil,   nil,   nil,  3659,   nil,
   nil,   nil,   463,  4026,   nil,    89,   nil,   531,  3214,   nil,
   462,   501,  3280,   481,   nil,  3306,   nil,    41,   141,     5,
   nil,   509,   433,   568,   nil,   392,   393,   569,   570,    -2,
   nil,   510,   nil,   492,   396,   nil,   nil,   nil,   398,   nil,
  3332,   506,   nil,   401,   nil,   nil,   nil,   500,   520,   578,
   nil,  3397,   881,   nil,  3423,  3489,   nil,   nil,   553,   nil,
   280,   315,   nil,    96,   nil,   nil,     7,   nil,  4079,  4085,
   nil,   319,   975,  1069,   523,   nil,  1163,  1257,   nil,   nil,
   525,   486,   nil,   nil,   nil ]

racc_action_default = [
  -238,  -249,    -6,  -239,  -240,  -242,  -243,  -249,  -238,    -2,
    -4,  -249,    -7,    -9,   -10,   -11,   -12,  -249,  -249,  -249,
   -59,   -60,   -66,  -249,  -241,   425,    -1,  -239,    -5,   -25,
   -28,  -249,  -249,  -249,  -122,  -209,  -210,  -211,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -233,
  -234,  -235,    -3,    -8,  -249,  -249,  -249,   -32,   -29,  -249,
   -45,  -248,  -150,  -148,  -249,   -67,  -249,   -13,   -25,   -26,
  -249,  -249,   -33,   -35,   -36,   -37,  -122,  -249,  -249,  -238,
   -46,  -122,   -69,  -249,  -146,  -147,  -149,   -42,  -123,   -14,
  -238,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -249,  -249,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -244,
  -244,  -190,  -191,  -192,  -203,  -194,  -249,  -196,  -197,  -203,
  -249,  -249,   -30,  -249,  -249,   -52,   -53,   -31,  -249,  -239,
   -48,   -50,  -249,  -249,  -238,   -70,   -72,  -236,   -74,  -249,
  -249,  -249,   -79,   -80,   -81,   -82,   -83,   -84,   -85,  -249,
  -182,  -122,  -203,  -190,  -203,  -158,  -249,  -249,  -163,  -164,
  -249,  -249,  -249,  -249,  -249,  -249,  -152,  -249,  -156,  -122,
  -249,  -239,  -249,  -249,  -249,  -249,  -124,  -245,  -246,  -141,
  -193,  -249,  -205,  -249,  -249,  -200,   -13,   -27,   -34,   -42,
  -249,   -44,   -47,  -122,  -122,   -42,  -119,  -120,   -61,   -68,
  -239,  -249,   -73,  -237,  -182,  -249,  -249,  -249,   -99,  -249,
  -249,  -249,  -249,   -69,  -112,  -115,  -116,  -249,  -249,  -249,
  -159,  -122,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -165,
  -249,  -163,  -164,  -178,  -249,  -179,  -180,  -249,  -249,  -156,
  -155,  -249,   -40,  -249,  -122,   -65,   -69,   -15,   -23,   -96,
   -97,  -148,  -201,  -202,  -125,  -249,  -247,  -244,  -142,  -249,
  -199,  -198,  -206,  -249,  -249,  -122,  -249,   -38,   -51,  -122,
  -249,   -49,  -249,  -118,   -71,   -76,   -69,  -106,  -107,   -69,
  -249,  -249,  -249,  -249,  -102,  -103,  -104,  -105,   -69,  -160,
  -161,   -88,  -122,  -249,  -127,  -128,  -129,  -249,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -183,
  -184,  -185,  -186,  -187,  -188,  -166,  -181,  -189,  -249,  -151,
  -153,  -154,  -157,  -122,   -43,   -63,   -64,  -249,  -249,  -139,
  -249,  -244,  -249,  -249,  -204,  -249,  -208,  -249,  -249,   -54,
  -122,  -249,  -108,  -249,   -98,  -249,  -249,  -249,  -249,   -92,
   -89,  -249,  -113,  -114,  -121,  -162,   -41,   -62,  -126,  -140,
  -249,  -144,  -145,  -207,  -195,   -24,  -122,   -55,   -42,  -249,
  -109,  -249,   -69,   -77,  -249,  -249,   -78,   -86,   -94,   -90,
  -249,  -249,  -143,   -57,  -117,   -75,  -249,  -111,  -100,  -101,
   -87,  -249,   -69,   -69,  -249,   -58,   -69,   -69,   -93,   -91,
   -42,  -108,   -95,   -56,  -110 ]

racc_goto_table = [
    24,     3,    16,    70,    76,   109,   180,   106,    85,    27,
   176,   107,    28,   186,   189,   296,   267,   141,   105,   278,
   160,   262,   226,    72,    24,    24,   143,    16,    16,   100,
   218,    90,   260,   389,    68,   370,    77,     9,     1,    82,
   195,     8,    34,    13,    63,    64,    67,    80,   263,   163,
    89,   140,   134,    14,   288,   414,   133,    32,    92,   213,
   294,   215,    62,   220,   212,     2,   164,    84,    13,    13,
   216,   368,    85,    26,   369,   195,   398,   104,    14,    14,
   410,   131,   249,   250,    78,   132,    86,   225,   394,    91,
   139,   395,   424,   399,   130,    15,   270,   300,   274,   207,
   202,   181,   196,   198,   282,   284,   224,   361,   287,   109,
   275,   106,   177,   341,   293,   107,   277,   279,   352,   175,
    15,    15,   105,   295,   109,   230,   106,   252,    24,   291,
   107,    84,   281,   309,   310,   283,    24,   105,   160,   314,
   315,   316,   273,   nil,   nil,   210,   nil,   nil,   286,   nil,
    86,   160,   266,   nil,   138,   nil,   nil,   311,    91,   276,
   223,   nil,   nil,   nil,   nil,   182,   nil,   163,   nil,   nil,
   nil,   350,   nil,   372,   292,   340,   272,   nil,    24,   nil,
   163,   104,   nil,   nil,   164,   376,   231,   298,   nil,   342,
   346,   nil,   nil,   267,   160,   nil,   104,   164,   264,   nil,
   347,   317,   nil,   nil,   nil,   nil,   416,    24,   nil,   209,
   402,   nil,   nil,   285,   nil,   nil,   nil,   nil,   nil,   289,
    24,   nil,   nil,   163,   160,   374,   nil,   160,   nil,   339,
   362,   nil,   nil,   363,   345,   nil,   160,   nil,   373,   nil,
   164,   nil,   367,   nil,   nil,   380,   nil,   nil,   nil,   207,
   nil,   nil,   nil,   163,   nil,   357,   163,   nil,   nil,   359,
   378,   nil,   nil,   nil,   nil,   163,   nil,   383,   nil,   nil,
   164,   nil,   nil,   164,   nil,   nil,   nil,   177,   nil,   nil,
   381,   nil,   164,   nil,   nil,   nil,   109,   358,   106,   nil,
   nil,   nil,   107,   nil,   nil,   nil,   nil,   404,   nil,   105,
   nil,   nil,   207,   406,   nil,   nil,   nil,   nil,   279,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   160,   nil,   nil,   nil,   nil,   nil,   407,   nil,   nil,   423,
   387,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   160,   160,   nil,   nil,   160,   160,   418,   419,   nil,   163,
   421,   422,   nil,   nil,   nil,    24,   403,   nil,   104,   219,
   nil,   nil,   264,   nil,   nil,   nil,   164,   nil,   nil,   163,
   163,   nil,   nil,   163,   163,   nil,   nil,   nil,   298,   nil,
   251,   253,   255,   256,   nil,   nil,   164,   164,   nil,   nil,
   164,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   412,   413,   nil,   nil,   nil,   nil,   nil,   nil,    24,
    24,   nil,   417,   nil,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   301,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   nil,   nil,
   nil,   nil,   nil,   338,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   408,   409 ]

racc_goto_check = [
    85,     5,    12,    19,    26,    58,    27,    16,    15,     5,
    76,    17,     5,    71,    71,    49,    14,    33,    15,    73,
    58,    29,    65,    40,    85,    85,    42,    12,    12,    13,
    59,    31,    77,    50,    23,    57,    19,     4,     1,    24,
    82,     3,    20,     9,     8,    18,    21,    22,    28,    67,
    30,    32,    34,    10,    35,    36,    26,    39,    41,    48,
    44,    48,     4,    48,    46,     2,    69,    12,     9,     9,
    51,    53,    15,     2,    54,    82,    55,    12,    10,    10,
    56,     5,    48,    48,    20,    23,    20,    33,    61,    20,
     5,    62,    50,    57,    18,    11,    48,    59,    48,    67,
    31,     5,    19,    24,    48,    48,    64,    66,    27,    58,
    68,    16,    20,    77,    27,    17,    72,    58,    74,    75,
    11,    11,    15,    48,    58,    78,    16,    80,    85,    33,
    17,    12,    81,    48,    48,    84,    85,    15,    58,    48,
    48,    48,    67,   nil,   nil,     5,   nil,   nil,    13,   nil,
    20,    58,    19,   nil,     2,   nil,   nil,    42,    20,    19,
     5,   nil,   nil,   nil,   nil,     2,   nil,    67,   nil,   nil,
   nil,    71,   nil,    65,    26,    76,    40,   nil,    85,   nil,
    67,    12,   nil,   nil,    69,    29,    20,    19,   nil,    58,
    33,   nil,   nil,    14,    58,   nil,    12,    69,    20,   nil,
    42,    26,   nil,   nil,   nil,   nil,    49,    85,   nil,     2,
    73,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,    20,
    85,   nil,   nil,    67,    58,    48,   nil,    58,   nil,    19,
    42,   nil,   nil,    42,    26,   nil,    58,   nil,    33,   nil,
    69,   nil,    42,   nil,   nil,    71,   nil,   nil,   nil,    67,
   nil,   nil,   nil,    67,   nil,    26,    67,   nil,   nil,    26,
    48,   nil,   nil,   nil,   nil,    67,   nil,    48,   nil,   nil,
    69,   nil,   nil,    69,   nil,   nil,   nil,    20,   nil,   nil,
    58,   nil,    69,   nil,   nil,   nil,    58,     5,    16,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,    27,   nil,    15,
   nil,   nil,    67,    48,   nil,   nil,   nil,   nil,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,    27,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    58,   nil,   nil,    58,    58,    42,    42,   nil,    67,
    42,    42,   nil,   nil,   nil,    85,    26,   nil,    12,    60,
   nil,   nil,    20,   nil,   nil,   nil,    69,   nil,   nil,    67,
    67,   nil,   nil,    67,    67,   nil,   nil,   nil,    19,   nil,
    60,    60,    60,    60,   nil,   nil,    69,    69,   nil,   nil,
    69,    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,    85,
    85,   nil,     5,   nil,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,   nil,   nil,
   nil,   nil,   nil,    60,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    60,    60 ]

racc_goto_pointer = [
   nil,    38,    65,    39,    35,     1,   nil,   nil,    16,    41,
    51,    93,     0,   -48,  -165,   -59,   -70,   -66,    16,   -28,
    19,    16,   -20,     4,   -28,   nil,   -30,   -91,  -131,  -158,
   -20,   -39,   -40,   -74,   -35,  -146,  -348,   nil,   nil,    35,
    -9,   -14,   -66,   nil,  -150,   nil,   -83,   nil,   -88,  -200,
  -329,   -80,   nil,  -240,  -237,  -293,  -318,  -276,   -72,  -120,
   209,  -277,  -275,   nil,   -55,  -139,  -185,   -43,   -76,   -26,
   nil,  -106,   -73,  -170,  -161,    26,   -83,  -146,   -41,   nil,
   -44,   -59,   -89,   nil,   -57,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,   101,
   102,   103,   153,   nil,    99,   155,   152,   154,   nil,   188,
   161,   nil,   nil,   nil,   nil,    83,   142,   nil,   nil,   nil,
   nil,   nil,   nil,   265,   nil,   nil,   nil,    20,    21,   nil,
   nil,   nil,   nil,   144,   145,   146,   nil,   148,   156,   nil,
   nil,   nil,   158,   nil,   nil,   nil,   nil,   nil,   214,   nil,
   168,   302,   303,   390,   nil,   nil,   205,   121,   nil,   129,
   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   165,   166,
   169,   122,   190,   125,   nil,     4,   187 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 109, :_reduce_1,
  1, 111, :_reduce_2,
  3, 111, :_reduce_3,
  1, 112, :_reduce_4,
  2, 112, :_reduce_5,
  0, 115, :_reduce_6,
  1, 115, :_reduce_7,
  3, 115, :_reduce_8,
  1, 116, :_reduce_9,
  1, 116, :_reduce_10,
  1, 116, :_reduce_11,
  1, 116, :_reduce_none,
  0, 121, :_reduce_13,
  1, 121, :_reduce_14,
  3, 121, :_reduce_15,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  7, 118, :_reduce_23,
  9, 119, :_reduce_24,
  0, 126, :_reduce_25,
  2, 126, :_reduce_26,
  6, 114, :_reduce_27,
  0, 129, :_reduce_28,
  1, 129, :_reduce_29,
  3, 129, :_reduce_30,
  3, 131, :_reduce_31,
  0, 130, :_reduce_32,
  1, 130, :_reduce_33,
  3, 130, :_reduce_34,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  4, 133, :_reduce_38,
  0, 136, :_reduce_39,
  1, 136, :_reduce_40,
  3, 136, :_reduce_41,
  0, 135, :_reduce_42,
  3, 135, :_reduce_43,
  6, 120, :_reduce_44,
  0, 138, :_reduce_45,
  1, 138, :_reduce_46,
  3, 138, :_reduce_47,
  2, 139, :_reduce_48,
  3, 140, :_reduce_49,
  1, 140, :_reduce_50,
  4, 123, :_reduce_51,
  1, 142, :_reduce_none,
  1, 142, :_reduce_53,
  2, 143, :_reduce_54,
  3, 143, :_reduce_55,
  7, 143, :_reduce_56,
  0, 144, :_reduce_57,
  1, 144, :_reduce_58,
  1, 117, :_reduce_59,
  1, 117, :_reduce_60,
  6, 145, :_reduce_61,
  8, 146, :_reduce_62,
  2, 137, :_reduce_63,
  2, 137, :_reduce_64,
  1, 137, :_reduce_65,
  0, 147, :_reduce_66,
  2, 147, :_reduce_67,
  2, 150, :_reduce_68,
  0, 151, :_reduce_69,
  1, 151, :_reduce_70,
  3, 151, :_reduce_71,
  1, 152, :_reduce_72,
  2, 152, :_reduce_73,
  1, 152, :_reduce_74,
  6, 152, :_reduce_75,
  3, 152, :_reduce_76,
  5, 152, :_reduce_77,
  5, 152, :_reduce_78,
  1, 152, :_reduce_79,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_83,
  1, 152, :_reduce_84,
  1, 152, :_reduce_none,
  5, 160, :_reduce_86,
  3, 161, :_reduce_87,
  0, 162, :_reduce_88,
  1, 162, :_reduce_89,
  2, 162, :_reduce_90,
  4, 165, :_reduce_91,
  0, 163, :_reduce_92,
  3, 163, :_reduce_93,
  0, 164, :_reduce_94,
  3, 164, :_reduce_95,
  3, 125, :_reduce_96,
  3, 124, :_reduce_97,
  3, 159, :_reduce_98,
  1, 159, :_reduce_none,
  5, 167, :_reduce_100,
  5, 167, :_reduce_101,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  0, 158, :_reduce_108,
  1, 158, :_reduce_109,
  5, 158, :_reduce_110,
  2, 171, :_reduce_111,
  2, 153, :_reduce_112,
  3, 172, :_reduce_113,
  3, 172, :_reduce_114,
  1, 172, :_reduce_115,
  1, 172, :_reduce_116,
  6, 141, :_reduce_117,
  3, 141, :_reduce_118,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  3, 173, :_reduce_121,
  0, 134, :_reduce_122,
  2, 134, :_reduce_123,
  0, 176, :_reduce_124,
  1, 176, :_reduce_125,
  3, 176, :_reduce_126,
  3, 155, :_reduce_127,
  3, 155, :_reduce_128,
  3, 155, :_reduce_129,
  1, 178, :_reduce_130,
  1, 178, :_reduce_131,
  1, 178, :_reduce_132,
  1, 178, :_reduce_133,
  1, 178, :_reduce_134,
  1, 178, :_reduce_135,
  1, 178, :_reduce_136,
  1, 178, :_reduce_137,
  1, 178, :_reduce_138,
  4, 178, :_reduce_139,
  5, 178, :_reduce_140,
  0, 180, :_reduce_141,
  1, 180, :_reduce_142,
  4, 180, :_reduce_143,
  3, 181, :_reduce_144,
  2, 182, :_reduce_none,
  2, 148, :_reduce_146,
  2, 148, :_reduce_147,
  1, 148, :_reduce_148,
  2, 148, :_reduce_149,
  0, 149, :_reduce_150,
  4, 149, :_reduce_151,
  1, 183, :_reduce_152,
  3, 183, :_reduce_153,
  3, 184, :_reduce_154,
  2, 184, :_reduce_155,
  0, 185, :_reduce_156,
  2, 185, :_reduce_157,
  1, 156, :_reduce_158,
  2, 156, :_reduce_159,
  3, 156, :_reduce_160,
  3, 156, :_reduce_161,
  4, 187, :_reduce_162,
  1, 186, :_reduce_163,
  1, 186, :_reduce_164,
  2, 186, :_reduce_165,
  3, 186, :_reduce_166,
  3, 168, :_reduce_167,
  3, 168, :_reduce_168,
  3, 168, :_reduce_169,
  3, 168, :_reduce_170,
  3, 168, :_reduce_171,
  3, 168, :_reduce_172,
  3, 168, :_reduce_173,
  3, 168, :_reduce_174,
  3, 168, :_reduce_175,
  3, 168, :_reduce_176,
  3, 168, :_reduce_177,
  2, 168, :_reduce_178,
  2, 168, :_reduce_179,
  2, 168, :_reduce_180,
  3, 168, :_reduce_181,
  1, 168, :_reduce_182,
  3, 188, :_reduce_183,
  3, 188, :_reduce_184,
  3, 188, :_reduce_185,
  3, 188, :_reduce_186,
  3, 188, :_reduce_187,
  3, 188, :_reduce_188,
  3, 188, :_reduce_189,
  1, 166, :_reduce_190,
  1, 166, :_reduce_none,
  1, 166, :_reduce_192,
  2, 166, :_reduce_193,
  1, 166, :_reduce_none,
  5, 166, :_reduce_195,
  1, 166, :_reduce_196,
  1, 166, :_reduce_197,
  3, 189, :_reduce_198,
  3, 189, :_reduce_199,
  2, 191, :_reduce_200,
  3, 177, :_reduce_201,
  3, 177, :_reduce_202,
  0, 190, :_reduce_203,
  3, 190, :_reduce_204,
  0, 192, :_reduce_205,
  1, 192, :_reduce_206,
  3, 192, :_reduce_207,
  4, 175, :_reduce_208,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_235,
  0, 154, :_reduce_236,
  1, 154, :_reduce_none,
  0, 110, :_reduce_238,
  1, 110, :_reduce_239,
  1, 113, :_reduce_240,
  2, 113, :_reduce_241,
  1, 193, :_reduce_242,
  1, 193, :_reduce_none,
  0, 179, :_reduce_244,
  1, 179, :_reduce_none,
  1, 194, :_reduce_none,
  2, 194, :_reduce_none,
  1, 127, :_reduce_248 ]

racc_reduce_n = 249

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kDTYPE_UINT => 33,
  :kDTYPE_LINT => 34,
  :kDTYPE_LLINT => 35,
  :kDTYPE_CHAR => 36,
  :kDTYPE_I8 => 37,
  :kDTYPE_I16 => 38,
  :kDTYPE_I32 => 39,
  :kDTYPE_I64 => 40,
  :kDTYPE_UI8 => 41,
  :kDTYPE_UI16 => 42,
  :kDTYPE_UI32 => 43,
  :kDTYPE_UI64 => 44,
  :kDTYPE_INT => 45,
  :kDTYPE_F32 => 46,
  :kDTYPE_F64 => 47,
  :kDTYPE_LF64 => 48,
  :kDTYPE_ROBJ => 49,
  :kDTYPE_ULINT => 50,
  :kDTYPE_ULLINT => 51,
  :kDTYPE_VOID => 52,
  :kDTYPE_SIZE_T => 53,
  :kDTYPE_RB_STR => 54,
  :kDTYPE_UCHAR => 55,
  :kDTYPE_BOOL => 56,
  :tCUSTOM_DTYPE => 57,
  :kDTYPE_RB_ARR => 58,
  :kDTYPE_RB_HSH => 59,
  :tLPAREN => 60,
  :tRPAREN => 61,
  :tLSQUARE => 62,
  :tRSQUARE => 63,
  :tIDENTIFIER => 64,
  :tNL => 65,
  :tCOMMA => 66,
  :tSQUOTE => 67,
  :tSCOLON => 68,
  :EOF => 69,
  :tDOT => 70,
  :tQMARK => 71,
  :tSYMBOL => 72,
  :tLBRACE => 73,
  :tRBRACE => 74,
  :tCOLON => 75,
  :tCOLON2 => 76,
  :tPLUS => 77,
  :tMINUS => 78,
  :tSTAR => 79,
  :tDIVIDE => 80,
  :tEXPO => 81,
  :tMODULUS => 82,
  :tASSIGN => 83,
  :tEQ => 84,
  :tLT => 85,
  :tLTEQ => 86,
  :tGT => 87,
  :tGTEQ => 88,
  :tANDOP => 89,
  :tOROP => 90,
  :tBANG => 91,
  :tOP_ASSIGN => 92,
  :tSTRING => 93,
  :kSIZEOF => 94,
  :tBIT_AND => 95,
  :tBIT_OR => 96,
  :tBIT_XOR => 97,
  :tBIT_LSHIFT => 98,
  :tBIT_RSHIFT => 99,
  :tBIT_NOT => 100,
  :tINTEGER => 101,
  :tFLOAT => 102,
  :tSINGLE_CHAR => 103,
  :ADDRESS_OF => 104,
  :TYPECAST => 105,
  :UMINUS => 106,
  :tNEQ => 107 }

racc_nt_base = 108

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "klass_stmts",
  "klass_stmt",
  "alias_stmt",
  "op_assign",
  "forward_declaration",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_15(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_23(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_24(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_25(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_27(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_28(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_29(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_31(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_33(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_38(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_40(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_41(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_42(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_43(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_46(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_47(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_48(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_49(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_50(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_51(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_54(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_55(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_56(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_57(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_61(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_62(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_63(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_64(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_65(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_66(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_67(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_70(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_71(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_72(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_73(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_74(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_75(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_76(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_77(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_78(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_79(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_83(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_84(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_86(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_87(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_88(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_90(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_91(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_93(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_94(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_95(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_96(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_97(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_98(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_100(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_101(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_108(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_109(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_110(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_111(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_112(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_113(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_114(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_117(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_118(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_121(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_122(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_123(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_125(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_126(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_127(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_128(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_129(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_134(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_135(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_136(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_137(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_138(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_139(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_140(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_141(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_142(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_143(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_144(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_146(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_147(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_149(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_150(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_151(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_152(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_153(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_154(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_155(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 580)
  def _reduce_156(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_158(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 587)
  def _reduce_159(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_162(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_165(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_166(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_170(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_171(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_172(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_178(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_179(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_180(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_181(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_183(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_184(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_185(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_186(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_187(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_188(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_189(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_190(val, _values, result)
    
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_193(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_195(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_196(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_197(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 656)
  def _reduce_198(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 657)
  def _reduce_199(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_200(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 669)
  def _reduce_201(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_202(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_203(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 678)
  def _reduce_204(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 681)
  def _reduce_205(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 682)
  def _reduce_206(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_207(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 688)
  def _reduce_208(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_235(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 707)
  def _reduce_236(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 712)
  def _reduce_239(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_240(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 716)
  def _reduce_241(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_242(val, _values, result)
    
    result
  end
.,.,

# reduce 243 omitted

module_eval(<<'.,.,', 'parser.racc', 723)
  def _reduce_244(val, _values, result)
    
    result
  end
.,.,

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'parser.racc', 731)
  def _reduce_248(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
