#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 791)

attr_reader :lineno, :location, :string

# Invoke an instance of the  lexer and set various state variables like the lexer
#   In order to perform the actual parsing you need to also call the do_parse method
#   on the Racc::Parser object.
#
# @param path [String] path of the rubex file to compile.
# @param source_dir [String] Source directory in case of multi-file program.
# @param is_inside_file_node [Boolean] Whether this file is within a main file or not.
def parse path, source_dir, is_inside_file_node
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @source_dir = source_dir
  @is_inside_file_node = is_inside_file_node
  @file_name = File.basename(path, ".rubex")
  @lexer.parse_file path
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end

# Parse the file given by file_name using this parser and return a FileNode
#   object that will be placed in the statements of the MainNode or other
#   FileNode(s).
def parse_required_file_and_load_ast file_name
  file_name += ".rubex" if File.extname(file_name) == ""
  full_name = @source_dir + "/" + file_name
  if !Dir[@source_dir + "/*"].include?(full_name)
    raise Rubex::FileNotFoundError,
          "cannot find file #{file_name} in #{@source_dir}"
  end
  Rubex::Compiler::CONFIG.add_dep(File.basename(file_name).split('.')[0])
  parser = Rubex::Parser.new
  parser.parse(full_name, @source_dir, true)
  file_node_ast = parser.do_parse
  file_node_ast
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'24,214,27,29,203,190,203,390,30,7,199,53,54,55,20,199,21,19,25,115,57',
'42,104,37,74,41,114,232,31,18,75,40,11,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66,198,58,155',
'45,155,223,228,107,191,138,230,56,59,146,232,147,48,109,67,110,132,133',
'325,138,292,62,232,132,133,132,133,65,137,52,73,68,24,149,27,29,69,49',
'50,51,30,293,137,53,54,55,20,111,21,19,25,112,57,42,315,37,74,41,117',
'316,31,18,75,40,11,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92',
'93,94,95,96,97,98,99,100,101,102,66,267,58,292,45,5,366,295,6,146,380',
'147,56,59,138,393,411,48,228,67,394,410,230,232,293,145,62,308,324,232',
'132,133,65,143,52,73,68,24,232,27,29,69,49,50,51,30,136,230,53,54,55',
'20,148,21,151,25,5,57,42,6,37,74,41,232,155,31,18,75,40,155,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'102,66,184,58,5,45,5,6,5,6,24,6,5,56,59,6,386,186,48,194,67,53,54,55',
'20,434,21,62,25,155,57,42,232,65,74,52,73,68,24,18,75,232,69,49,50,51',
'132,133,196,53,54,55,20,146,21,147,25,5,57,42,6,5,74,5,6,200,6,18,75',
'145,317,138,58,318,123,159,160,161,162,163,164,320,56,59,319,132,133',
'124,161,162,163,164,146,165,166,167,168,169,5,205,58,6,123,5,52,73,6',
'24,132,133,56,59,49,50,51,124,132,133,53,54,55,20,221,21,226,25,5,57',
'42,6,227,74,52,73,234,5,18,75,6,155,49,50,51,159,160,161,162,163,164',
'132,133,5,24,438,6,159,160,161,162,163,164,132,133,53,54,55,20,269,21',
'58,25,123,57,42,166,167,74,132,133,56,59,18,75,163,124,159,160,161,162',
'163,164,272,170,172,173,174,175,161,162,163,164,52,73,165,166,167,168',
'169,155,49,50,51,132,133,58,171,123,5,5,5,6,6,6,5,56,59,6,132,133,124',
'159,160,161,162,163,164,132,133,275,27,29,132,133,155,322,30,52,73,53',
'54,55,20,283,21,49,50,51,57,42,291,37,74,41,356,357,31,294,75,40,298',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,102,66,299,58,300,45,5,210,211,6,212,213,132,56,59,132,133',
'109,48,304,67,132,133,132,133,132,133,62,356,357,308,313,147,65,145',
'52,73,68,163,163,27,29,69,49,50,51,30,163,163,53,54,55,20,191,21,194',
'341,347,57,42,313,37,74,41,358,361,31,363,75,40,367,76,77,78,79,80,81',
'82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66',
'227,58,376,45,5,155,379,6,155,387,389,56,59,392,395,397,48,399,67,400',
'109,406,409,138,416,62,313,232,155,397,155,65,313,52,73,68,138,439,27',
'29,69,49,50,51,30,440,313,53,54,55,20,,21,,,,57,42,,37,74,41,,,31,,75',
'40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97',
'98,99,100,101,102,66,,58,,45,159,160,161,162,163,164,,56,59,,,,48,,67',
',,,165,166,167,62,,,,,,65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55',
'20,,21,,,,57,42,,37,74,41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66,,58,,45,159',
'160,161,162,163,164,,56,59,,,,48,,67,,,,165,166,167,62,,,,,,65,,52,73',
'68,,,27,29,69,49,50,51,30,,,53,54,55,20,,21,,,,57,42,,37,74,41,,,31',
',75,40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95',
'96,97,98,99,100,101,102,66,,58,,45,,,,,,,,56,59,,,,48,,67,,,,,,,62,',
',,,,65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55,20,,21,,,,57,42,',
'37,74,41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91',
'92,93,94,95,96,97,98,99,100,101,102,66,,58,,45,,,,,,,,56,59,,,,48,,67',
',,,,,,62,,,,,,65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55,20,,21',
',,,57,42,,37,74,41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85,86,87',
'88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66,,58,,45,5,,,6,,,',
'56,59,,,,48,,67,,,,,,,62,,,,,,65,,52,73,68,,,27,29,69,49,50,51,30,,',
'53,54,55,20,,21,,,,57,42,,37,74,41,,,31,,75,40,,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66,,58',
',45,,,,,,,,56,59,,,,48,,67,,,,,,,62,,,,,,65,,52,73,68,,,27,29,69,49',
'50,51,30,,,53,54,55,20,,21,,,,57,42,,37,74,41,,,31,,75,40,,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'102,66,,58,,45,5,,,6,,,,56,59,,,,48,,67,,,,,,,62,,,,,,65,,52,73,68,',
',27,29,69,49,50,51,30,,,53,54,55,20,,21,,,,57,42,,37,74,41,,,31,,75',
'40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97',
'98,99,100,101,102,66,,58,,45,5,,,6,,,,56,59,,,,48,,67,,,,,,,62,,,,,',
'65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55,20,,21,,,,57,42,,37,74',
'41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,102,66,,58,,45,,,,,,,,56,59,,,,48,,67,,,,',
',,62,,,,,,65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55,20,,21,,,,57',
'42,,37,74,41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,102,66,,58,,45,,,,,,,,56,59,,',
',48,,67,,,,,,,62,,,,,,65,,52,73,68,,,27,29,69,49,50,51,30,,,53,54,55',
'20,,21,,,,57,42,,37,74,41,,,31,,75,40,,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,66,,58,,45,5,',
',6,53,54,55,56,59,,,,48,57,67,,,74,,,,62,,75,,,,65,,52,73,68,,,,,69',
'49,50,51,,,,,,,,,,53,54,55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67',
',,,,,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,',
'56,59,57,,,124,74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,',
',,,53,54,55,,128,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,',
',,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,,56,59,57,,,124,74',
'67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,66,,58',
',123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,,65,,52,73,68,,,,,69,49',
'50,51,66,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,62,,,,,',
'65,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,66,,58,,123,57,,,,74,,,56',
'59,,75,,124,,67,,,,,,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,181,,58,',
'123,53,54,55,,,268,,56,59,57,,,124,74,67,,,,,75,,,159,160,161,162,163',
'164,,52,73,68,,,,,69,49,50,51,165,166,167,168,169,53,54,55,,181,,58',
',123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,,,,52,73,68,,,,,69,49',
'50,51,181,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,159,160',
'161,162,163,164,,52,73,68,,,,,69,49,50,51,165,166,167,168,169,53,54',
'55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,62,,,,,,65,,52,73',
'68,,,,,69,49,50,51,181,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,',
',,75,,,159,160,161,162,163,164,,52,73,68,,,,,69,49,50,51,165,166,167',
'168,169,53,54,55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,62',
',,,,,65,,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,,56,59,57',
',,124,74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,,,,,53,54',
'55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,62,,,,,,65,,52,73',
'68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,',
',75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,66,,58,,123',
'57,,,,74,,,56,59,,75,,124,,67,,,,,,,62,,,,,,65,,52,73,68,,,,,69,49,50',
'51,66,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,62,,,,,,65',
',52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,66,,58,,123,57,,,,74,,,56,59',
',75,,124,,67,,,,,,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,66,,58,,123',
'53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69',
'49,50,51,,,,,,53,54,55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,',
',,,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,,56',
'59,57,,,124,74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,,,,',
'53,54,55,,,268,58,,123,57,,,,74,,,56,59,,75,,124,159,160,161,162,163',
'164,,170,172,173,174,175,,,,,52,73,165,166,167,168,169,,49,50,51,181',
',58,171,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,159,160,161,162',
'163,164,,52,73,68,,,,,69,49,50,51,165,166,167,168,169,53,54,55,,181',
',58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,,,,52,73,68,,,,,69',
'49,50,51,181,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,159',
'160,161,162,163,164,,52,73,68,,,,,69,49,50,51,165,166,167,168,169,53',
'54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,,,,52,73',
'68,,,,,69,49,50,51,181,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,',
',,75,,,159,160,161,162,163,164,,52,73,68,,,,,69,49,50,51,165,166,167',
'168,169,53,54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,',
',,,,,,,52,73,68,,,,,69,49,50,51,181,,58,,123,53,54,55,,,,,56,59,57,',
',124,74,67,,,,,75,,,159,160,161,162,163,164,,52,73,68,,,,,69,49,50,51',
'165,166,167,168,169,53,54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124',
',67,,,,,,,,,,,,,,,52,73,68,,,,,69,49,50,51,181,,58,,123,53,54,55,,,',
',56,59,57,,,124,74,67,,,,,75,,,159,160,161,162,163,164,,52,73,68,,,',
',69,49,50,51,165,166,167,168,169,53,54,55,,181,,58,,123,57,,,,74,,,56',
'59,,75,,124,,67,,,,,,,,,,,,,,,52,73,68,,,,,69,49,50,51,181,,58,,123',
'53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,,,,,,,,52,73,68,,,,,69,49',
'50,51,,,,,,53,54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,',
',,,,,,,,,,52,73,68,,,,,69,49,50,51,181,,58,,123,53,54,55,,,,,56,59,57',
',,124,74,67,,,,,75,,,,,,,,,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,',
'181,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,,,,,,,,,52,73,68,,',
',,69,49,50,51,181,,58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75',
',,,,,,,,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,181,,58,,123,57,,,',
'74,,,56,59,,75,,124,,67,,,,,,,,,,,,,,,52,73,68,,,,,69,49,50,51,181,',
'58,,123,53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,,,,,,,,52,73,68,',
',,,69,49,50,51,,,,,,53,54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124',
',67,,,,,,,,,,,,,,,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,',
'56,59,57,,,124,74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,',
',,,53,54,55,,66,,58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,62,,,,',
',65,,52,73,68,,,,,69,49,50,51,66,,58,,123,53,54,55,,,,,56,59,57,,,124',
'74,67,,,,,75,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,,,,,,53,54,55,,66',
',58,,123,57,,,,74,,,56,59,,75,,124,,67,,,,,,,62,,,,,,65,,52,73,68,,',
',,69,49,50,51,,,58,,123,53,54,55,,,,,56,59,57,,,124,74,,,,,,75,,,,,',
',,,,52,73,,,,,,,49,50,51,,,,,,53,54,55,,66,,58,,123,57,,,,74,,,56,59',
',75,,124,,67,,,,,,,62,,,,,,65,,52,73,68,,,,,69,49,50,51,181,,58,,123',
'53,54,55,,,,,56,59,57,,,124,74,67,,,,,75,,,,,,,,,,52,73,68,,,,,69,49',
'50,51,,,,,,53,54,55,,181,,58,,123,57,,,,74,,,56,59,,75,,124,,67,53,54',
'55,,,,,,,57,,,,74,52,73,68,,,75,,69,49,50,51,,,58,,123,,,,,,,,56,59',
',,,124,,,,,,,,,58,,123,,,,,,52,73,56,59,384,,,124,49,50,51,,,,,,,20',
',21,,,,,52,73,,,,,,,49,50,51,,76,77,78,79,80,81,82,83,84,85,86,87,88',
'89,90,91,92,93,94,95,96,97,98,99,100,101,102,20,,21,,,5,,,6,,,,,,,,',
',,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97',
'98,99,100,101,102,289,,,,,,277,,,,,,,,,,,,,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,268,,,,,,,',
',,,,,,,,,159,160,161,162,163,164,,,210,211,212,213,,,,,,,165,166,167',
'168,169,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95',
'96,97,98,99,100,101,102,,,,,,5,,,6,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,,-40,,,,,-40,76,77',
'78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100',
'101,102,,,,,352,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,102,,,,,352,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,102,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,102,76,77,78,79,80,81,82,83,84,85,86,87,88',
'89,90,91,92,93,94,95,96,97,98,99,100,101,102,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,159,160',
'161,162,163,164,,,210,211,212,213,,,,,,,165,166,167,168,169' ]
        racc_action_table = arr = ::Array.new(4741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,131,2,2,126,110,401,346,2,1,116,2,2,2,2,138,2,2,2,21,2,2,7,2,2,2,21',
'346,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,116,2,126,2,401,138,142,11,110,43,142,2,2,47,249,223,2,17,2,18,131',
'131,249,336,223,2,142,126,126,401,401,2,43,2,2,2,106,47,106,106,2,2',
'2,2,106,223,336,106,106,106,106,19,106,106,106,20,106,106,237,106,106',
'106,24,237,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,177,106,198,106,106,306,201,106,45,326,45,106,106,248,349,370,106',
'412,106,349,370,412,201,198,45,106,306,248,326,177,177,106,45,106,106',
'106,108,412,108,108,106,106,106,106,108,42,312,108,108,108,108,46,108',
'48,108,0,108,108,0,108,108,108,312,58,108,108,108,108,59,108,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,108,73,108,3,108,108,3,8,108,273,8,12,108',
'108,12,340,107,108,111,108,273,273,273,273,420,273,108,273,112,273,273',
'340,108,273,108,108,108,381,273,273,420,108,108,108,108,36,36,113,381',
'381,381,381,123,381,123,381,40,381,381,40,41,381,217,41,117,217,381',
'381,123,239,121,273,239,273,261,261,261,261,261,261,244,273,273,244',
'120,120,273,250,250,250,250,125,261,261,261,261,261,276,127,381,276',
'381,381,273,273,381,383,188,188,381,381,273,273,273,381,222,222,383',
'383,383,383,136,383,139,383,284,383,383,284,140,383,381,381,145,328',
'383,383,328,153,381,381,381,257,257,257,257,257,257,233,233,366,432',
'432,366,256,256,256,256,256,256,236,236,432,432,432,432,179,432,383',
'432,383,432,432,256,256,432,238,238,383,383,432,432,180,383,63,63,63',
'63,63,63,186,63,63,63,63,63,251,251,251,251,383,383,63,63,63,63,63,189',
'383,383,383,240,240,432,63,432,432,367,406,432,367,406,417,432,432,417',
'241,241,432,258,258,258,258,258,258,242,242,191,134,134,243,243,246',
'246,134,432,432,134,134,134,134,194,134,432,432,432,134,134,197,134',
'134,134,296,296,134,199,134,134,206,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,208,134,209,134,134,299,299,134,300,300,216,134,134,311',
'311,218,134,219,134,373,373,374,374,375,375,134,436,436,220,229,230',
'134,234,134,134,134,252,253,135,135,134,134,134,134,135,254,255,135',
'135,135,135,274,135,277,283,289,135,135,295,135,135,135,297,301,135',
'305,135,135,308,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,310,135',
'321,135,135,322,324,135,337,342,344,135,135,348,351,352,135,353,135',
'354,362,364,368,378,382,135,386,391,393,395,398,135,409,135,135,135',
'424,433,202,202,135,135,135,135,202,435,439,202,202,202,202,,202,,,',
'202,202,,202,202,202,,,202,,202,202,,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,,202,,202,259,259,259,259,259,259,,202,202,,,,202,,202,',
',,259,259,259,202,,,,,,202,,202,202,202,,,205,205,202,202,202,202,205',
',,205,205,205,205,,205,,,,205,205,,205,205,205,,,205,,205,205,,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,,205,,205,260,260,260,260,260,260',
',205,205,,,,205,,205,,,,260,260,260,205,,,,,,205,,205,205,205,,,214',
'214,205,205,205,205,214,,,214,214,214,214,,214,,,,214,214,,214,214,214',
',,214,,214,214,,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,,214,,214',
',,,,,,,214,214,,,,214,,214,,,,,,,214,,,,,,214,,214,214,214,,,290,290',
'214,214,214,214,290,,,290,290,290,290,,290,,,,290,290,,290,290,290,',
',290,,290,290,,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,,290,,290,,',
',,,,,290,290,,,,290,,290,,,,,,,290,,,,,,290,,290,290,290,,,303,303,290',
'290,290,290,303,,,303,303,303,303,,303,,,,303,303,,303,303,303,,,303',
',303,303,,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,,303,,303,303,,',
'303,,,,303,303,,,,303,,303,,,,,,,303,,,,,,303,,303,303,303,,,357,357',
'303,303,303,303,357,,,357,357,357,357,,357,,,,357,357,,357,357,357,',
',357,,357,357,,357,357,357,357,357,357,357,357,357,357,357,357,357,357',
'357,357,357,357,357,357,357,357,357,357,357,357,357,357,,357,,357,,',
',,,,,357,357,,,,357,,357,,,,,,,357,,,,,,357,,357,357,357,,,407,407,357',
'357,357,357,407,,,407,407,407,407,,407,,,,407,407,,407,407,407,,,407',
',407,407,,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,,407,,407,407,,',
'407,,,,407,407,,,,407,,407,,,,,,,407,,,,,,407,,407,407,407,,,408,408',
'407,407,407,407,408,,,408,408,408,408,,408,,,,408,408,,408,408,408,',
',408,,408,408,,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,,408,,408,408',
',,408,,,,408,408,,,,408,,408,,,,,,,408,,,,,,408,,408,408,408,,,425,425',
'408,408,408,408,425,,,425,425,425,425,,425,,,,425,425,,425,425,425,',
',425,,425,425,,425,425,425,425,425,425,425,425,425,425,425,425,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,425,425,,425,,425,,',
',,,,,425,425,,,,425,,425,,,,,,,425,,,,,,425,,425,425,425,,,426,426,425',
'425,425,425,426,,,426,426,426,426,,426,,,,426,426,,426,426,426,,,426',
',426,426,,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,,426,,426,,,,,,',
',426,426,,,,426,,426,,,,,,,426,,,,,,426,,426,426,426,,,427,427,426,426',
'426,426,427,,,427,427,427,427,,427,,,,427,427,,427,427,427,,,427,,427',
'427,,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,,427,,427,427,,,427',
'27,27,27,427,427,,,,427,27,427,,,27,,,,427,,27,,,,427,,427,427,427,',
',,,427,427,427,427,,,,,,,,,,29,29,29,,27,,27,,27,29,,,,29,,,27,27,,29',
',27,,27,,,,,,,27,,,,,,27,,27,27,27,,,,,27,27,27,27,29,,29,,29,30,30',
'30,,,,,29,29,30,,,29,30,29,,,,,30,,29,,,,,,29,,29,29,29,,,,,29,29,29',
'29,,,,,,31,31,31,,30,,30,,30,31,,,,31,,,30,30,,31,,30,,30,,,,,,,,,,',
',,,,30,30,30,,,,,30,30,30,30,31,,31,,31,61,61,61,,,,,31,31,61,,,31,61',
'31,,,,,61,,31,,,,,,31,,31,31,31,,,,,31,31,31,31,,,,,,65,65,65,,61,,61',
',61,65,,,,65,,,61,61,,65,,61,,61,,,,,,,,,,,,,61,,61,61,61,,,,,61,61',
'61,61,65,,65,,65,66,66,66,,,,,65,65,66,,,65,66,65,,,,,66,,65,,,,,,65',
',65,65,65,,,,,65,65,65,65,,,,,,67,67,67,,66,,66,,66,67,,,,67,,,66,66',
',67,,66,,66,,,,,,,66,,,,,,66,,66,66,66,,,,,66,66,66,66,67,,67,,67,68',
'68,68,,,270,,67,67,68,,,67,68,67,,,,,68,,,270,270,270,270,270,270,,67',
'67,67,,,,,67,67,67,67,270,270,270,270,270,69,69,69,,68,,68,,68,69,,',
',69,,,68,68,,69,,68,,68,,,,,,,,,,,,,,,68,68,68,,,,,68,68,68,68,69,,69',
',69,109,109,109,,,,,69,69,109,,,69,109,69,,,,,109,,,262,262,262,262',
'262,262,,69,69,69,,,,,69,69,69,69,262,262,262,262,262,128,128,128,,109',
',109,,109,128,,,,128,,,109,109,,128,,109,,109,,,,,,,109,,,,,,109,,109',
'109,109,,,,,109,109,109,109,128,,128,,128,132,132,132,,,,,128,128,132',
',,128,132,128,,,,,132,,,263,263,263,263,263,263,,128,128,128,,,,,128',
'128,128,128,263,263,263,263,263,133,133,133,,132,,132,,132,133,,,,133',
',,132,132,,133,,132,,132,,,,,,,132,,,,,,132,,132,132,132,,,,,132,132',
'132,132,133,,133,,133,137,137,137,,,,,133,133,137,,,133,137,133,,,,',
'137,,133,,,,,,133,,133,133,133,,,,,133,133,133,133,,,,,,143,143,143',
',137,,137,,137,143,,,,143,,,137,137,,143,,137,,137,,,,,,,137,,,,,,137',
',137,137,137,,,,,137,137,137,137,143,,143,,143,146,146,146,,,,,143,143',
'146,,,143,146,143,,,,,146,,143,,,,,,143,,143,143,143,,,,,143,143,143',
'143,,,,,,147,147,147,,146,,146,,146,147,,,,147,,,146,146,,147,,146,',
'146,,,,,,,146,,,,,,146,,146,146,146,,,,,146,146,146,146,147,,147,,147',
'148,148,148,,,,,147,147,148,,,147,148,147,,,,,148,,147,,,,,,147,,147',
'147,147,,,,,147,147,147,147,,,,,,149,149,149,,148,,148,,148,149,,,,149',
',,148,148,,149,,148,,148,,,,,,,148,,,,,,148,,148,148,148,,,,,148,148',
'148,148,149,,149,,149,151,151,151,,,,,149,149,151,,,149,151,149,,,,',
'151,,149,,,,,,149,,149,149,149,,,,,149,149,149,149,,,,,,152,152,152',
',151,,151,,151,152,,,,152,,,151,151,,152,,151,,151,,,,,,,151,,,,,,151',
',151,151,151,,,,,151,151,151,151,152,,152,,152,156,156,156,,,,,152,152',
'156,,,152,156,152,,,,,156,,152,,,,,,152,,152,152,152,,,,,152,152,152',
'152,,,,,,159,159,159,,,178,156,,156,159,,,,159,,,156,156,,159,,156,178',
'178,178,178,178,178,,178,178,178,178,178,,,,,156,156,178,178,178,178',
'178,,156,156,156,159,,159,178,159,160,160,160,,,,,159,159,160,,,159',
'160,159,,,,,160,,,264,264,264,264,264,264,,159,159,159,,,,,159,159,159',
'159,264,264,264,264,264,161,161,161,,160,,160,,160,161,,,,161,,,160',
'160,,161,,160,,160,,,,,,,,,,,,,,,160,160,160,,,,,160,160,160,160,161',
',161,,161,162,162,162,,,,,161,161,162,,,161,162,161,,,,,162,,,265,265',
'265,265,265,265,,161,161,161,,,,,161,161,161,161,265,265,265,265,265',
'163,163,163,,162,,162,,162,163,,,,163,,,162,162,,163,,162,,162,,,,,',
',,,,,,,,,162,162,162,,,,,162,162,162,162,163,,163,,163,164,164,164,',
',,,163,163,164,,,163,164,163,,,,,164,,,266,266,266,266,266,266,,163',
'163,163,,,,,163,163,163,163,266,266,266,266,266,165,165,165,,164,,164',
',164,165,,,,165,,,164,164,,165,,164,,164,,,,,,,,,,,,,,,164,164,164,',
',,,164,164,164,164,165,,165,,165,166,166,166,,,,,165,165,166,,,165,166',
'165,,,,,166,,,403,403,403,403,403,403,,165,165,165,,,,,165,165,165,165',
'403,403,403,403,403,167,167,167,,166,,166,,166,167,,,,167,,,166,166',
',167,,166,,166,,,,,,,,,,,,,,,166,166,166,,,,,166,166,166,166,167,,167',
',167,168,168,168,,,,,167,167,168,,,167,168,167,,,,,168,,,404,404,404',
'404,404,404,,167,167,167,,,,,167,167,167,167,404,404,404,404,404,169',
'169,169,,168,,168,,168,169,,,,169,,,168,168,,169,,168,,168,,,,,,,,,',
',,,,,168,168,168,,,,,168,168,168,168,169,,169,,169,170,170,170,,,,,169',
'169,170,,,169,170,169,,,,,170,,,,,,,,,,169,169,169,,,,,169,169,169,169',
',,,,,171,171,171,,170,,170,,170,171,,,,171,,,170,170,,171,,170,,170',
',,,,,,,,,,,,,,170,170,170,,,,,170,170,170,170,171,,171,,171,172,172',
'172,,,,,171,171,172,,,171,172,171,,,,,172,,,,,,,,,,171,171,171,,,,,171',
'171,171,171,,,,,,173,173,173,,172,,172,,172,173,,,,173,,,172,172,,173',
',172,,172,,,,,,,,,,,,,,,172,172,172,,,,,172,172,172,172,173,,173,,173',
'174,174,174,,,,,173,173,174,,,173,174,173,,,,,174,,,,,,,,,,173,173,173',
',,,,173,173,173,173,,,,,,175,175,175,,174,,174,,174,175,,,,175,,,174',
'174,,175,,174,,174,,,,,,,,,,,,,,,174,174,174,,,,,174,174,174,174,175',
',175,,175,181,181,181,,,,,175,175,181,,,175,181,175,,,,,181,,,,,,,,',
',175,175,175,,,,,175,175,175,175,,,,,,227,227,227,,181,,181,,181,227',
',,,227,,,181,181,,227,,181,,181,,,,,,,,,,,,,,,181,181,181,,,,,181,181',
'181,181,227,,227,,227,316,316,316,,,,,227,227,316,,,227,316,227,,,,',
'316,,227,,,,,,227,,227,227,227,,,,,227,227,227,227,,,,,,318,318,318',
',316,,316,,316,318,,,,318,,,316,316,,318,,316,,316,,,,,,,316,,,,,,316',
',316,316,316,,,,,316,316,316,316,318,,318,,318,319,319,319,,,,,318,318',
'319,,,318,319,318,,,,,319,,318,,,,,,318,,318,318,318,,,,,318,318,318',
'318,,,,,,323,323,323,,319,,319,,319,323,,,,323,,,319,319,,323,,319,',
'319,,,,,,,319,,,,,,319,,319,319,319,,,,,319,319,319,319,,,323,,323,356',
'356,356,,,,,323,323,356,,,323,356,,,,,,356,,,,,,,,,,323,323,,,,,,,323',
'323,323,,,,,,359,359,359,,356,,356,,356,359,,,,359,,,356,356,,359,,356',
',356,,,,,,,356,,,,,,356,,356,356,356,,,,,356,356,356,356,359,,359,,359',
'360,360,360,,,,,359,359,360,,,359,360,359,,,,,360,,,,,,,,,,359,359,359',
',,,,359,359,359,359,,,,,,377,377,377,,360,,360,,360,377,,,,377,,,360',
'360,,377,,360,,360,397,397,397,,,,,,,397,,,,397,360,360,360,,,397,,360',
'360,360,360,,,377,,377,,,,,,,,377,377,,,,377,,,,,,,,,397,,397,,,,,,377',
'377,397,397,338,,,397,377,377,377,,,,,,,338,,338,,,,,397,397,,,,,,,397',
'397,397,,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338',
'338,338,338,338,338,338,338,338,338,338,338,338,192,,192,,,338,,,338',
',,,,,,,,,,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,196,,,,,,192,,,,,,,',
',,,,,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,207,,,,,,,,,,,,,,,,,207',
'207,207,207,207,207,,,207,207,207,207,,,,,,,207,207,207,207,207,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,,,,,,343,,,343,313,313,313,313,313',
'313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,313,,313,,,,,313,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291',
'291,,,,,291,394,394,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,394,394,394,394,394,394,,,,,394,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
'25,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62',
'62,62,62,62,62,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,410,410,410,130,130,130,130,130,130,,,130,130',
'130,130,,,,,,,130,130,130,130,130' ]
        racc_action_check = arr = ::Array.new(4741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   146,     9,    -2,   190,   nil,   nil,   nil,    22,   194,   nil,
   nil,     6,   198,   nil,   nil,   nil,   nil,    73,    14,    16,
    50,   -40,   nil,   nil,   102,  4521,   nil,  1710,   nil,  1755,
  1809,  1854,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,
   243,   247,   187,    -2,   nil,   104,   123,    12,   125,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   154,   159,
   nil,  1908,  4548,   358,   nil,  1953,  2007,  2052,  2106,  2151,
   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    95,   174,   192,  2205,
   -19,   206,   215,   215,   nil,   nil,    -5,   246,   nil,   nil,
   246,   252,   nil,   244,   nil,   283,    -4,   340,  2250,   nil,
  4638,   -11,  2304,  2349,   488,   585,   309,  2403,     0,   309,
   297,   nil,     5,  2448,   nil,   321,  2502,  2547,  2601,  2646,
   nil,  2700,  2745,   325,   nil,   nil,  2799,   nil,   nil,  2844,
  2898,  2943,  2997,  3042,  3096,  3141,  3195,  3240,  3294,  3339,
  3393,  3438,  3492,  3537,  3591,  3636,   nil,    95,  2799,   357,
   352,  3690,   nil,   nil,  4575,   nil,   381,   nil,   269,   394,
  4602,   425,  4274,   nil,   428,  4629,  4320,   450,    87,   446,
   nil,    98,   682,   nil,   nil,   779,   459,  4319,   485,   487,
   nil,   nil,   nil,   nil,   876,   nil,   469,   249,   561,   565,
   551,   nil,   277,    12,   nil,   nil,   nil,  3735,   nil,   518,
   517,   nil,   nil,   310,   505,   nil,   322,    56,   338,   258,
   373,   388,   397,   402,   269,   nil,   429,   nil,    99,    -7,
   259,   368,   503,   504,   512,   513,   328,   316,   403,   669,
   766,   248,  2160,  2259,  2853,  2952,  3051,   nil,   nil,   nil,
  2061,   nil,   nil,   261,   514,   nil,   284,   538,   nil,   nil,
   nil,   nil,   nil,   509,   312,   nil,   nil,   nil,   nil,   540,
   973,  4457,   nil,   nil,   nil,   547,   510,   610,   nil,   468,
   469,   611,   nil,  1070,   nil,   613,   156,   nil,   553,   nil,
   562,   472,   138,  4423,   nil,   nil,  3789,   nil,  3834,  3888,
   nil,   574,   586,  3933,   564,   nil,   104,   nil,   321,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   589,  4228,   nil,
   203,   nil,   654,  4387,   590,   nil,   -55,   nil,   658,   109,
   nil,   596,   577,   632,   664,   nil,  3987,  1167,   nil,  4032,
  4086,   nil,   663,   nil,   640,   nil,   337,   404,   607,   nil,
   110,   nil,   nil,   478,   480,   482,   nil,  4131,   599,   nil,
   nil,   289,   669,   358,   nil,   nil,   612,   nil,   nil,   nil,
   nil,   593,   nil,   609,  4489,   591,   nil,  4155,   611,   nil,
   nil,    -2,   nil,  3150,  3249,   nil,   405,  1264,  1361,   618,
  4656,   nil,   113,   nil,   nil,   nil,   nil,   409,   nil,   nil,
   212,   nil,   nil,   nil,   612,  1458,  1555,  1652,   nil,   nil,
   nil,   nil,   403,   622,   nil,   690,   571,   nil,   nil,   632,
   nil,   nil,   nil ]

racc_action_default = [
  -248,  -259,    -7,  -249,  -250,  -252,  -253,  -259,  -248,    -2,
    -4,  -259,  -259,    -8,   -10,   -11,   -12,   -13,  -259,  -259,
  -259,  -259,   -60,   -61,   -69,  -259,   -75,  -246,   -77,  -259,
  -259,  -259,   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,
  -259,  -259,  -259,  -188,  -127,  -210,  -196,  -210,  -204,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -254,  -254,
  -164,  -259,  -259,  -169,  -170,  -259,  -259,  -259,  -259,  -259,
  -197,  -198,  -200,  -259,  -202,  -203,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,
  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -241,  -242,
  -243,  -244,  -245,  -251,   443,    -1,  -249,  -259,    -6,  -259,
   -26,   -29,  -259,  -259,   -53,   -54,  -259,  -259,  -127,   -76,
  -247,  -188,  -196,  -210,  -204,  -210,  -259,  -259,  -259,  -104,
  -259,  -259,  -259,  -259,   -72,   -72,  -259,  -259,  -259,  -117,
  -120,  -121,  -259,  -259,  -199,  -259,  -212,  -216,  -259,  -259,
  -207,  -259,  -129,  -255,  -256,  -258,  -147,  -165,  -127,  -259,
  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,  -259,  -259,  -259,  -259,  -259,  -171,  -259,  -169,  -170,
  -184,  -259,  -185,  -186,  -259,    -3,  -259,    -9,   -79,  -259,
  -259,  -259,   -33,   -30,  -259,   -46,  -259,  -156,  -154,  -259,
   -70,  -259,   -72,  -111,  -112,   -72,  -259,  -259,  -259,  -259,
  -107,  -108,  -109,  -110,   -72,  -166,  -167,  -248,   -73,  -259,
   -93,  -101,  -102,  -154,  -208,  -209,  -127,  -259,  -127,   -43,
  -124,  -125,  -128,  -132,  -206,  -205,  -213,  -259,  -217,  -259,
  -133,  -134,  -135,  -130,  -259,  -257,  -254,  -148,  -259,  -259,
  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,
  -183,  -189,  -190,  -191,  -192,  -193,  -194,  -172,  -187,  -195,
  -259,  -127,    -5,   -14,   -26,   -27,  -259,  -259,   -34,   -36,
   -37,   -38,  -127,  -259,  -248,   -47,  -127,   -52,  -127,  -259,
   -72,  -259,  -152,  -153,  -155,   -43,  -113,  -259,  -103,  -259,
  -259,  -259,   -71,  -249,   -90,  -259,   -97,   -94,  -259,  -118,
  -119,  -126,  -259,  -127,  -123,  -211,  -259,  -215,  -259,  -259,
  -145,  -259,  -254,  -259,  -259,  -168,  -259,   -15,  -248,   -17,
   -18,   -19,   -20,   -21,   -22,   -23,  -259,  -259,  -259,   -31,
  -259,   -32,  -259,  -249,   -49,   -51,   -55,  -127,  -259,  -259,
  -158,  -259,  -162,   -64,  -259,  -114,  -259,   -72,   -80,  -259,
  -259,   -81,   -74,   -91,   -99,   -95,  -259,  -259,  -259,   -41,
  -259,  -127,   -68,  -214,  -218,  -131,  -146,  -259,  -150,  -151,
  -201,  -249,  -259,   -14,   -28,   -35,   -43,   -45,   -48,  -127,
  -127,   -56,   -62,  -259,  -259,  -162,  -161,  -259,  -259,   -65,
   -78,  -259,  -116,  -105,  -106,   -92,  -259,   -72,   -72,   -43,
  -127,   -44,   -66,   -67,  -149,   -16,   -24,  -259,   -39,   -50,
   -58,  -157,  -159,  -160,  -163,   -72,   -72,   -72,   -98,   -96,
  -122,   -42,  -259,  -259,   -59,  -259,  -113,  -100,   -25,   -43,
   -63,  -115,   -57 ]

racc_goto_table = [
    43,     3,   280,   140,   103,   202,   189,   118,    17,   106,
     2,    47,   201,   108,   152,   156,   247,   141,   105,   328,
   354,   193,     9,   278,   314,   285,   129,   350,   369,   415,
   150,   396,   307,   197,     1,    46,     8,   334,   187,   192,
   276,   134,   135,   370,   158,   284,   344,   113,   287,   433,
   116,   335,   249,   290,   398,   224,   119,   127,    14,   305,
   219,   220,   306,   364,   405,   359,   360,   139,   368,   244,
   246,   323,   349,   157,   423,   195,   179,   235,   237,   239,
   415,   nil,   nil,   332,   nil,   nil,   nil,   nil,    15,   204,
   353,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,   nil,    43,   103,   150,   103,
   nil,   nil,    17,   nil,    17,    47,   245,    47,   365,   130,
   nil,   nil,   312,   nil,   206,   431,   185,   nil,   296,   417,
   422,   297,    43,    43,   nil,   103,   103,   nil,   nil,    46,
   301,    46,   nil,    47,    47,   334,   nil,   334,   280,   nil,
   nil,   281,   273,   nil,   248,   178,   180,   182,   183,   335,
   441,   335,    14,   nil,    14,   326,   271,    46,    46,   385,
   337,   225,   274,   388,   282,   231,   340,   286,   288,   nil,
   nil,   418,   346,   nil,   nil,   310,   120,   339,   126,   nil,
   131,   332,    15,   332,    15,    16,   334,    16,   nil,   309,
    43,   nil,   321,    43,   430,   nil,   nil,   nil,   nil,   nil,
   335,    47,    43,   nil,    47,   nil,   348,   207,   303,   nil,
   nil,   nil,   nil,    47,   176,   177,   nil,   302,   nil,   nil,
   nil,   nil,   333,   nil,   442,    46,   nil,   414,    46,   nil,
   nil,   391,   332,   nil,   nil,   345,   nil,    46,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,   412,   nil,   nil,   188,   nil,
   270,   336,   nil,   351,   nil,   nil,   nil,   338,   377,   nil,
   426,   nil,   nil,   402,   420,   343,   nil,   nil,    43,   nil,
   nil,   215,   216,   nil,   342,   371,   222,   281,   nil,    47,
   383,    43,   233,   nil,   103,   236,   238,   240,   241,   362,
   242,   243,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   282,   378,   nil,    46,   nil,   286,   nil,   nil,   nil,   381,
   413,   nil,   nil,   428,   429,   nil,    46,   nil,   382,   103,
   333,   nil,   333,   nil,   103,   231,   nil,   nil,   419,   nil,
   nil,   435,   436,   437,   nil,    43,   421,   nil,   nil,   nil,
   nil,   425,   nil,   nil,   204,   nil,    47,   407,   408,   nil,
   nil,   nil,   nil,   nil,   nil,   248,   351,   nil,   nil,   336,
   nil,   336,   103,   nil,   nil,   nil,   311,   nil,   nil,   nil,
    46,   333,   371,   nil,   nil,   424,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    43,   427,   103,   103,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,   432,   nil,
   nil,   nil,   nil,    43,    43,    43,   nil,   nil,   103,   nil,
   336,   nil,   nil,   103,    47,    47,    47,   nil,   nil,   nil,
    46,    46,   nil,   nil,   nil,   231,   nil,   nil,   403,   404,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   373,   nil,   374,   375,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   401 ]

racc_goto_check = [
    60,     5,    15,    34,    88,    50,    19,    21,    12,     5,
     2,    71,    27,     5,    73,    73,    75,    67,     2,    13,
    51,    24,     4,    25,    28,    32,    61,    78,    30,    14,
    84,    79,    59,    41,     1,    69,     3,    17,     8,    22,
    23,     5,     5,    29,    21,    31,    33,    35,    36,    37,
    40,    18,    27,    42,    44,    41,    47,    52,     9,    55,
    43,    43,    56,    57,    58,    63,    64,    66,    68,    70,
    74,    76,    77,    80,    79,    20,    82,    83,    86,    87,
    14,   nil,   nil,    15,   nil,   nil,   nil,   nil,    10,    20,
    28,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    60,   nil,    60,    88,    84,    88,
   nil,   nil,    12,   nil,    12,    71,    20,    71,    59,    62,
   nil,   nil,    27,   nil,    61,    30,     4,   nil,    43,    13,
    78,    43,    60,    60,   nil,    88,    88,   nil,   nil,    69,
    43,    69,   nil,    71,    71,    17,   nil,    17,    15,   nil,
   nil,    16,    20,   nil,    60,    62,    62,    62,    62,    18,
    51,    18,     9,   nil,     9,    27,    21,    69,    69,    25,
    19,    69,    21,    32,    21,    69,    27,    21,    21,   nil,
   nil,    28,    27,   nil,   nil,    34,    49,    24,    49,   nil,
    49,    15,    10,    15,    10,    11,    17,    11,   nil,    67,
    60,   nil,    73,    60,    28,   nil,   nil,   nil,   nil,   nil,
    18,    71,    60,   nil,    71,   nil,    43,    62,     5,   nil,
   nil,   nil,   nil,    71,    49,    49,   nil,     2,   nil,   nil,
   nil,   nil,    16,   nil,    28,    69,   nil,    75,    69,   nil,
   nil,    27,    15,   nil,   nil,    34,   nil,    69,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    27,   nil,   nil,    49,   nil,
    62,    60,   nil,    21,   nil,   nil,   nil,     5,    73,   nil,
    50,   nil,   nil,    43,    27,     5,   nil,   nil,    60,   nil,
   nil,    49,    49,   nil,     2,    21,    49,    16,   nil,    71,
    20,    60,    49,   nil,    88,    49,    49,    49,    49,    12,
    49,    49,    71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    60,   nil,    69,   nil,    21,   nil,   nil,   nil,     5,
    34,   nil,   nil,    43,    43,   nil,    69,   nil,     2,    88,
    16,   nil,    16,   nil,    88,    69,   nil,   nil,    34,   nil,
   nil,    43,    43,    43,   nil,    60,    20,   nil,   nil,   nil,
   nil,    20,   nil,   nil,    20,   nil,    71,     5,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    60,    21,   nil,   nil,    60,
   nil,    60,    88,   nil,   nil,   nil,    49,   nil,   nil,   nil,
    69,    16,    21,   nil,   nil,    60,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    60,    60,     5,    88,    88,
   nil,   nil,   nil,   nil,   nil,   nil,    71,    71,     5,   nil,
   nil,   nil,   nil,    60,    60,    60,   nil,   nil,    88,   nil,
    60,   nil,   nil,    88,    71,    71,    71,   nil,   nil,   nil,
    69,    69,   nil,   nil,   nil,    69,   nil,   nil,    62,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,    69,
    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,    49,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49 ]

racc_goto_pointer = [
   nil,    34,    10,    34,    20,     1,   nil,   nil,   -70,    56,
    86,    89,     6,  -254,  -352,  -190,   -41,  -236,  -222,  -104,
   -37,   -18,   -72,  -152,   -90,  -169,   nil,  -106,  -205,  -270,
  -285,  -150,  -170,  -240,   -41,    26,  -148,  -371,   nil,   nil,
    26,   -83,  -144,   -74,  -299,   nil,   nil,    29,   nil,   159,
  -121,  -276,    27,   nil,   nil,  -161,  -158,  -243,  -300,  -188,
    -2,    -4,    89,  -234,  -234,   nil,    23,   -27,  -244,    33,
   -83,     9,   nil,   -44,   -86,  -140,  -177,  -219,  -264,  -321,
    12,   nil,    10,   -68,   -17,   nil,   -68,   -68,     1,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    12,    13,   329,
   330,   331,   218,   nil,   327,    33,    35,    32,    34,   nil,
   154,    44,   nil,   nil,   nil,   nil,   279,   142,   nil,   nil,
   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,    22,    23,
   nil,   nil,   nil,   nil,   nil,   217,    26,   nil,    28,    36,
   nil,   nil,   nil,    38,    39,   nil,   nil,   nil,   nil,   nil,
   121,   nil,    63,   208,   209,   355,   nil,   nil,   229,   122,
   nil,   125,    71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    60,    61,    64,    70,   144,    72,   nil,   nil,     4,   153 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 112, :_reduce_1,
  1, 114, :_reduce_2,
  3, 114, :_reduce_3,
  1, 115, :_reduce_4,
  4, 115, :_reduce_5,
  2, 115, :_reduce_6,
  0, 118, :_reduce_7,
  1, 118, :_reduce_8,
  3, 118, :_reduce_9,
  1, 119, :_reduce_10,
  1, 119, :_reduce_11,
  1, 119, :_reduce_12,
  1, 119, :_reduce_13,
  0, 124, :_reduce_14,
  1, 124, :_reduce_15,
  3, 124, :_reduce_16,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  7, 121, :_reduce_24,
  9, 122, :_reduce_25,
  0, 130, :_reduce_26,
  2, 130, :_reduce_27,
  6, 117, :_reduce_28,
  0, 133, :_reduce_29,
  1, 133, :_reduce_30,
  3, 133, :_reduce_31,
  3, 135, :_reduce_32,
  0, 134, :_reduce_33,
  1, 134, :_reduce_34,
  3, 134, :_reduce_35,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  4, 137, :_reduce_39,
  0, 140, :_reduce_40,
  1, 140, :_reduce_41,
  3, 140, :_reduce_42,
  0, 139, :_reduce_43,
  3, 139, :_reduce_44,
  6, 126, :_reduce_45,
  0, 142, :_reduce_46,
  1, 142, :_reduce_47,
  3, 142, :_reduce_48,
  2, 143, :_reduce_49,
  3, 144, :_reduce_50,
  1, 144, :_reduce_51,
  4, 127, :_reduce_52,
  1, 146, :_reduce_none,
  1, 146, :_reduce_54,
  2, 147, :_reduce_55,
  3, 147, :_reduce_56,
  7, 147, :_reduce_57,
  0, 148, :_reduce_58,
  1, 148, :_reduce_59,
  1, 120, :_reduce_60,
  1, 120, :_reduce_61,
  6, 149, :_reduce_62,
  9, 150, :_reduce_63,
  0, 155, :_reduce_64,
  1, 155, :_reduce_65,
  2, 141, :_reduce_66,
  2, 141, :_reduce_67,
  1, 141, :_reduce_68,
  0, 151, :_reduce_69,
  2, 151, :_reduce_70,
  2, 154, :_reduce_71,
  0, 156, :_reduce_72,
  1, 156, :_reduce_73,
  3, 156, :_reduce_74,
  1, 123, :_reduce_75,
  2, 123, :_reduce_76,
  1, 123, :_reduce_77,
  6, 123, :_reduce_78,
  3, 123, :_reduce_79,
  5, 123, :_reduce_80,
  5, 123, :_reduce_81,
  1, 123, :_reduce_82,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_86,
  1, 123, :_reduce_87,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  4, 165, :_reduce_90,
  5, 164, :_reduce_91,
  3, 166, :_reduce_92,
  0, 167, :_reduce_93,
  1, 167, :_reduce_94,
  2, 167, :_reduce_95,
  4, 170, :_reduce_96,
  0, 168, :_reduce_97,
  3, 168, :_reduce_98,
  0, 169, :_reduce_99,
  3, 169, :_reduce_100,
  3, 129, :_reduce_101,
  3, 128, :_reduce_102,
  3, 163, :_reduce_103,
  1, 163, :_reduce_none,
  5, 172, :_reduce_105,
  5, 172, :_reduce_106,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  0, 162, :_reduce_113,
  1, 162, :_reduce_114,
  5, 162, :_reduce_115,
  2, 176, :_reduce_116,
  2, 157, :_reduce_117,
  3, 177, :_reduce_118,
  3, 177, :_reduce_119,
  1, 177, :_reduce_120,
  1, 177, :_reduce_121,
  6, 145, :_reduce_122,
  3, 145, :_reduce_123,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  3, 178, :_reduce_126,
  0, 138, :_reduce_127,
  2, 138, :_reduce_128,
  0, 181, :_reduce_129,
  1, 181, :_reduce_130,
  3, 181, :_reduce_131,
  3, 159, :_reduce_132,
  3, 159, :_reduce_133,
  3, 159, :_reduce_134,
  3, 159, :_reduce_135,
  1, 183, :_reduce_136,
  1, 183, :_reduce_137,
  1, 183, :_reduce_138,
  1, 183, :_reduce_139,
  1, 183, :_reduce_140,
  1, 183, :_reduce_141,
  1, 183, :_reduce_142,
  1, 183, :_reduce_143,
  1, 183, :_reduce_144,
  4, 183, :_reduce_145,
  5, 183, :_reduce_146,
  0, 185, :_reduce_147,
  1, 185, :_reduce_148,
  4, 185, :_reduce_149,
  3, 186, :_reduce_150,
  2, 187, :_reduce_none,
  2, 152, :_reduce_152,
  2, 152, :_reduce_153,
  1, 152, :_reduce_154,
  2, 152, :_reduce_155,
  0, 153, :_reduce_156,
  4, 153, :_reduce_157,
  1, 188, :_reduce_158,
  3, 188, :_reduce_159,
  3, 189, :_reduce_160,
  2, 189, :_reduce_161,
  0, 190, :_reduce_162,
  2, 190, :_reduce_163,
  1, 160, :_reduce_164,
  2, 160, :_reduce_165,
  3, 160, :_reduce_166,
  3, 160, :_reduce_167,
  4, 192, :_reduce_168,
  1, 191, :_reduce_169,
  1, 191, :_reduce_170,
  2, 191, :_reduce_171,
  3, 191, :_reduce_172,
  3, 173, :_reduce_173,
  3, 173, :_reduce_174,
  3, 173, :_reduce_175,
  3, 173, :_reduce_176,
  3, 173, :_reduce_177,
  3, 173, :_reduce_178,
  3, 173, :_reduce_179,
  3, 173, :_reduce_180,
  3, 173, :_reduce_181,
  3, 173, :_reduce_182,
  3, 173, :_reduce_183,
  2, 173, :_reduce_184,
  2, 173, :_reduce_185,
  2, 173, :_reduce_186,
  3, 173, :_reduce_187,
  1, 173, :_reduce_188,
  3, 193, :_reduce_189,
  3, 193, :_reduce_190,
  3, 193, :_reduce_191,
  3, 193, :_reduce_192,
  3, 193, :_reduce_193,
  3, 193, :_reduce_194,
  3, 193, :_reduce_195,
  1, 171, :_reduce_196,
  1, 171, :_reduce_none,
  1, 171, :_reduce_198,
  2, 171, :_reduce_199,
  1, 171, :_reduce_none,
  5, 171, :_reduce_201,
  1, 171, :_reduce_202,
  1, 171, :_reduce_203,
  1, 171, :_reduce_204,
  3, 194, :_reduce_205,
  3, 194, :_reduce_206,
  2, 196, :_reduce_207,
  3, 182, :_reduce_208,
  3, 182, :_reduce_209,
  0, 195, :_reduce_210,
  3, 195, :_reduce_211,
  0, 197, :_reduce_212,
  1, 197, :_reduce_213,
  3, 197, :_reduce_214,
  4, 180, :_reduce_215,
  0, 198, :_reduce_216,
  1, 198, :_reduce_217,
  3, 198, :_reduce_218,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_245,
  0, 158, :_reduce_246,
  1, 158, :_reduce_none,
  0, 113, :_reduce_248,
  1, 113, :_reduce_249,
  1, 116, :_reduce_250,
  2, 116, :_reduce_251,
  1, 199, :_reduce_252,
  1, 199, :_reduce_none,
  0, 184, :_reduce_254,
  1, 184, :_reduce_none,
  1, 200, :_reduce_none,
  2, 200, :_reduce_none,
  1, 131, :_reduce_258 ]

racc_reduce_n = 259

racc_shift_n = 443

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kNO_GIL => 33,
  :kREQUIRE_RUBEX => 34,
  :kDTYPE_UINT => 35,
  :kDTYPE_LINT => 36,
  :kDTYPE_LLINT => 37,
  :kDTYPE_CHAR => 38,
  :kDTYPE_I8 => 39,
  :kDTYPE_I16 => 40,
  :kDTYPE_I32 => 41,
  :kDTYPE_I64 => 42,
  :kDTYPE_UI8 => 43,
  :kDTYPE_UI16 => 44,
  :kDTYPE_UI32 => 45,
  :kDTYPE_UI64 => 46,
  :kDTYPE_INT => 47,
  :kDTYPE_F32 => 48,
  :kDTYPE_F64 => 49,
  :kDTYPE_LF64 => 50,
  :kDTYPE_ROBJ => 51,
  :kDTYPE_ULINT => 52,
  :kDTYPE_ULLINT => 53,
  :kDTYPE_VOID => 54,
  :kDTYPE_SIZE_T => 55,
  :kDTYPE_RB_STR => 56,
  :kDTYPE_UCHAR => 57,
  :kDTYPE_BOOL => 58,
  :tCUSTOM_DTYPE => 59,
  :kDTYPE_RB_ARR => 60,
  :kDTYPE_RB_HSH => 61,
  :tLPAREN => 62,
  :tRPAREN => 63,
  :tLSQUARE => 64,
  :tRSQUARE => 65,
  :tIDENTIFIER => 66,
  :tNL => 67,
  :tCOMMA => 68,
  :tSQUOTE => 69,
  :tSCOLON => 70,
  :EOF => 71,
  :tDOT => 72,
  :tQMARK => 73,
  :tSYMBOL => 74,
  :tLBRACE => 75,
  :tRBRACE => 76,
  :tCOLON => 77,
  :tCOLON2 => 78,
  :tINSTANCE_VAR => 79,
  :tPLUS => 80,
  :tMINUS => 81,
  :tSTAR => 82,
  :tDIVIDE => 83,
  :tEXPO => 84,
  :tMODULUS => 85,
  :tASSIGN => 86,
  :tEQ => 87,
  :tLT => 88,
  :tLTEQ => 89,
  :tGT => 90,
  :tGTEQ => 91,
  :tANDOP => 92,
  :tOROP => 93,
  :tBANG => 94,
  :tOP_ASSIGN => 95,
  :tSTRING => 96,
  :kSIZEOF => 97,
  :tBIT_AND => 98,
  :tBIT_OR => 99,
  :tBIT_XOR => 100,
  :tBIT_LSHIFT => 101,
  :tBIT_RSHIFT => 102,
  :tBIT_NOT => 103,
  :tINTEGER => 104,
  :tFLOAT => 105,
  :tSINGLE_CHAR => 106,
  :ADDRESS_OF => 107,
  :TYPECAST => 108,
  :UMINUS => 109,
  :tNEQ => 110 }

racc_nt_base = 111

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kNO_GIL",
  "kREQUIRE_RUBEX",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tINSTANCE_VAR",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "stmt",
  "klass_stmts",
  "klass_stmt",
  "struct_or_union_def",
  "alias_stmt",
  "op_assign",
  "forward_declaration",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_c_func_tags",
  "stmts",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "begin_block",
  "no_gil_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "opt_array_args",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_1(val, _values, result)
            if @is_inside_file_node
          result = Node::FileNode.new(val[1], @file_name)
        else
          result = Node::MainNode.new(val[1], @file_name)
        end      
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_5(val, _values, result)
            result = parse_required_file_and_load_ast(val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_7(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_13(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_14(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_16(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_24(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_25(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_26(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_27(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_28(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_29(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_31(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_32(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_33(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_34(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_39(val, _values, result)
            if !val[3].empty? # function decl
          # HACK: because declared external C functions don't have
          #   implicit self argument.
          val[3].pop
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_40(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_41(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_42(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_43(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_44(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_45(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_46(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_47(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_48(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_49(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_50(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_51(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_52(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_55(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_56(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_57(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_58(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_59(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_61(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_62(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_63(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end

        # remove VALUE self argument if no_gil function.
        val[4].pop if val[5] == "no_gil"
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[5], val[7])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_64(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_65(val, _values, result)
     result = "no_gil" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_67(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_68(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_69(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_70(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_72(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_73(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_74(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_75(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_77(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_78(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_79(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_80(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_81(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_82(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_86(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_87(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_90(val, _values, result)
     result = Statement::NoGilBlock.new val[2]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_91(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_92(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_93(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_95(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_96(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_97(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_98(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_99(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 397)
  def _reduce_100(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_101(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_102(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_105(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_106(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_115(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_116(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_117(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_118(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_122(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_123(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_126(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_127(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_128(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_130(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_131(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_132(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_133(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_134(val, _values, result)
            result = {
          name: Expression::CommandCall.new(
            val[0][0], val[0][1], Expression::ActualArgList.new([])),
          value: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_135(val, _values, result)
            result = {
          name: Expression::InstanceVar.new(val[0]),
          value: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_136(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_137(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_138(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_139(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_140(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_141(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_142(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_143(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_144(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_145(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_146(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_147(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_148(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_149(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_150(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_152(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_153(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 569)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_155(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_156(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_157(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_158(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_159(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_160(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_161(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_162(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_165(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_168(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_170(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_171(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 633)
  def _reduce_172(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 642)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 644)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_182(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_183(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_184(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_185(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 649)
  def _reduce_186(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 650)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_188(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_189(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 655)
  def _reduce_190(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 656)
  def _reduce_191(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 657)
  def _reduce_192(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_193(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_194(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 660)
  def _reduce_195(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_196(val, _values, result)
    
    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.racc', 665)
  def _reduce_198(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_199(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 200 omitted

module_eval(<<'.,.,', 'parser.racc', 679)
  def _reduce_201(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 681)
  def _reduce_202(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 684)
  def _reduce_203(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::ActualArgList.new([Expression::Literal::Int.new('0')]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_204(val, _values, result)
     result = Expression::InstanceVar.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 692)
  def _reduce_205(val, _values, result)
            result = Expression::Colon2.new(val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 696)
  def _reduce_206(val, _values, result)
          result = Expression::Colon2.new(val[0], val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_207(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 709)
  def _reduce_208(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 713)
  def _reduce_209(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 717)
  def _reduce_210(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 720)
  def _reduce_211(val, _values, result)
          result = Expression::ActualArgList.new(val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 724)
  def _reduce_212(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 725)
  def _reduce_213(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 726)
  def _reduce_214(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 731)
  def _reduce_215(val, _values, result)
            result = Expression::ElementRef.new(
          val[0],
          Expression::ActualArgList.new(val[2])
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 738)
  def _reduce_216(val, _values, result)
     result = nil  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 739)
  def _reduce_217(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 740)
  def _reduce_218(val, _values, result)
     result = [*val[0], val[2]]  
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.racc', 750)
  def _reduce_245(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 754)
  def _reduce_246(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'parser.racc', 758)
  def _reduce_248(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 759)
  def _reduce_249(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 762)
  def _reduce_250(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 763)
  def _reduce_251(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 766)
  def _reduce_252(val, _values, result)
    
    result
  end
.,.,

# reduce 253 omitted

module_eval(<<'.,.,', 'parser.racc', 770)
  def _reduce_254(val, _values, result)
    
    result
  end
.,.,

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

module_eval(<<'.,.,', 'parser.racc', 778)
  def _reduce_258(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
