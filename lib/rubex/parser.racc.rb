#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 737)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'117,118,120,277,65,277,216,121,217,74,143,144,145,19,74,87,97,7,5,147',
'133,6,128,129,163,130,132,25,214,122,98,164,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,73,148',
'71,136,71,296,66,210,106,98,5,146,149,6,29,105,157,374,367,373,30,217',
'288,152,330,203,204,203,204,155,94,142,162,158,216,117,118,120,159,139',
'140,141,121,203,204,143,144,145,19,95,87,203,204,31,147,133,219,128',
'129,163,130,132,5,33,122,6,164,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,94,148,22,136,5,203,204',
'6,176,210,181,146,149,253,183,69,157,19,254,95,18,23,98,152,71,379,394',
'401,98,155,209,142,162,158,17,117,118,120,159,139,140,141,121,98,98',
'143,144,145,19,362,87,183,75,5,147,133,6,128,129,163,130,132,203,204',
'122,98,164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,60,61,156,415,148,22,136,5,71,181,6,340,79,183,146',
'149,339,98,350,157,19,203,204,349,23,350,152,98,350,216,349,217,155',
'349,142,162,158,17,117,118,120,159,139,140,141,121,88,366,143,144,145',
'19,349,87,203,204,5,147,133,6,128,129,163,130,132,5,93,122,6,164,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58',
'59,60,61,156,96,148,22,136,66,227,228,229,230,231,232,146,149,203,204',
'5,157,19,6,5,69,23,6,152,234,235,107,5,169,155,6,142,162,158,17,117',
'118,120,159,139,140,141,121,203,204,143,144,145,19,5,87,71,6,369,147',
'133,368,128,129,163,130,132,5,177,122,6,164,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,178,148',
'180,136,227,228,229,230,231,232,5,146,149,6,203,204,157,227,228,229',
'230,231,232,152,229,230,231,232,185,155,188,142,162,158,196,117,118',
'120,159,139,140,141,121,203,204,143,144,145,19,5,87,196,6,196,147,133',
'208,128,129,163,130,132,203,204,122,218,164,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,71,148',
'71,136,229,230,231,232,203,204,252,146,149,71,371,255,157,385,386,284',
'285,286,287,152,203,204,203,204,257,155,71,142,162,158,263,117,118,120',
'159,139,140,141,121,203,204,143,144,145,19,169,87,385,386,169,147,133',
'217,128,129,163,130,132,210,216,122,279,164,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,294,148',
'299,136,300,71,332,231,71,257,346,146,149,188,353,354,157,355,203,362',
'231,231,231,152,231,210,377,381,387,155,390,142,162,158,391,117,118',
'120,159,139,140,141,121,395,300,143,144,145,19,397,87,71,400,98,147',
'133,169,128,129,163,130,132,404,410,122,210,164,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,420',
'148,169,136,,,,,,,,146,149,,,,157,,,,,,,152,,,,,,155,,142,162,158,,117',
'118,120,159,139,140,141,121,,,143,144,145,19,,87,,,,147,133,,128,129',
'163,130,132,,,122,,164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,60,61,156,,148,,136,5,,,6,,,,146,149,',
',,157,,,,,,,152,,,,,,155,,142,162,158,,117,118,120,159,139,140,141,121',
',,143,144,145,19,,87,,,,147,133,,128,129,163,130,132,,,122,,164,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,156,,148,,136,5,,,6,,,,146,149,,,,157,,,,,,,152,,,,,,155,,142',
'162,158,,117,118,120,159,139,140,141,121,,,143,144,145,19,,87,,,,147',
'133,,128,129,163,130,132,,,122,,164,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,156,,148,,136,,,,,,',
',146,149,,,,157,,,,,,,152,,,,,,155,,142,162,158,,117,118,120,159,139',
'140,141,121,,,143,144,145,19,,87,,,,147,133,,128,129,163,130,132,,,122',
',164,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,60,61,156,,148,,136,5,,,6,,,,146,149,143,144,145,157,,,',
',,147,152,,,,163,,155,,142,162,158,164,,,,159,139,140,141,,,,,,,,227',
'228,229,230,231,232,,143,144,145,,,22,156,,148,147,193,233,234,235,163',
',,,146,149,19,164,,157,23,,,,,,152,,,,,,155,17,142,162,158,,,,,159,139',
'140,141,156,,148,,193,143,144,145,,,,,146,149,147,,,157,,163,,,5,,152',
'6,164,,,,155,,142,162,158,,,,,159,139,140,141,,,,22,,143,144,145,,,22',
'199,,148,147,193,,,19,163,,18,23,146,149,19,164,,157,23,,,,,,17,,,,',
',,17,142,162,158,,,,,159,139,140,141,156,,148,,193,143,144,145,,,,,146',
'149,147,5,,157,6,163,,,5,,152,6,164,,,,155,,142,162,158,,,,,159,139',
'140,141,,,,22,378,143,144,145,,,,156,,148,147,193,,,19,163,,,23,146',
'149,,164,,157,227,228,229,230,231,232,17,,,,,,155,,142,162,158,,233',
'234,235,159,139,140,141,156,,148,,193,143,144,145,,,,,146,149,147,5',
',157,6,163,,,,,152,,164,,,,155,,142,162,158,,,,,159,139,140,141,,,,',
',143,144,145,,,,156,,148,147,193,,,,163,,,,146,149,,164,,157,,,,,,,152',
',,,,,155,,142,162,158,,,,,159,139,140,141,249,,148,,193,143,144,145',
',,,,146,149,147,,,157,,163,,,,,,,164,,,,,,142,162,158,,,,,159,139,140',
'141,,,,,,143,144,145,,,,249,,148,147,193,,,,163,,,,146,149,,164,,157',
',,,,,,,,,,,,,,142,162,158,,,,,159,139,140,141,249,,148,,193,143,144',
'145,,,,,146,149,147,,,157,,163,,,,,,,164,,,,,,142,162,158,,,,,159,139',
'140,141,,,,,,143,144,145,,,,156,,148,147,193,,,,163,,,,146,149,,164',
',157,,,,,,,152,,,,,,155,,142,162,158,,,,,159,139,140,141,156,,148,,193',
'143,144,145,,,,,146,149,147,,,157,,163,,,,,152,,164,,,,155,,142,162',
'158,,,,,159,139,140,141,,,,,,143,144,145,,,,249,,148,147,193,,,,163',
',,,146,149,,164,,157,,,,,,,,,,,,,,,142,162,158,,,,,159,139,140,141,156',
',148,,193,143,144,145,,,,,146,149,147,,,157,,163,,,,,152,,164,,,,155',
',142,162,158,,,,,159,139,140,141,,,,,,143,144,145,,,,156,,148,147,193',
',,,163,,,,146,149,,164,,157,,,,,,,152,,,,,,155,,142,162,158,,,,,159',
'139,140,141,156,,148,,193,143,144,145,,,,,146,149,147,,,157,,163,,,',
',152,,164,,,,155,,142,162,158,,,,,159,139,140,141,,,,,,143,144,145,',
',,156,,148,147,193,,,,163,,,,146,149,,164,,157,,,,,,,152,,,,,,155,,142',
'162,158,,,,,159,139,140,141,156,,148,,193,143,144,145,,,,,146,149,147',
',,157,,163,,,,,152,,164,,,,155,,142,162,158,,,,,159,139,140,141,,,,',
',143,144,145,,,,156,,148,147,193,,,,163,,,,146,149,,164,,157,,,,,,,152',
',,,,,155,,142,162,158,,,,,159,139,140,141,156,,148,,193,143,144,145',
',,,,146,149,147,,,157,,163,,,,,152,,164,,,,155,,142,162,158,,,,,159',
'139,140,141,,,,,,143,144,145,,,,156,,148,147,193,,,,163,,,,146,149,',
'164,,157,,,,,,,152,,,,,,155,,142,162,158,,,,,159,139,140,141,156,,148',
',193,143,144,145,,,,,146,149,147,,,157,,163,,,,,152,,164,,,,155,,142',
'162,158,,,,,159,139,140,141,,,,,,143,144,145,143,144,145,156,,148,147',
'193,,147,,163,,,163,146,149,,164,,157,164,,,,,,152,,,,,,155,,142,162',
'158,,,,,159,139,140,141,156,,148,,193,148,,193,,,,,146,149,,146,149',
'157,,,,,,,152,,,,,,155,,142,162,158,142,162,,,159,139,140,141,139,140',
'141,143,144,145,,,,,,,147,,,,,163,,,,143,144,145,164,,,,,,147,,,,,163',
',,,,,,164,331,,,,,,,,,249,,148,,193,,227,228,229,230,231,232,146,149',
',,,157,249,,148,,193,,233,234,235,236,237,,146,149,142,162,158,157,',
',,159,139,140,141,,,,,143,144,145,142,162,158,,,,147,159,139,140,141',
'163,,,,143,144,145,164,,,,,,147,,,,,163,,,,,,,164,,,,,,,,,,249,,148',
',193,227,228,229,230,231,232,,146,149,,,,157,249,,148,,193,233,234,235',
'236,237,,,146,149,142,162,158,157,,,,159,139,140,141,,,,,143,144,145',
'142,162,158,,,,147,159,139,140,141,163,,,,143,144,145,164,,,,,,147,',
',,,163,,,,,,,164,,,,,,,,,,249,,148,,193,227,228,229,230,231,232,,146',
'149,,,,157,249,,148,,193,233,234,235,236,237,,,146,149,142,162,158,157',
',,,159,139,140,141,,,,,143,144,145,142,162,158,,,,147,159,139,140,141',
'163,,,,143,144,145,164,,,,,,147,,,,,163,,,,,,,164,,,,,,,,,,249,,148',
',193,227,228,229,230,231,232,,146,149,,,,157,249,,148,,193,233,234,235',
'236,237,,,146,149,142,162,158,157,,,,159,139,140,141,,,,,143,144,145',
'142,162,158,,,,147,159,139,140,141,163,,,,143,144,145,164,,,,,,147,',
',,,163,,,,,,,164,,,,,,,,,,249,,148,,193,227,228,229,230,231,232,,146',
'149,,,,157,249,,148,,193,233,234,235,236,237,,,146,149,142,162,158,157',
',,,159,139,140,141,,,,,143,144,145,142,162,158,,,,147,159,139,140,141',
'163,,,,143,144,145,164,,,,,,147,,,,,163,,,,,,,164,,,,,,,,,,249,,148',
',193,227,228,229,230,231,232,,146,149,,,,157,249,,148,,193,233,234,235',
'236,237,,,146,149,142,162,158,157,,,,159,139,140,141,,,,,143,144,145',
'142,162,158,,,,147,159,139,140,141,163,,,,143,144,145,164,,,,,,147,',
',,,163,,,,,,,164,,,,,,,,,,249,,148,,193,227,228,229,230,231,232,,146',
'149,,,,157,249,,148,,193,233,234,235,236,237,,,146,149,142,162,158,157',
',,,159,139,140,141,,,,,143,144,145,142,162,158,,,,147,159,139,140,141',
'163,,,,143,144,145,164,,,,,,147,,,,,163,,,,,,,164,,,,,,,,,,249,,148',
',193,227,228,229,230,231,232,,146,149,,,,157,249,,148,,193,233,234,235',
'236,237,,,146,149,142,162,158,157,,,,159,139,140,141,,,,,143,144,145',
'142,162,158,,,,147,159,139,140,141,163,,,,143,144,145,164,,,,,,147,',
',,,163,,143,144,145,,,164,,,,147,,,,,163,249,,148,,193,,164,,,,,,146',
'149,,,,157,249,,148,,193,,,,,,,,146,149,142,162,158,157,148,,193,159',
'139,140,141,,,,146,149,,,142,162,158,,,,,159,139,140,141,,,143,144,145',
'142,162,,,,,147,,139,140,141,163,227,228,229,230,231,232,164,,284,285',
'286,287,,,,,,,233,234,235,236,237,,,,,,143,144,145,,,,156,,148,147,193',
',,,163,,,,146,149,,164,,157,,,,,,,152,,,,,,155,,142,162,158,,,,,159',
'139,140,141,156,,148,,193,143,144,145,,,,,146,149,147,,,157,,163,,,',
',152,,164,,,,155,,142,162,158,,,,,159,139,140,141,,,,,,143,144,145,',
',,156,,148,147,193,,,,163,,,,146,149,,164,,157,,,,,,,152,,,,,,155,,142',
'162,158,,,,,159,139,140,141,,,148,,193,143,144,145,,,,,146,149,147,',
',,,163,,,,,,,164,,,,,,142,162,,,,,,,139,140,141,,,,,,143,144,145,,,',
'156,,148,147,193,,,,163,,,,146,149,,164,,157,,,,,,,152,,,,,,155,,142',
'162,158,,,,,159,139,140,141,249,,148,,193,143,144,145,,,,,146,149,147',
',,157,,163,,,143,144,145,,164,,,,,147,142,162,158,,163,,,159,139,140',
'141,164,,,,,,,,,,,249,,148,,193,227,228,229,230,231,232,,146,149,,,',
'157,,148,,193,,233,234,235,236,237,,146,149,174,142,162,158,,,,,159',
'139,140,141,,,19,,87,,142,162,,,,,,,139,140,141,,,,,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,19,,87',
',,5,,,6,,,,,,,,,,,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,268,,,,,,81,,,,,,,,,,,,,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,331',
',,,,,,,,,,,,,,227,228,229,230,231,232,,238,240,241,242,243,,,,,331,',
'233,234,235,236,237,,,,,,,,239,227,228,229,230,231,232,,,284,285,286',
'287,,,,,,,233,234,235,236,237,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,,5,,,6,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,,-29',
',,,,-29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,56,57,58,59,60,61,,,,,168,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,,,,,168,227,228,229,230,231',
'232,,238,240,241,242,243,,,,,,,233,234,235,236,237,,,,,,,,239,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59',
'60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61' ]
        racc_action_table = arr = ::Array.new(4122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'92,92,92,197,29,405,136,92,136,32,92,92,92,92,210,92,76,1,0,92,92,0',
'92,92,92,92,92,7,136,92,76,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,32,92,197,92,405,210,29',
'311,87,312,3,92,92,3,17,87,92,312,303,311,18,296,202,92,245,197,197',
'405,405,92,296,92,92,92,138,187,187,187,92,92,92,92,187,303,303,187',
'187,187,187,296,187,245,245,19,187,187,138,187,187,187,187,187,8,22',
'187,8,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,73,187,2,187,187',
'202,202,187,103,134,112,187,187,165,112,30,187,2,165,73,2,2,103,187',
'31,345,360,375,112,187,134,187,187,187,2,207,207,207,187,187,187,187',
'207,345,375,207,207,207,207,360,207,270,33,11,207,207,11,207,207,207',
'207,207,127,127,207,270,207,207,207,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207',
'207,402,207,77,207,207,64,341,207,259,66,341,207,207,259,402,274,207',
'77,190,190,274,77,291,207,341,292,193,291,193,207,292,207,207,207,77',
'262,262,262,207,207,207,207,262,69,302,262,262,262,262,302,262,273,273',
'80,262,262,80,262,262,262,262,262,89,72,262,89,262,262,262,262,262,262',
'262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262',
'262,262,262,262,262,262,74,262,173,262,78,319,319,319,319,319,319,262',
'262,275,275,99,262,173,99,114,81,173,114,262,319,319,88,132,97,262,132',
'262,262,262,173,276,276,276,262,262,262,262,276,295,295,276,276,276',
'276,264,276,100,264,307,276,276,307,276,276,276,276,276,394,104,276',
'394,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,108,276,110,276',
'320,320,320,320,320,320,395,276,276,395,301,301,276,321,321,321,321',
'321,321,276,313,313,313,313,113,276,115,276,276,276,118,279,279,279',
'276,276,276,276,279,304,304,279,279,279,279,410,279,128,410,130,279',
'279,133,279,279,279,279,279,305,305,279,137,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,148,279,149,279,314,314,314,314,306,306,162',
'279,279,309,309,167,279,351,351,354,354,355,355,279,365,365,382,382',
'168,279,170,279,279,279,172,288,288,288,279,279,279,279,288,396,396',
'288,288,288,288,176,288,421,421,182,288,288,183,288,288,288,288,288',
'191,194,288,198,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,208',
'288,211,288,212,222,247,248,253,255,268,288,288,272,280,282,288,283',
'290,293,315,316,317,288,318,338,343,347,352,288,356,288,288,288,359',
'386,386,386,288,288,288,288,386,362,364,386,386,386,386,370,386,371',
'373,380,386,386,381,386,386,386,386,386,383,392,386,399,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,386,386,386,386,386,386,414,386,420,386,,,,,,,,386,386,',
',,386,,,,,,,386,,,,,,386,,386,386,386,,411,411,411,386,386,386,386,411',
',,411,411,411,411,,411,,,,411,411,,411,411,411,411,411,,,411,,411,411',
'411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,,411,,411,411,,,411,,,,411,411',
',,,411,,,,,,,411,,,,,,411,,411,411,411,,412,412,412,411,411,411,411',
'412,,,412,412,412,412,,412,,,,412,412,,412,412,412,412,412,,,412,,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,,412,,412,412,,,412,,,,412',
'412,,,,412,,,,,,,412,,,,,,412,,412,412,412,,416,416,416,412,412,412',
'412,416,,,416,416,416,416,,416,,,,416,416,,416,416,416,416,416,,,416',
',416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,416,416,,416,,416,,,,,,,,416',
'416,,,,416,,,,,,,416,,,,,,416,,416,416,416,,417,417,417,416,416,416',
'416,417,,,417,417,417,417,,417,,,,417,417,,417,417,417,417,417,,,417',
',417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,,417,,417,417,,,417',
',,,417,417,117,117,117,417,,,,,,117,417,,,,117,,417,,417,417,417,117',
',,,417,417,417,417,,,,,,,,322,322,322,322,322,322,,120,120,120,,,28',
'117,,117,120,117,322,322,322,120,,,,117,117,28,120,,117,28,,,,,,117',
',,,,,117,28,117,117,117,,,,,117,117,117,117,120,,120,,120,121,121,121',
',,,,120,120,121,,,120,,121,,,28,,120,28,121,,,,120,,120,120,120,,,,',
'120,120,120,120,,,,27,,122,122,122,,,171,121,,121,122,121,,,27,122,',
'27,27,121,121,171,122,,121,171,,,,,,27,,,,,,,171,121,121,121,,,,,121',
'121,121,121,122,,122,,122,151,151,151,,,,,122,122,151,27,,122,27,151',
',,171,,122,171,151,,,,122,,122,122,122,,,,,122,122,122,122,,,,344,344',
'155,155,155,,,,151,,151,155,151,,,344,155,,,344,151,151,,155,,151,323',
'323,323,323,323,323,344,,,,,,151,,151,151,151,,323,323,323,151,151,151',
'151,155,,155,,155,156,156,156,,,,,155,155,156,344,,155,344,156,,,,,155',
',156,,,,155,,155,155,155,,,,,155,155,155,155,,,,,,157,157,157,,,,156',
',156,157,156,,,,157,,,,156,156,,157,,156,,,,,,,156,,,,,,156,,156,156',
'156,,,,,156,156,156,156,157,,157,,157,158,158,158,,,,,157,157,158,,',
'157,,158,,,,,,,158,,,,,,157,157,157,,,,,157,157,157,157,,,,,,159,159',
'159,,,,158,,158,159,158,,,,159,,,,158,158,,159,,158,,,,,,,,,,,,,,,158',
'158,158,,,,,158,158,158,158,159,,159,,159,188,188,188,,,,,159,159,188',
',,159,,188,,,,,,,188,,,,,,159,159,159,,,,,159,159,159,159,,,,,,195,195',
'195,,,,188,,188,195,188,,,,195,,,,188,188,,195,,188,,,,,,,188,,,,,,188',
',188,188,188,,,,,188,188,188,188,195,,195,,195,199,199,199,,,,,195,195',
'199,,,195,,199,,,,,195,,199,,,,195,,195,195,195,,,,,195,195,195,195',
',,,,,203,203,203,,,,199,,199,203,199,,,,203,,,,199,199,,203,,199,,,',
',,,,,,,,,,,199,199,199,,,,,199,199,199,199,203,,203,,203,204,204,204',
',,,,203,203,204,,,203,,204,,,,,203,,204,,,,203,,203,203,203,,,,,203',
'203,203,203,,,,,,205,205,205,,,,204,,204,205,204,,,,205,,,,204,204,',
'205,,204,,,,,,,204,,,,,,204,,204,204,204,,,,,204,204,204,204,205,,205',
',205,206,206,206,,,,,205,205,206,,,205,,206,,,,,205,,206,,,,205,,205',
'205,205,,,,,205,205,205,205,,,,,,209,209,209,,,,206,,206,209,206,,,',
'209,,,,206,206,,209,,206,,,,,,,206,,,,,,206,,206,206,206,,,,,206,206',
'206,206,209,,209,,209,214,214,214,,,,,209,209,214,,,209,,214,,,,,209',
',214,,,,209,,209,209,209,,,,,209,209,209,209,,,,,,216,216,216,,,,214',
',214,216,214,,,,216,,,,214,214,,216,,214,,,,,,,214,,,,,,214,,214,214',
'214,,,,,214,214,214,214,216,,216,,216,217,217,217,,,,,216,216,217,,',
'216,,217,,,,,216,,217,,,,216,,216,216,216,,,,,216,216,216,216,,,,,,218',
'218,218,,,,217,,217,218,217,,,,218,,,,217,217,,218,,217,,,,,,,217,,',
',,,217,,217,217,217,,,,,217,217,217,217,218,,218,,218,219,219,219,,',
',,218,218,219,,,218,,219,,,,,218,,219,,,,218,,218,218,218,,,,,218,218',
'218,218,,,,,,221,221,221,224,224,224,219,,219,221,219,,224,,221,,,224',
'219,219,,221,,219,224,,,,,,219,,,,,,219,,219,219,219,,,,,219,219,219',
'219,221,,221,,221,224,,224,,,,,221,221,,224,224,221,,,,,,,221,,,,,,221',
',221,221,221,224,224,,,221,221,221,221,224,224,224,227,227,227,,,,,',
',227,,,,,227,,,,228,228,228,227,,,,,,228,,,,,228,,,,,,,228,333,,,,,',
',,,227,,227,,227,,333,333,333,333,333,333,227,227,,,,227,228,,228,,228',
',333,333,333,333,333,,228,228,227,227,227,228,,,,227,227,227,227,,,',
',229,229,229,228,228,228,,,,229,228,228,228,228,229,,,,230,230,230,229',
',,,,,230,,,,,230,,,,,,,230,,,,,,,,,,229,,229,,229,324,324,324,324,324',
'324,,229,229,,,,229,230,,230,,230,324,324,324,324,324,,,230,230,229',
'229,229,230,,,,229,229,229,229,,,,,231,231,231,230,230,230,,,,231,230',
'230,230,230,231,,,,232,232,232,231,,,,,,232,,,,,232,,,,,,,232,,,,,,',
',,,231,,231,,231,325,325,325,325,325,325,,231,231,,,,231,232,,232,,232',
'325,325,325,325,325,,,232,232,231,231,231,232,,,,231,231,231,231,,,',
',233,233,233,232,232,232,,,,233,232,232,232,232,233,,,,234,234,234,233',
',,,,,234,,,,,234,,,,,,,234,,,,,,,,,,233,,233,,233,326,326,326,326,326',
'326,,233,233,,,,233,234,,234,,234,326,326,326,326,326,,,234,234,233',
'233,233,234,,,,233,233,233,233,,,,,235,235,235,234,234,234,,,,235,234',
'234,234,234,235,,,,236,236,236,235,,,,,,236,,,,,236,,,,,,,236,,,,,,',
',,,235,,235,,235,327,327,327,327,327,327,,235,235,,,,235,236,,236,,236',
'327,327,327,327,327,,,236,236,235,235,235,236,,,,235,235,235,235,,,',
',237,237,237,236,236,236,,,,237,236,236,236,236,237,,,,238,238,238,237',
',,,,,238,,,,,238,,,,,,,238,,,,,,,,,,237,,237,,237,328,328,328,328,328',
'328,,237,237,,,,237,238,,238,,238,328,328,328,328,328,,,238,238,237',
'237,237,238,,,,237,237,237,237,,,,,239,239,239,238,238,238,,,,239,238',
'238,238,238,239,,,,240,240,240,239,,,,,,240,,,,,240,,,,,,,240,,,,,,',
',,,239,,239,,239,329,329,329,329,329,329,,239,239,,,,239,240,,240,,240',
'329,329,329,329,329,,,240,240,239,239,239,240,,,,239,239,239,239,,,',
',241,241,241,240,240,240,,,,241,240,240,240,240,241,,,,242,242,242,241',
',,,,,242,,,,,242,,,,,,,242,,,,,,,,,,241,,241,,241,407,407,407,407,407',
'407,,241,241,,,,241,242,,242,,242,407,407,407,407,407,,,242,242,241',
'241,241,242,,,,241,241,241,241,,,,,243,243,243,242,242,242,,,,243,242',
'242,242,242,243,,,,249,249,249,243,,,,,,249,,,,,249,,257,257,257,,,249',
',,,257,,,,,257,243,,243,,243,,257,,,,,,243,243,,,,243,249,,249,,249',
',,,,,,,249,249,243,243,243,249,257,,257,243,243,243,243,,,,257,257,',
',249,249,249,,,,,249,249,249,249,,,300,300,300,257,257,,,,,300,,257',
'257,257,300,201,201,201,201,201,201,300,,201,201,201,201,,,,,,,201,201',
'201,201,201,,,,,,349,349,349,,,,300,,300,349,300,,,,349,,,,300,300,',
'349,,300,,,,,,,300,,,,,,300,,300,300,300,,,,,300,300,300,300,349,,349',
',349,368,368,368,,,,,349,349,368,,,349,,368,,,,,349,,368,,,,349,,349',
'349,349,,,,,349,349,349,349,,,,,,372,372,372,,,,368,,368,372,368,,,',
'372,,,,368,368,,372,,368,,,,,,,368,,,,,,368,,368,368,368,,,,,368,368',
'368,368,,,372,,372,385,385,385,,,,,372,372,385,,,,,385,,,,,,,385,,,',
',,372,372,,,,,,,372,372,372,,,,,,388,388,388,,,,385,,385,388,385,,,',
'388,,,,385,385,,388,,385,,,,,,,385,,,,,,385,,385,385,385,,,,,385,385',
'385,385,388,,388,,388,389,389,389,,,,,388,388,389,,,388,,389,,,398,398',
'398,,389,,,,,398,388,388,388,,398,,,388,388,388,388,398,,,,,,,,,,,389',
',389,,389,408,408,408,408,408,408,,389,389,,,,389,,398,,398,,408,408',
'408,408,408,,398,398,101,389,389,389,,,,,389,389,389,389,,,101,,101',
',398,398,,,,,,,398,398,398,,,,,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'67,,67,,,101,,,101,,,,,,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,177,,,,,,67,,,,,,,,,,,,,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,246,,,,,,,,,,,,,,,246,246,246,246',
'246,246,,246,246,246,246,246,,,,,281,,246,246,246,246,246,,,,,,,,246',
'281,281,281,281,281,281,,,281,281,281,281,,,,,,,281,281,281,281,281',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,,,,,,109,,,109,169,169,169,169',
'169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169',
'169,169,169,169,169,169,,169,,,,,169,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,,,,,93,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,,,,,254,153,153,153,153,153,153,,153,153,153',
'153,153,,,,,,,153,153,153,153,153,,,,,,,,153,23,23,23,23,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,152,152,152,152,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339' ]
        racc_action_check = arr = ::Array.new(4122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   -50,    17,   155,     2,   nil,   nil,   nil,    27,    54,   nil,
   nil,   140,   nil,   nil,   nil,   nil,   nil,     7,   -15,    46,
   nil,   nil,   101,  3924,   nil,   nil,   nil,  1254,  1164,   -21,
   103,   111,    -7,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   187,  3951,   192,  3617,   nil,   215,
  3978,   nil,   250,    81,   271,   nil,   -51,   250,   262,   nil,
   235,   298,   nil,   nil,   nil,   nil,   nil,     8,   276,   244,
   nil,   nil,    -4,  3829,   nil,   nil,   nil,   310,   nil,   292,
   328,  3571,   nil,    96,   323,   nil,   nil,   nil,   437,  3759,
   373,   nil,   102,   465,   296,   464,   nil,  1104,   411,   nil,
  1147,  1201,  1244,   nil,   nil,   nil,   nil,   126,   428,   nil,
   430,   nil,   304,   479,    91,   nil,   -57,   420,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   467,   469,
   nil,  1298,  4005,  3850,   nil,  1341,  1395,  1438,  1492,  1535,
   nil,   nil,   482,   nil,   nil,   104,   nil,   483,   478,  3795,
   497,  1261,   566,   345,   nil,   nil,   521,  3663,   nil,   nil,
   nil,   nil,   525,   526,   nil,   nil,   nil,    91,  1589,   nil,
   177,   524,   nil,   213,   535,  1632,   nil,    -6,   587,  1686,
   nil,  3139,    69,  1729,  1783,  1826,  1880,   186,   563,  1923,
    -2,   563,   549,   nil,  1977,   nil,  2020,  2074,  2117,  2171,
   nil,  2214,   567,   nil,  2217,   nil,   nil,  2309,  2327,  2405,
  2423,  2501,  2519,  2597,  2615,  2693,  2711,  2789,  2807,  2885,
  2903,  2981,  2999,  3077,   nil,    20,  3662,   572,   554,  3095,
   nil,   nil,  4032,   570,  3861,   554,   nil,  3111,   nil,   194,
   nil,   nil,   281,   nil,   326,   nil,   nil,   nil,   573,   nil,
   139,   nil,   637,   210,   201,   267,   376,   nil,   nil,   471,
   580,  3693,   578,   580,   nil,   nil,   nil,   nil,   566,   nil,
   557,   208,   211,   618,   nil,   297,    16,   nil,   nil,   nil,
  3189,   363,   230,    12,   392,   411,   452,   332,   nil,   480,
   nil,    -6,   -12,   383,   458,   567,   568,   569,   571,   271,
   365,   378,  1075,  1300,  2394,  2490,  2586,  2682,  2778,  2874,
   nil,   nil,   nil,  2299,   nil,   nil,   nil,   nil,   582,  4059,
   nil,   193,   nil,   653,  1351,   117,   nil,   593,   nil,  3232,
   nil,   545,   655,   nil,   467,   467,   657,   nil,   nil,   661,
   173,   nil,   606,   nil,   589,   468,   nil,   nil,  3286,   nil,
   602,   613,  3329,   593,   nil,   118,   nil,   nil,   nil,   nil,
   602,   623,   470,   689,   nil,  3383,   661,   nil,  3426,  3480,
   nil,   nil,   661,   nil,   339,   382,   487,   nil,  3497,   622,
   nil,   nil,   183,   nil,   nil,    -4,   nil,  2970,  3469,   nil,
   421,   756,   851,   nil,   661,   nil,   946,  1041,   nil,   nil,
   664,   579,   nil,   nil,   nil ]

racc_action_default = [
  -232,  -243,    -6,  -233,  -234,  -236,  -237,  -243,  -232,    -2,
    -4,  -243,    -7,    -9,   -10,   -11,   -12,  -243,  -243,  -243,
   -49,   -50,   -56,  -243,  -235,   425,    -1,  -233,    -5,   -15,
   -18,  -243,  -243,  -243,  -115,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,    -3,    -8,  -243,  -243,  -243,   -22,   -19,  -243,
   -35,  -242,  -143,  -141,  -243,   -57,  -243,    -6,   -15,   -16,
  -243,  -243,   -23,   -25,   -26,   -27,  -115,  -243,  -243,  -232,
   -36,  -115,   -59,  -243,  -139,  -140,  -142,   -32,  -116,  -232,
  -243,  -243,   -20,  -243,  -243,   -42,   -43,   -21,  -243,  -233,
   -38,   -40,  -243,  -243,  -232,   -60,   -62,  -226,  -228,   -65,
  -243,  -243,  -243,   -70,   -71,   -72,   -73,   -74,  -228,   -76,
  -228,   -78,  -243,  -243,  -175,  -115,  -193,  -183,  -193,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -238,  -238,
  -151,  -243,  -243,  -156,  -157,  -243,  -243,  -243,  -243,  -243,
  -184,  -186,  -243,  -188,  -189,  -243,  -145,  -243,  -149,  -115,
  -243,  -233,  -243,    -6,   -17,   -24,   -32,  -243,   -34,   -37,
  -115,  -115,   -32,  -112,  -113,   -51,   -58,  -233,  -243,   -63,
  -227,  -175,  -183,  -193,  -193,  -195,  -229,  -243,  -243,  -243,
   -92,  -243,  -243,  -243,  -243,  -195,  -195,   -59,  -243,  -243,
  -243,  -105,  -108,  -109,  -243,  -185,  -195,  -243,  -243,  -243,
  -190,  -117,  -239,  -240,  -134,  -152,  -115,  -243,  -243,  -243,
  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,
  -243,  -243,  -243,  -243,  -158,  -243,  -156,  -157,  -171,  -243,
  -172,  -173,  -243,  -243,  -243,  -149,  -148,  -243,   -30,  -243,
  -115,   -55,   -59,   -13,  -243,   -28,   -41,  -115,  -243,   -39,
  -243,  -111,   -61,   -67,  -230,  -196,   -59,   -99,  -100,   -59,
  -243,  -243,  -243,  -243,   -95,   -96,   -97,   -98,   -59,  -153,
  -154,  -230,  -230,   -81,   -89,   -90,  -141,  -191,  -192,  -115,
  -243,  -120,  -243,  -243,  -121,  -122,  -118,  -243,  -241,  -238,
  -135,  -243,  -243,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -176,  -177,  -178,  -179,  -180,  -181,
  -159,  -174,  -182,  -243,  -115,  -144,  -146,  -147,  -150,  -115,
   -33,   -53,   -54,  -243,  -243,   -44,  -115,  -243,   -64,  -243,
  -231,  -101,  -243,   -91,  -243,  -243,  -243,   -75,   -77,  -243,
   -85,   -82,  -243,  -106,  -107,  -114,  -194,  -198,  -243,  -132,
  -243,  -238,  -243,  -243,  -155,  -243,   -31,   -52,   -14,  -115,
   -45,   -32,  -197,  -243,  -102,  -243,   -59,   -68,  -243,  -243,
   -69,   -79,   -87,   -83,  -243,  -243,  -119,  -133,  -243,  -137,
  -138,  -187,   -47,  -110,   -66,  -243,  -104,   -93,   -94,   -80,
  -243,   -59,   -59,  -136,  -243,   -48,   -59,   -59,   -86,   -84,
   -32,  -101,   -88,   -46,  -103 ]

racc_goto_table = [
    24,     3,    16,    70,    76,   113,    63,   276,   170,    27,
   111,   258,    28,   134,    99,    72,   221,   224,   213,   200,
   256,   310,   383,   220,    24,    24,    34,    16,    16,    68,
   166,    82,   137,    64,     9,   361,    77,    90,     1,   274,
     2,    85,   138,   195,   348,     8,    67,    80,    26,   291,
   292,   259,   184,   205,   212,   206,   103,    89,   110,    62,
   302,   357,   358,   104,   266,   175,   414,    84,    78,    32,
    86,    92,   173,    91,   272,    85,   179,    16,   189,   220,
   102,   101,   100,   198,   359,   360,   392,   265,   409,   388,
   109,   389,   424,   271,   211,   347,   167,   280,    24,   269,
   171,    84,   393,   307,    86,   309,    24,   337,   134,   372,
   264,   165,    91,   225,   247,   187,   nil,   nil,   nil,   nil,
   293,   nil,   nil,   nil,   nil,   nil,   nil,   137,   134,   108,
   nil,   nil,   nil,   207,   nil,   nil,   nil,   138,   nil,   172,
   nil,   nil,   262,   nil,   nil,   311,   nil,   137,   nil,    63,
   298,   270,   nil,   nil,   186,   226,   nil,   138,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   278,
   nil,    16,   260,    16,   nil,   343,   nil,   370,   338,   342,
   267,   376,   363,   134,    24,   190,   nil,   nil,   197,   351,
   202,   336,   352,   297,   308,   413,   312,   134,   nil,   nil,
   134,   356,   137,   nil,    24,   nil,   nil,   nil,   nil,   134,
   184,   nil,   138,   nil,   nil,   416,   137,   nil,   364,   137,
   nil,   nil,   nil,   244,   245,   335,   138,   nil,   137,   138,
   341,   nil,   nil,   nil,   nil,   nil,   nil,   345,   138,   398,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   334,   273,   167,   nil,   nil,
   nil,   nil,   nil,   275,   nil,   344,   nil,   nil,   nil,   nil,
   nil,   289,   290,   275,   275,   nil,   nil,   295,   nil,   nil,
   nil,   184,   301,   nil,   275,   303,   304,   305,   nil,   306,
   nil,   nil,   403,   399,   nil,   nil,   nil,   nil,   nil,   406,
   nil,   nil,   nil,   nil,   375,   nil,   nil,   134,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,   nil,   311,
   nil,   nil,    63,   nil,   418,   419,   137,   nil,   nil,   421,
   422,   423,   134,   134,   nil,   nil,   138,   134,   134,   nil,
   nil,    24,   260,   nil,    16,   nil,   nil,   nil,   201,   402,
   nil,   137,   137,   nil,   nil,   nil,   137,   137,   nil,   nil,
   nil,   138,   138,   nil,   nil,   nil,   138,   138,   365,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   278,   nil,   nil,
   nil,   nil,   nil,   246,   248,   250,   251,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   411,   412,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,    24,
   nil,   417,   nil,   nil,    24,   nil,   nil,   382,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   281,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   396,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   405,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   nil,   nil,   nil,   nil,   nil,   333,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   407,   408 ]

racc_goto_check = [
    84,     5,    12,    14,    22,    38,     8,    48,    23,     5,
    29,    25,     5,    59,     7,    36,    72,    72,    66,    60,
    78,    74,    49,    82,    84,    84,    15,    12,    12,    18,
    77,    19,    68,    13,     4,    58,    14,    27,     1,    44,
     2,    21,    70,    43,    45,     3,    16,    17,     2,    44,
    44,    24,    68,    43,    29,    43,    22,    26,    28,     4,
    44,    45,    45,    30,    31,    19,    32,    12,    15,    35,
    15,    37,    14,    15,    40,    21,    27,    12,    42,    82,
    18,     5,    13,    50,    54,    55,    56,    23,    57,    62,
     5,    63,    49,    23,    65,    67,    15,    60,    84,    29,
     5,    12,    58,    69,    15,    73,    84,    78,    59,    75,
     7,    76,    15,    79,    81,     5,   nil,   nil,   nil,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,    68,    59,     2,
   nil,   nil,   nil,     5,   nil,   nil,   nil,    70,   nil,     2,
   nil,   nil,    14,   nil,   nil,    59,   nil,    68,   nil,     8,
    68,    22,   nil,   nil,     2,    15,   nil,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    14,
   nil,    12,    15,    12,   nil,    38,   nil,    72,    59,    29,
    15,    25,    66,    59,    84,    47,   nil,   nil,    47,    38,
    47,    77,    38,    36,    14,    74,    22,    59,   nil,   nil,
    59,    38,    68,   nil,    84,   nil,   nil,   nil,   nil,    59,
    68,   nil,    70,   nil,   nil,    48,    68,   nil,    29,    68,
   nil,   nil,   nil,    47,    47,    14,    70,   nil,    68,    70,
    22,   nil,   nil,   nil,   nil,   nil,   nil,    22,    70,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,    47,    15,   nil,   nil,
   nil,   nil,   nil,    47,   nil,     5,   nil,   nil,   nil,   nil,
   nil,    47,    47,    47,    47,   nil,   nil,    47,   nil,   nil,
   nil,    68,    47,   nil,    47,    47,    47,    47,   nil,    47,
   nil,   nil,    23,    59,   nil,   nil,   nil,   nil,   nil,    38,
   nil,   nil,   nil,   nil,    22,   nil,   nil,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,    59,
   nil,   nil,     8,   nil,    38,    38,    68,   nil,   nil,    38,
    38,    23,    59,    59,   nil,   nil,    70,    59,    59,   nil,
   nil,    84,    15,   nil,    12,   nil,   nil,   nil,    61,    22,
   nil,    68,    68,   nil,   nil,   nil,    68,    68,   nil,   nil,
   nil,    70,    70,   nil,   nil,   nil,    70,    70,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,    61,    61,    61,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    84,
   nil,     5,   nil,   nil,    84,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    38,    40,    43,    32,     1,   nil,   -63,   -22,   nil,
   nil,   nil,     0,     4,   -28,     3,    16,   -20,    -1,   -36,
   nil,   -26,   -30,   -89,  -118,  -158,   -13,   -33,   -33,   -81,
   -24,  -113,  -336,   nil,   nil,    47,   -17,    -1,   -87,   nil,
  -113,   nil,   -39,   -75,  -156,  -230,   nil,    68,  -190,  -329,
   -38,   nil,   nil,   nil,  -209,  -208,  -274,  -304,  -258,   -79,
  -102,   227,  -265,  -264,   nil,   -41,  -117,  -175,   -60,  -118,
   -50,   nil,  -132,  -119,  -203,  -202,    18,   -63,  -148,   -38,
   nil,   -42,  -115,   nil,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   124,   nil,   223,   135,   nil,   nil,   nil,   nil,
    83,   126,   112,   nil,   nil,   nil,   nil,   nil,   nil,   261,
   nil,   nil,   nil,    20,    21,   nil,   nil,   nil,   nil,   114,
   115,   116,   nil,   nil,   nil,   nil,   119,   127,   nil,   nil,
   nil,   123,   125,   131,   nil,   nil,   nil,   nil,   nil,   191,
   nil,   153,   282,   283,   384,   nil,   nil,   182,   192,   nil,
   194,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,
   151,   154,   215,   161,     4,   222 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 111, :_reduce_1,
  1, 113, :_reduce_2,
  3, 113, :_reduce_3,
  1, 114, :_reduce_4,
  2, 114, :_reduce_5,
  0, 117, :_reduce_6,
  1, 117, :_reduce_7,
  3, 117, :_reduce_8,
  1, 118, :_reduce_9,
  1, 118, :_reduce_10,
  1, 118, :_reduce_11,
  1, 118, :_reduce_12,
  7, 120, :_reduce_13,
  9, 121, :_reduce_14,
  0, 123, :_reduce_15,
  2, 123, :_reduce_16,
  6, 116, :_reduce_17,
  0, 126, :_reduce_18,
  1, 126, :_reduce_19,
  3, 126, :_reduce_20,
  3, 128, :_reduce_21,
  0, 127, :_reduce_22,
  1, 127, :_reduce_23,
  3, 127, :_reduce_24,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  4, 130, :_reduce_28,
  0, 134, :_reduce_29,
  1, 134, :_reduce_30,
  3, 134, :_reduce_31,
  0, 133, :_reduce_32,
  3, 133, :_reduce_33,
  6, 122, :_reduce_34,
  0, 136, :_reduce_35,
  1, 136, :_reduce_36,
  3, 136, :_reduce_37,
  2, 137, :_reduce_38,
  3, 138, :_reduce_39,
  1, 138, :_reduce_40,
  4, 131, :_reduce_41,
  1, 140, :_reduce_none,
  1, 140, :_reduce_43,
  2, 141, :_reduce_44,
  3, 141, :_reduce_45,
  7, 141, :_reduce_46,
  0, 142, :_reduce_47,
  1, 142, :_reduce_48,
  1, 119, :_reduce_49,
  1, 119, :_reduce_50,
  6, 143, :_reduce_51,
  8, 144, :_reduce_52,
  2, 135, :_reduce_53,
  2, 135, :_reduce_54,
  1, 135, :_reduce_55,
  0, 145, :_reduce_56,
  2, 145, :_reduce_57,
  2, 148, :_reduce_58,
  0, 149, :_reduce_59,
  1, 149, :_reduce_60,
  3, 149, :_reduce_61,
  1, 150, :_reduce_62,
  2, 150, :_reduce_63,
  4, 150, :_reduce_64,
  1, 150, :_reduce_65,
  6, 150, :_reduce_66,
  3, 150, :_reduce_67,
  5, 150, :_reduce_68,
  5, 150, :_reduce_69,
  1, 150, :_reduce_70,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_74,
  4, 150, :_reduce_75,
  1, 150, :_reduce_76,
  4, 150, :_reduce_77,
  1, 150, :_reduce_none,
  5, 163, :_reduce_79,
  3, 164, :_reduce_80,
  0, 165, :_reduce_81,
  1, 165, :_reduce_82,
  2, 165, :_reduce_83,
  4, 168, :_reduce_84,
  0, 166, :_reduce_85,
  3, 166, :_reduce_86,
  0, 167, :_reduce_87,
  3, 167, :_reduce_88,
  3, 162, :_reduce_89,
  3, 161, :_reduce_90,
  3, 160, :_reduce_91,
  1, 160, :_reduce_none,
  5, 170, :_reduce_93,
  5, 170, :_reduce_94,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 159, :_reduce_101,
  1, 159, :_reduce_102,
  5, 159, :_reduce_103,
  2, 174, :_reduce_104,
  2, 151, :_reduce_105,
  3, 175, :_reduce_106,
  3, 175, :_reduce_107,
  1, 175, :_reduce_108,
  1, 175, :_reduce_109,
  6, 139, :_reduce_110,
  3, 139, :_reduce_111,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 176, :_reduce_114,
  0, 132, :_reduce_115,
  2, 132, :_reduce_116,
  0, 179, :_reduce_117,
  1, 179, :_reduce_118,
  3, 179, :_reduce_119,
  3, 156, :_reduce_120,
  3, 156, :_reduce_121,
  3, 156, :_reduce_122,
  1, 181, :_reduce_123,
  1, 181, :_reduce_124,
  1, 181, :_reduce_125,
  1, 181, :_reduce_126,
  1, 181, :_reduce_127,
  1, 181, :_reduce_128,
  1, 181, :_reduce_129,
  1, 181, :_reduce_130,
  1, 181, :_reduce_131,
  4, 181, :_reduce_132,
  5, 181, :_reduce_133,
  0, 183, :_reduce_134,
  1, 183, :_reduce_135,
  4, 183, :_reduce_136,
  3, 184, :_reduce_137,
  2, 185, :_reduce_none,
  2, 146, :_reduce_139,
  2, 146, :_reduce_140,
  1, 146, :_reduce_141,
  2, 146, :_reduce_142,
  0, 147, :_reduce_143,
  4, 147, :_reduce_144,
  1, 186, :_reduce_145,
  3, 186, :_reduce_146,
  3, 187, :_reduce_147,
  2, 187, :_reduce_148,
  0, 188, :_reduce_149,
  2, 188, :_reduce_150,
  1, 157, :_reduce_151,
  2, 157, :_reduce_152,
  3, 157, :_reduce_153,
  3, 157, :_reduce_154,
  4, 190, :_reduce_155,
  1, 189, :_reduce_156,
  1, 189, :_reduce_157,
  2, 189, :_reduce_158,
  3, 189, :_reduce_159,
  3, 171, :_reduce_160,
  3, 171, :_reduce_161,
  3, 171, :_reduce_162,
  3, 171, :_reduce_163,
  3, 171, :_reduce_164,
  3, 171, :_reduce_165,
  3, 171, :_reduce_166,
  3, 171, :_reduce_167,
  3, 171, :_reduce_168,
  3, 171, :_reduce_169,
  3, 171, :_reduce_170,
  2, 171, :_reduce_171,
  2, 171, :_reduce_172,
  2, 171, :_reduce_173,
  3, 171, :_reduce_174,
  1, 171, :_reduce_175,
  3, 191, :_reduce_176,
  3, 191, :_reduce_177,
  3, 191, :_reduce_178,
  3, 191, :_reduce_179,
  3, 191, :_reduce_180,
  3, 191, :_reduce_181,
  3, 191, :_reduce_182,
  1, 169, :_reduce_183,
  1, 169, :_reduce_184,
  2, 169, :_reduce_185,
  1, 169, :_reduce_none,
  5, 169, :_reduce_187,
  1, 169, :_reduce_188,
  1, 169, :_reduce_189,
  2, 193, :_reduce_190,
  3, 180, :_reduce_191,
  3, 180, :_reduce_192,
  0, 192, :_reduce_193,
  3, 192, :_reduce_194,
  0, 154, :_reduce_195,
  1, 154, :_reduce_196,
  3, 154, :_reduce_197,
  4, 178, :_reduce_198,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_225,
  0, 152, :_reduce_226,
  1, 152, :_reduce_none,
  0, 153, :_reduce_228,
  1, 153, :_reduce_none,
  0, 155, :_reduce_230,
  1, 155, :_reduce_none,
  0, 112, :_reduce_232,
  1, 112, :_reduce_233,
  1, 115, :_reduce_234,
  2, 115, :_reduce_235,
  1, 194, :_reduce_236,
  1, 194, :_reduce_none,
  0, 182, :_reduce_238,
  1, 182, :_reduce_none,
  1, 195, :_reduce_none,
  2, 195, :_reduce_none,
  1, 124, :_reduce_242 ]

racc_reduce_n = 243

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDATA_VAR => 35,
  :kDTYPE_UINT => 36,
  :kDTYPE_LINT => 37,
  :kDTYPE_LLINT => 38,
  :kDTYPE_CHAR => 39,
  :kDTYPE_I8 => 40,
  :kDTYPE_I16 => 41,
  :kDTYPE_I32 => 42,
  :kDTYPE_I64 => 43,
  :kDTYPE_UI8 => 44,
  :kDTYPE_UI16 => 45,
  :kDTYPE_UI32 => 46,
  :kDTYPE_UI64 => 47,
  :kDTYPE_INT => 48,
  :kDTYPE_F32 => 49,
  :kDTYPE_F64 => 50,
  :kDTYPE_LF64 => 51,
  :kDTYPE_ROBJ => 52,
  :kDTYPE_ULINT => 53,
  :kDTYPE_ULLINT => 54,
  :kDTYPE_VOID => 55,
  :kDTYPE_SIZE_T => 56,
  :kDTYPE_RB_STR => 57,
  :kDTYPE_UCHAR => 58,
  :kDTYPE_BOOL => 59,
  :tCUSTOM_DTYPE => 60,
  :kDTYPE_RB_ARR => 61,
  :kDTYPE_RB_HSH => 62,
  :tLPAREN => 63,
  :tRPAREN => 64,
  :tLSQUARE => 65,
  :tRSQUARE => 66,
  :tIDENTIFIER => 67,
  :tNL => 68,
  :tCOMMA => 69,
  :tSQUOTE => 70,
  :tSCOLON => 71,
  :EOF => 72,
  :tDOT => 73,
  :tQMARK => 74,
  :tSYMBOL => 75,
  :tLBRACE => 76,
  :tRBRACE => 77,
  :tCOLON => 78,
  :tPLUS => 79,
  :tMINUS => 80,
  :tSTAR => 81,
  :tDIVIDE => 82,
  :tEXPO => 83,
  :tMODULUS => 84,
  :tASSIGN => 85,
  :tEQ => 86,
  :tLT => 87,
  :tLTEQ => 88,
  :tGT => 89,
  :tGTEQ => 90,
  :tANDOP => 91,
  :tOROP => 92,
  :tBANG => 93,
  :tOP_ASSIGN => 94,
  :tSTRING => 95,
  :kSIZEOF => 96,
  :tBIT_AND => 97,
  :tBIT_OR => 98,
  :tBIT_XOR => 99,
  :tBIT_LSHIFT => 100,
  :tBIT_RSHIFT => 101,
  :tBIT_NOT => 102,
  :tINTEGER => 103,
  :tFLOAT => 104,
  :tSINGLE_CHAR => 105,
  :ADDRESS_OF => 106,
  :TYPECAST => 107,
  :UMINUS => 108,
  :tNEQ => 109 }

racc_nt_base = 110

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_30(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_31(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_46(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_70(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_84(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_145(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_146(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_153(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_154(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_162(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_163(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_170(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 629)
  def _reduce_185(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_187(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 642)
  def _reduce_188(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_189(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 652)
  def _reduce_190(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_191(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 662)
  def _reduce_192(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 666)
  def _reduce_193(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 667)
  def _reduce_194(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 670)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 671)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 672)
  def _reduce_197(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_198(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

module_eval(<<'.,.,', 'parser.racc', 688)
  def _reduce_225(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 692)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 696)
  def _reduce_228(val, _values, result)
    
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'parser.racc', 700)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'parser.racc', 704)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 705)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 708)
  def _reduce_234(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 709)
  def _reduce_235(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 712)
  def _reduce_236(val, _values, result)
    
    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'parser.racc', 716)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

module_eval(<<'.,.,', 'parser.racc', 724)
  def _reduce_242(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
