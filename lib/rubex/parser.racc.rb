#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 747)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'23,214,26,27,29,203,188,203,138,30,382,197,52,53,54,19,197,20,18,24',
'5,56,42,6,37,38,73,39,41,233,137,31,17,74,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,196,57,154',
'45,154,224,147,189,266,138,5,55,58,6,7,290,113,66,131,132,372,146,325',
'112,61,359,131,132,131,132,64,290,51,72,67,291,131,132,233,68,48,49',
'50,23,149,26,27,29,310,296,5,291,30,6,295,52,53,54,19,103,20,18,24,5',
'56,42,6,37,38,73,39,41,131,132,31,17,74,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,146,57,147,45',
'5,293,229,6,107,229,231,55,58,231,231,108,145,66,233,146,233,147,378',
'143,61,233,326,109,233,233,64,110,51,72,67,145,424,233,115,68,48,49',
'50,23,296,26,27,29,296,295,124,233,30,295,317,52,53,54,19,295,20,385',
'24,124,56,42,386,37,38,73,39,41,131,132,31,17,74,75,76,77,78,79,80,81',
'82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,402',
'57,124,45,5,401,5,6,136,6,5,55,58,6,131,132,148,66,158,159,160,161,162',
'163,61,318,321,154,319,320,64,154,51,72,67,131,132,165,166,68,48,49',
'50,23,183,26,27,29,160,161,162,163,30,131,132,52,53,54,19,192,20,154',
'24,5,56,42,6,37,38,73,39,41,131,132,31,17,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,194,57',
'198,45,158,159,160,161,162,163,138,55,58,160,161,162,163,66,158,159',
'160,161,162,163,61,5,5,146,6,6,64,205,51,72,67,222,164,165,166,68,48',
'49,50,23,227,26,27,29,5,228,5,6,30,6,235,52,53,54,19,154,20,268,24,5',
'56,42,6,37,38,73,39,41,131,132,31,17,74,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,162,57,5,45',
'5,6,154,6,131,132,273,55,58,131,132,131,132,66,158,159,160,161,162,163',
'61,154,323,349,350,281,64,289,51,72,67,292,164,165,166,68,48,49,50,23',
'299,26,27,29,210,211,212,213,30,131,132,52,53,54,19,300,20,301,24,131',
'56,42,107,37,38,73,39,41,131,132,31,17,74,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,310,57,315',
'45,158,159,160,161,162,163,147,55,58,131,132,131,132,66,349,350,145',
'162,162,162,61,162,189,192,333,339,64,315,51,72,67,351,354,356,360,68',
'48,49,50,23,428,26,27,29,228,368,154,371,30,154,379,52,53,54,19,381',
'20,384,24,387,56,42,389,37,38,73,39,41,154,391,31,17,74,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'65,107,57,397,45,5,400,138,6,406,315,233,55,58,154,389,315,138,66,425',
'429,315,,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53,54',
'19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,45,5',
',,6,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50',
'30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'65,,57,,45,,,,,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72,67,,26,27,29',
'68,48,49,50,30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,65,,57,,45,,,,,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72,67',
',26,27,29,68,48,49,50,30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39,41',
',,31,,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',
'95,96,97,98,99,100,101,65,,57,,45,,,,,,,,55,58,,,,,66,,,,,,,61,,,,,',
'64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53,54,19,,20,,,,56,42,,37',
'38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90',
'91,92,93,94,95,96,97,98,99,100,101,65,,57,,45,,,,,,,,55,58,,,,,66,,',
',,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53,54,19,,20',
',,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,45,5,,,6,,,,55',
'58,,,,,66,,,,,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53',
'54,19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,45',
',,,,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50',
'30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'65,,57,,45,,,,,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72,67,,26,27,29',
'68,48,49,50,30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39,41,,,31,,74,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,65,,57,,45,5,,,6,,,,55,58,,,,,66,,,,,,,61,,,,,,64,,51,72',
'67,,26,27,29,68,48,49,50,30,,,52,53,54,19,,20,,,,56,42,,37,38,73,39',
'41,,,31,,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,65,,57,,45,5,,,6,,,,55,58,,,,,66,,,,,,,61',
',,,,,64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53,54,19,,20,,,,56,42',
',37,38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,45,,,,,,,,55,58,,,,,66',
',,,,,,61,,,,,,64,,51,72,67,,26,27,29,68,48,49,50,30,,,52,53,54,19,,20',
',,,56,42,,37,38,73,39,41,,,31,,74,75,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,45,5,,,6,,,,55',
'58,,52,53,54,66,,,,,,56,61,,,,73,,64,,51,72,67,74,,,,68,48,49,50,,,',
',,,,,,,,,,,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,61',
',,,,,64,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54,,,,,55,58,56',
',,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,,52,53,54',
',127,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51,72,67,,,,,68',
'48,49,50,,65,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,',
'64,,51,72,67,,,,,68,48,49,50,,,,,,,52,53,54,,65,,57,,121,56,,,,,73,',
'55,58,,,,74,66,,,,,,,,,,,,,64,,51,72,67,,,,,68,48,49,50,,65,,57,,121',
'52,53,54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48',
'49,50,,,,,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,61',
',,,,,64,,51,72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,267,55,58',
'56,,,,66,73,,,,,,,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49,50',
',164,165,166,167,168,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66',
',,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55',
'58,56,,,,66,73,,,,,,,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49',
'50,,164,165,166,167,168,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74',
'66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54',
',,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50,,',
',,,,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51',
'72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,',
',,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,,52,53,54,,65,,57,,121',
'56,,,,,73,,55,58,,,,74,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50',
',65,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72',
'67,,,,,68,48,49,50,,,,,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74',
'66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54',
',,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50,,',
',,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,61,,,,,,64',
',51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54,,,,,55,58,56,,,,66,73',
',,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,,52,53,54,,65,,57,',
'121,56,,,,,73,,55,58,,,,74,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49',
'50,,65,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51',
'72,67,,,,,68,48,49,50,,,,,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,',
',,74,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53',
'54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50',
',,,,,,52,53,54,,,,57,,121,56,,,,,73,,55,58,,,,74,158,159,160,161,162',
'163,,169,171,172,173,174,,,,51,72,,164,165,166,167,168,48,49,50,,180',
',57,170,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,,74,158,159,160,161',
'162,163,51,72,67,,,,,68,48,49,50,,164,165,166,167,168,52,53,54,,180',
',57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51,72,67,,,,,68,48',
'49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,,74,158,159',
'160,161,162,163,51,72,67,,,,,68,48,49,50,,164,165,166,167,168,52,53',
'54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51,72,67,,',
',,68,48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,,74',
'158,159,160,161,162,163,51,72,67,,,,,68,48,49,50,,164,165,166,167,168',
'52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51,72',
'67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,',
',,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49,50,,164,165,166,167',
'168,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51',
'72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,',
',,,,,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49,50,,164,165,166',
'167,168,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,',
',,,51,72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66',
'73,,,,,,,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49,50,,164,165',
'166,167,168,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,',
',,,,,,,51,72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56',
',,,66,73,,,,,,,74,158,159,160,161,162,163,51,72,67,,,,,68,48,49,50,',
'164,165,166,167,168,52,53,54,,180,,57,,121,56,,,,,73,,55,58,,,,74,66',
',,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,,180,,57,,121,52,53,54,,,,,55',
'58,56,,,,66,73,,,,,,,74,,,,,,,51,72,67,,,,,68,48,49,50,,,,,,,52,53,54',
',180,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,,,,,,,,,51,72,67,,,,,68',
'48,49,50,,180,,57,,121,52,53,54,,,,,55,58,56,,,,66,73,,,,,,,74,,,,,',
',51,72,67,,,,,68,48,49,50,,,,,,,52,53,54,,180,,57,,121,56,,,,,73,,55',
'58,,,,74,66,,,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53',
'54,,,,,55,58,56,,,,66,73,,,,,,61,74,,,,,64,,51,72,67,,,,,68,48,49,50',
',,,,,,52,53,54,,65,,57,,121,56,,,,,73,,55,58,,,,74,66,,,,,,,61,,,,,',
'64,,51,72,67,,,,,68,48,49,50,,65,,57,,121,52,53,54,52,53,54,,55,58,56',
',,56,66,73,,,73,,,61,74,,,74,,64,,51,72,67,,,,,68,48,49,50,,,,,,,,,',
',65,,57,,121,57,,121,52,53,54,,55,58,,55,58,56,66,,,,73,,,61,,,,74,',
'64,,51,72,67,51,72,,,68,48,49,50,48,49,50,,,,,,,52,53,54,,65,,57,,121',
'56,,,,,73,,55,58,,,,74,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50',
',180,,57,,121,52,53,54,52,53,54,,55,58,56,,,56,66,73,,,73,52,53,54,74',
',,74,,,56,51,72,67,,73,,,68,48,49,50,74,,,,,,,,,,180,,57,,121,57,,121',
',,,,55,58,,55,58,,66,,57,,121,,,,,,,,55,58,,51,72,67,51,72,,376,68,48',
'49,50,48,49,50,,,,,51,72,19,,20,,,,48,49,50,,,,,,,,,,,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'19,,20,,,5,,,6,,,,,,,,,,,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,267,,,,,,275,,,,,,,,,,158,159',
'160,161,162,163,,169,171,172,173,174,287,,,,,,164,165,166,167,168,,',
',,,,,170,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',
'95,96,97,98,99,100,101,267,,,,,,,,,,,,,,,,158,159,160,161,162,163,,',
'210,211,212,213,,,,,,,164,165,166,167,168,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,,,,,,5,,,6,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,,-29,,,,,-29,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,,,,,344,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,,,,,344,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,101,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,75,76,77,78,79,80,81,82,83,84,85,86,87,88',
'89,90,91,92,93,94,95,96,97,98,99,100,101,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97',
'98,99,100,101,158,159,160,161,162,163,,,210,211,212,213,,,,,,,164,165',
'166,167,168' ]
        racc_action_table = arr = ::Array.new(4917, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,130,2,2,2,125,108,392,43,2,338,114,2,2,2,2,138,2,2,2,0,2,2,0,2,2,2',
'2,2,338,43,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,114,2,125,2,392,138,224,108,176,247,3,2,2,3,1,224,20,2,130,130,327',
'47,247,20,2,308,125,125,392,392,2,196,2,2,2,224,176,176,327,2,2,2,2',
'105,47,105,105,105,308,200,8,196,105,8,200,105,105,105,105,7,105,105',
'105,11,105,105,11,105,105,105,105,105,36,36,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,45,105,45,105,105,199,142,105,16,403',
'142,105,105,403,314,17,45,105,248,121,199,121,332,45,105,142,248,18',
'403,314,105,19,105,105,105,121,410,332,23,105,105,105,105,106,217,106',
'106,106,218,217,27,410,106,218,237,106,106,106,106,237,106,341,106,37',
'106,106,341,106,106,106,106,106,118,118,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,363,106,39,106,106,363,41,106,42,41,219',
'106,106,219,186,186,46,106,255,255,255,255,255,255,106,239,243,57,239',
'243,106,58,106,106,106,201,201,255,255,106,106,106,106,271,72,271,271',
'271,249,249,249,249,271,223,223,271,271,271,271,109,271,110,271,274',
'271,271,274,271,271,271,271,271,234,234,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,111,271,115,271,256,256,256,256,256,256',
'119,271,271,250,250,250,250,271,258,258,258,258,258,258,271,282,328',
'122,282,328,271,126,271,271,271,136,258,258,258,271,271,271,271,373',
'139,373,373,373,359,140,360,359,373,360,145,373,373,373,373,152,373',
'178,373,397,373,373,397,373,373,373,373,373,238,238,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,179,373,407,373,373,407,187',
'373,240,240,189,373,373,241,241,242,242,373,259,259,259,259,259,259',
'373,245,245,297,297,192,373,195,373,373,373,197,259,259,259,373,373',
'373,373,375,206,375,375,375,300,300,301,301,375,313,313,375,375,375',
'375,208,375,209,375,216,375,375,220,375,375,375,375,375,346,346,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,221,375,230,375',
'257,257,257,257,257,257,231,375,375,366,366,367,367,375,426,426,235',
'251,252,253,375,254,272,275,281,287,375,293,375,375,375,298,302,307',
'310,375,375,375,375,422,422,422,422,422,312,322,323,325,422,329,334',
'422,422,422,422,336,422,340,422,343,422,422,344,422,422,422,422,422',
'345,347,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,355',
'422,357,422,422,361,370,422,374,378,383,422,422,385,387,400,414,422',
'415,423,429,,,,422,,,,,,422,,422,422,422,,135,135,135,422,422,422,422',
'135,,,135,135,135,135,,135,,,,135,135,,135,135,135,135,135,,,135,,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,,135,,135,135,,,135,,,,135',
'135,,,,,135,,,,,,,135,,,,,,135,,135,135,135,,202,202,202,135,135,135',
'135,202,,,202,202,202,202,,202,,,,202,202,,202,202,202,202,202,,,202',
',202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,,202,,202,,,,,,,,202',
'202,,,,,202,,,,,,,202,,,,,,202,,202,202,202,,205,205,205,202,202,202',
'202,205,,,205,205,205,205,,205,,,,205,205,,205,205,205,205,205,,,205',
',205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,,205,,205,,,,,,,,205',
'205,,,,,205,,,,,,,205,,,,,,205,,205,205,205,,214,214,214,205,205,205',
'205,214,,,214,214,214,214,,214,,,,214,214,,214,214,214,214,214,,,214',
',214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,,214,,214,,,,,,,,214',
'214,,,,,214,,,,,,,214,,,,,,214,,214,214,214,,288,288,288,214,214,214',
'214,288,,,288,288,288,288,,288,,,,288,288,,288,288,288,288,288,,,288',
',288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,,288,,288,,,,,,,,288',
'288,,,,,288,,,,,,,288,,,,,,288,,288,288,288,,306,306,306,288,288,288',
'288,306,,,306,306,306,306,,306,,,,306,306,,306,306,306,306,306,,,306',
',306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,,306,,306,306,,,306',
',,,306,306,,,,,306,,,,,,,306,,,,,,306,,306,306,306,,350,350,350,306',
'306,306,306,350,,,350,350,350,350,,350,,,,350,350,,350,350,350,350,350',
',,350,,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,350,,350,,350,,,,,,',
',350,350,,,,,350,,,,,,,350,,,,,,350,,350,350,350,,390,390,390,350,350',
'350,350,390,,,390,390,390,390,,390,,,,390,390,,390,390,390,390,390,',
',390,,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,,390,,390,,,,,,',
',390,390,,,,,390,,,,,,,390,,,,,,390,,390,390,390,,398,398,398,390,390',
'390,390,398,,,398,398,398,398,,398,,,,398,398,,398,398,398,398,398,',
',398,,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398',
'398,398,398,398,398,398,398,398,398,398,398,398,398,,398,,398,398,,',
'398,,,,398,398,,,,,398,,,,,,,398,,,,,,398,,398,398,398,,399,399,399',
'398,398,398,398,399,,,399,399,399,399,,399,,,,399,399,,399,399,399,399',
'399,,,399,,399,399,399,399,399,399,399,399,399,399,399,399,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,399,399,399,,399,,399,399',
',,399,,,,399,399,,,,,399,,,,,,,399,,,,,,399,,399,399,399,,416,416,416',
'399,399,399,399,416,,,416,416,416,416,,416,,,,416,416,,416,416,416,416',
'416,,,416,,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,416,416,416,416,,416,,416,,',
',,,,,416,416,,,,,416,,,,,,,416,,,,,,416,,416,416,416,,417,417,417,416',
'416,416,416,417,,,417,417,417,417,,417,,,,417,417,,417,417,417,417,417',
',,417,,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,,417,,417,417,,',
'417,,,,417,417,,26,26,26,417,,,,,,26,417,,,,26,,417,,417,417,417,26',
',,,417,417,417,417,,,,,,,,,,,,,,,,,29,29,29,,26,,26,,26,29,,,,,29,,26',
'26,,,,29,26,,,,,,,26,,,,,,26,,26,26,26,,,,,26,26,26,26,,29,,29,,29,30',
'30,30,,,,,29,29,30,,,,29,30,,,,,,29,30,,,,,29,,29,29,29,,,,,29,29,29',
'29,,,,,,,31,31,31,,30,,30,,30,31,,,,,31,,30,30,,,,31,30,,,,,,,,,,,,',
',,30,30,30,,,,,30,30,30,30,,31,,31,,31,60,60,60,,,,,31,31,60,,,,31,60',
',,,,,31,60,,,,,31,,31,31,31,,,,,31,31,31,31,,,,,,,64,64,64,,60,,60,',
'60,64,,,,,64,,60,60,,,,64,60,,,,,,,,,,,,,60,,60,60,60,,,,,60,60,60,60',
',64,,64,,64,65,65,65,,,,,64,64,65,,,,64,65,,,,,,64,65,,,,,64,,64,64',
'64,,,,,64,64,64,64,,,,,,,66,66,66,,65,,65,,65,66,,,,,66,,65,65,,,,66',
'65,,,,,,,65,,,,,,65,,65,65,65,,,,,65,65,65,65,,66,,66,,66,67,67,67,',
',,269,66,66,67,,,,66,67,,,,,,,67,269,269,269,269,269,269,66,66,66,,',
',,66,66,66,66,,269,269,269,269,269,68,68,68,,67,,67,,67,68,,,,,68,,67',
'67,,,,68,67,,,,,,,,,,,,,,,67,67,67,,,,,67,67,67,67,,68,,68,,68,107,107',
'107,,,,,68,68,107,,,,68,107,,,,,,,107,260,260,260,260,260,260,68,68',
'68,,,,,68,68,68,68,,260,260,260,260,260,123,123,123,,107,,107,,107,123',
',,,,123,,107,107,,,,123,107,,,,,,,107,,,,,,107,,107,107,107,,,,,107',
'107,107,107,,123,,123,,123,127,127,127,,,,,123,123,127,,,,123,127,,',
',,,123,127,,,,,123,,123,123,123,,,,,123,123,123,123,,,,,,,131,131,131',
',127,,127,,127,131,,,,,131,,127,127,,,,131,127,,,,,,,,,,,,,,,127,127',
'127,,,,,127,127,127,127,,131,,131,,131,132,132,132,,,,,131,131,132,',
',,131,132,,,,,,131,132,,,,,131,,131,131,131,,,,,131,131,131,131,,,,',
',,133,133,133,,132,,132,,132,133,,,,,133,,132,132,,,,133,132,,,,,,,132',
',,,,,132,,132,132,132,,,,,132,132,132,132,,133,,133,,133,134,134,134',
',,,,133,133,134,,,,133,134,,,,,,133,134,,,,,133,,133,133,133,,,,,133',
'133,133,133,,,,,,,137,137,137,,134,,134,,134,137,,,,,137,,134,134,,',
',137,134,,,,,,,134,,,,,,134,,134,134,134,,,,,134,134,134,134,,137,,137',
',137,143,143,143,,,,,137,137,143,,,,137,143,,,,,,137,143,,,,,137,,137',
'137,137,,,,,137,137,137,137,,,,,,,146,146,146,,143,,143,,143,146,,,',
',146,,143,143,,,,146,143,,,,,,,143,,,,,,143,,143,143,143,,,,,143,143',
'143,143,,146,,146,,146,147,147,147,,,,,146,146,147,,,,146,147,,,,,,146',
'147,,,,,146,,146,146,146,,,,,146,146,146,146,,,,,,,148,148,148,,147',
',147,,147,148,,,,,148,,147,147,,,,148,147,,,,,,,147,,,,,,147,,147,147',
'147,,,,,147,147,147,147,,148,,148,,148,149,149,149,,,,,148,148,149,',
',,148,149,,,,,,148,149,,,,,148,,148,148,148,,,,,148,148,148,148,,,,',
',,151,151,151,,149,,149,,149,151,,,,,151,,149,149,,,,151,149,,,,,,,149',
',,,,,149,,149,149,149,,,,,149,149,149,149,,151,,151,,151,155,155,155',
',,,,151,151,155,,,,151,155,,,,,,151,155,,,,,151,,151,151,151,,,,,151',
'151,151,151,,,,,,,158,158,158,,,,155,,155,158,,,,,158,,155,155,,,,158',
'62,62,62,62,62,62,,62,62,62,62,62,,,,155,155,,62,62,62,62,62,155,155',
'155,,158,,158,62,158,159,159,159,,,,,158,158,159,,,,158,159,,,,,,,159',
'261,261,261,261,261,261,158,158,158,,,,,158,158,158,158,,261,261,261',
'261,261,160,160,160,,159,,159,,159,160,,,,,160,,159,159,,,,160,159,',
',,,,,,,,,,,,,159,159,159,,,,,159,159,159,159,,160,,160,,160,161,161',
'161,,,,,160,160,161,,,,160,161,,,,,,,161,262,262,262,262,262,262,160',
'160,160,,,,,160,160,160,160,,262,262,262,262,262,162,162,162,,161,,161',
',161,162,,,,,162,,161,161,,,,162,161,,,,,,,,,,,,,,,161,161,161,,,,,161',
'161,161,161,,162,,162,,162,163,163,163,,,,,162,162,163,,,,162,163,,',
',,,,163,263,263,263,263,263,263,162,162,162,,,,,162,162,162,162,,263',
'263,263,263,263,164,164,164,,163,,163,,163,164,,,,,164,,163,163,,,,164',
'163,,,,,,,,,,,,,,,163,163,163,,,,,163,163,163,163,,164,,164,,164,165',
'165,165,,,,,164,164,165,,,,164,165,,,,,,,165,264,264,264,264,264,264',
'164,164,164,,,,,164,164,164,164,,264,264,264,264,264,166,166,166,,165',
',165,,165,166,,,,,166,,165,165,,,,166,165,,,,,,,,,,,,,,,165,165,165',
',,,,165,165,165,165,,166,,166,,166,167,167,167,,,,,166,166,167,,,,166',
'167,,,,,,,167,265,265,265,265,265,265,166,166,166,,,,,166,166,166,166',
',265,265,265,265,265,168,168,168,,167,,167,,167,168,,,,,168,,167,167',
',,,168,167,,,,,,,,,,,,,,,167,167,167,,,,,167,167,167,167,,168,,168,',
'168,169,169,169,,,,,168,168,169,,,,168,169,,,,,,,169,394,394,394,394',
'394,394,168,168,168,,,,,168,168,168,168,,394,394,394,394,394,170,170',
'170,,169,,169,,169,170,,,,,170,,169,169,,,,170,169,,,,,,,,,,,,,,,169',
'169,169,,,,,169,169,169,169,,170,,170,,170,171,171,171,,,,,170,170,171',
',,,170,171,,,,,,,171,395,395,395,395,395,395,170,170,170,,,,,170,170',
'170,170,,395,395,395,395,395,172,172,172,,171,,171,,171,172,,,,,172',
',171,171,,,,172,171,,,,,,,,,,,,,,,171,171,171,,,,,171,171,171,171,,172',
',172,,172,173,173,173,,,,,172,172,173,,,,172,173,,,,,,,173,,,,,,,172',
'172,172,,,,,172,172,172,172,,,,,,,174,174,174,,173,,173,,173,174,,,',
',174,,173,173,,,,174,173,,,,,,,,,,,,,,,173,173,173,,,,,173,173,173,173',
',174,,174,,174,180,180,180,,,,,174,174,180,,,,174,180,,,,,,,180,,,,',
',,174,174,174,,,,,174,174,174,174,,,,,,,228,228,228,,180,,180,,180,228',
',,,,228,,180,180,,,,228,180,,,,,,,,,,,,,,,180,180,180,,,,,180,180,180',
'180,,228,,228,,228,295,295,295,,,,,228,228,295,,,,228,295,,,,,,228,295',
',,,,228,,228,228,228,,,,,228,228,228,228,,,,,,,319,319,319,,295,,295',
',295,319,,,,,319,,295,295,,,,319,295,,,,,,,295,,,,,,295,,295,295,295',
',,,,295,295,295,295,,319,,319,,319,320,320,320,324,324,324,,319,319',
'320,,,324,319,320,,,324,,,319,320,,,324,,319,,319,319,319,,,,,319,319',
'319,319,,,,,,,,,,,320,,320,,320,324,,324,349,349,349,,320,320,,324,324',
'349,320,,,,349,,,320,,,,349,,320,,320,320,320,324,324,,,320,320,320',
'320,324,324,324,,,,,,,352,352,352,,349,,349,,349,352,,,,,352,,349,349',
',,,352,349,,,,,,,349,,,,,,349,,349,349,349,,,,,349,349,349,349,,352',
',352,,352,353,353,353,369,369,369,,352,352,353,,,369,352,353,,,369,389',
'389,389,353,,,369,,,389,352,352,352,,389,,,352,352,352,352,389,,,,,',
',,,,353,,353,,353,369,,369,,,,,353,353,,369,369,,353,,389,,389,,,,,',
',,389,389,,353,353,353,369,369,,330,353,353,353,353,369,369,369,,,,',
'389,389,330,,330,,,,389,389,389,,,,,,,,,,,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,190,,190,,,330,,,330,,,,,,,,,,,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,177,,,,,,190,,,,,,,,,,177,177,177,177,177,177,,177,177,177',
'177,177,194,,,,,,177,177,177,177,177,,,,,,,,177,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,207,,,,,,,,,,,,,,,,207,207,207,207,207,207,,,207',
'207,207,207,,,,,,,207,207,207,207,207,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,,,,,,335,,,335,315,315,315,315,315,315,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,,315,,,',
',315,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,,,,,289,386,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,386,386,386,,,,,386,24,24,24,24,24,24,24,24,24,24,24,24',
'24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,61,61,61,61,61,61,61,61',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,401,401,401,401,401,401,401',
'401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401',
'401,401,401,129,129,129,129,129,129,,,129,129,129,129,,,,,,,129,129',
'129,129,129' ]
        racc_action_check = arr = ::Array.new(4917, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   -48,    76,    -2,     4,   nil,   nil,   nil,   121,    44,   nil,
   nil,    57,   nil,   nil,   nil,   nil,   169,   115,    98,   131,
    18,   nil,   nil,   183,  4696,   nil,  1844,   154,   nil,  1889,
  1943,  1988,   nil,   nil,   nil,   nil,    42,   167,   nil,   211,
   nil,   210,   263,   -65,   nil,   104,   202,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   231,   235,   nil,
  2042,  4723,  3033,   nil,  2087,  2141,  2186,  2240,  2285,   nil,
   nil,   nil,   253,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   103,   208,  2339,   -19,   264,
   265,   291,   nil,   nil,    -5,   306,   nil,   nil,   147,   314,
   nil,   123,   341,  2384,   nil,    -4,   395,  2438,   nil,  4814,
   -12,  2483,  2537,  2582,  2636,   724,   345,  2681,     0,   352,
   340,   nil,   110,  2735,   nil,   364,  2780,  2834,  2879,  2933,
   nil,  2978,   368,   nil,   nil,  3032,   nil,   nil,  3077,  3131,
  3176,  3230,  3275,  3329,  3374,  3428,  3473,  3527,  3572,  3626,
  3671,  3725,  3770,  3824,  3869,   nil,     6,  4421,   374,   398,
  3923,   nil,   nil,  4750,   nil,   nil,   194,   420,  4777,   425,
  4422,   nil,   433,  4804,  4496,   450,    19,   443,   nil,   105,
    47,   215,   820,   nil,   nil,   916,   462,  4495,   474,   476,
   nil,   nil,   nil,   nil,  1012,   nil,   453,   147,   151,   214,
   542,   556,   nil,   233,     3,   nil,   nil,   nil,  3968,   nil,
   526,   532,   nil,   nil,   252,   528,   nil,   157,   357,   231,
   398,   403,   405,   232,   nil,   439,   nil,    -2,   103,   238,
   308,   524,   525,   526,   528,   210,   301,   511,   315,   420,
  2295,  3087,  3186,  3285,  3384,  3483,   nil,   nil,   nil,  2196,
   nil,   313,   525,   nil,   267,   547,   nil,   nil,   nil,   nil,
   nil,   519,   334,   nil,   nil,   nil,   nil,   549,  1108,  4632,
   nil,   nil,   nil,   555,   nil,  4022,   nil,   502,   619,   nil,
   442,   442,   620,   nil,   nil,   nil,  1204,   621,    79,   nil,
   558,   nil,   549,   443,   114,  4598,   nil,   nil,   nil,  4067,
  4121,   nil,   559,   569,  4124,   548,   nil,    18,   335,   572,
  4376,   nil,   122,   nil,   638,  4562,   577,   nil,   -53,   nil,
   645,   164,   nil,   583,   567,   591,   462,   657,   nil,  4178,
  1300,   nil,  4223,  4277,   nil,   686,   nil,   662,   nil,   357,
   359,   633,   nil,   208,   nil,   nil,   508,   510,   nil,  4280,
   625,   nil,   nil,   418,   697,   523,   nil,   nil,   638,   nil,
   nil,   nil,   nil,   620,   nil,   637,  4664,   620,   nil,  4295,
  1396,   nil,    -2,   nil,  3582,  3681,   nil,   372,  1492,  1588,
   644,  4831,   nil,   113,   nil,   nil,   nil,   416,   nil,   nil,
   136,   nil,   nil,   nil,   635,   707,  1684,  1780,   nil,   nil,
   nil,   nil,   628,   647,   nil,   nil,   598,   nil,   nil,   649,
   nil,   nil ]

racc_action_default = [
  -237,  -248,    -6,  -238,  -239,  -241,  -242,  -248,  -237,    -2,
    -4,  -248,    -7,    -9,   -10,   -11,   -12,  -248,  -248,  -248,
  -248,   -49,   -50,   -56,  -248,   -62,  -231,  -233,   -65,  -248,
  -248,  -248,   -70,   -71,   -72,   -73,   -74,  -233,   -76,  -233,
   -78,  -248,  -248,  -175,  -115,  -196,  -183,  -196,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -243,  -243,  -151,
  -248,  -248,  -156,  -157,  -248,  -248,  -248,  -248,  -248,  -184,
  -185,  -187,  -248,  -189,  -190,  -204,  -205,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -230,  -240,   432,    -1,  -238,    -5,  -248,   -15,   -18,
  -248,  -248,   -42,   -43,  -248,  -248,  -115,   -63,  -232,  -175,
  -183,  -196,  -196,  -198,  -234,  -248,  -248,  -248,   -92,  -248,
  -248,  -248,  -248,  -198,  -198,   -59,  -248,  -248,  -248,  -105,
  -108,  -109,  -248,  -248,  -186,  -248,  -198,  -248,  -248,  -248,
  -193,  -117,  -244,  -245,  -247,  -134,  -152,  -115,  -248,  -248,
  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -248,  -248,  -248,  -248,  -248,  -158,  -248,  -156,  -157,  -171,
  -248,  -172,  -173,  -248,    -3,    -8,   -67,  -248,  -248,  -248,
   -22,   -19,  -248,   -35,  -248,  -143,  -141,  -248,   -57,  -248,
  -235,  -199,   -59,   -99,  -100,   -59,  -248,  -248,  -248,  -248,
   -95,   -96,   -97,   -98,   -59,  -153,  -154,  -235,  -235,  -237,
   -60,   -81,   -89,   -90,  -141,  -194,  -195,  -115,  -248,  -115,
   -32,  -112,  -113,  -116,  -120,  -192,  -191,  -248,  -202,  -248,
  -121,  -122,  -118,  -248,  -246,  -243,  -135,  -248,  -248,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -176,  -177,  -178,  -179,  -180,  -181,  -159,  -174,  -182,  -248,
  -115,    -6,   -15,   -16,  -248,  -248,   -23,   -25,   -26,   -27,
  -115,  -248,  -237,   -36,  -115,   -41,  -115,  -248,   -59,  -248,
  -139,  -140,  -142,   -32,   -64,  -248,  -236,  -101,  -248,   -91,
  -248,  -248,  -248,   -75,   -77,   -58,  -238,  -248,   -85,   -82,
  -248,  -106,  -107,  -114,  -248,  -115,  -111,  -197,  -201,  -248,
  -248,  -132,  -248,  -243,  -248,  -248,  -155,  -248,  -237,  -248,
  -248,   -20,  -248,   -21,  -248,  -238,   -38,   -40,   -44,  -115,
  -248,  -248,  -145,  -248,  -149,  -248,  -200,  -248,  -102,  -248,
   -59,   -68,  -248,  -248,   -69,   -61,   -79,   -87,   -83,  -248,
  -248,  -248,   -30,  -248,  -115,   -55,  -203,  -119,  -133,  -248,
  -137,  -138,  -188,  -238,  -248,    -6,   -17,   -24,   -32,   -34,
   -37,  -115,  -115,   -45,   -51,  -248,  -248,  -149,  -148,  -248,
   -59,   -66,  -248,  -104,   -93,   -94,   -80,  -248,   -59,   -59,
   -32,  -115,   -33,   -53,   -54,  -136,   -13,  -248,   -28,   -39,
   -47,  -144,  -146,  -147,  -150,  -248,   -59,   -59,   -86,   -84,
  -110,   -31,  -248,  -248,   -48,   -52,  -101,   -88,   -14,   -32,
  -103,   -46 ]

racc_goto_table = [
    16,     2,   140,    43,     3,   316,   202,    46,   185,   104,
   193,   246,   105,   141,   102,   106,   191,   116,   283,   276,
   187,     9,   278,   279,   328,   204,   128,   309,   151,   155,
   342,   388,   362,   195,   150,     1,   123,     8,   294,   347,
   200,    47,   190,   274,   118,   135,   133,   125,   134,   130,
   217,   218,   244,   363,   157,   303,   304,   225,   282,   336,
   111,   285,   423,   237,   114,   288,   117,   199,   345,   126,
   307,   308,   357,   396,   413,   352,   353,   139,   361,   243,
   245,   324,   175,   176,   341,   156,   178,   271,   236,   239,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,    16,   nil,    43,    43,   248,   150,
    46,    46,   nil,   nil,   358,   nil,   102,   102,   421,   nil,
   nil,   nil,   nil,   206,   184,   186,   nil,   412,   407,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,
    46,   201,   nil,   226,    47,    47,   102,   232,   nil,   215,
   216,   201,   201,   408,   nil,   223,   247,   nil,   nil,   377,
   380,   234,   278,   279,   201,   238,   240,   241,   430,   242,
   nil,   nil,   nil,   nil,    47,   420,   270,   nil,   nil,   nil,
   314,   272,   331,   280,   329,   312,   284,   286,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   311,   nil,   nil,   nil,
   nil,   nil,   nil,    43,   431,   nil,    43,    46,   nil,   nil,
    46,   nil,   nil,   nil,   nil,    43,   322,   nil,   nil,    46,
   305,   327,   nil,   306,   nil,   405,   nil,   nil,   nil,   375,
   nil,   332,   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil,
   nil,    47,   337,   nil,    47,   390,   313,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,
   nil,   nil,    43,   416,   nil,   185,    46,   nil,   330,   nil,
   nil,   nil,   343,   334,   nil,   411,   335,   221,   nil,    43,
   383,   nil,   204,    46,   369,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   355,   nil,   nil,    43,   364,   nil,
    47,    46,   nil,   346,   nil,   403,   nil,   102,   nil,   232,
   nil,   nil,   404,   280,   185,   370,   nil,    47,   284,   374,
   nil,   nil,   373,   410,   nil,   nil,   nil,   366,   367,   409,
   nil,   102,   nil,   nil,   nil,    47,   102,   nil,   nil,   nil,
   129,    43,   nil,   nil,   297,    46,   nil,   298,   nil,   nil,
   nil,   nil,   nil,   398,   399,   nil,   302,   392,   nil,   nil,
   247,    16,   nil,    16,    43,   nil,    43,   nil,    46,   343,
    46,   nil,   nil,   nil,   102,   177,   179,   181,   182,    47,
   414,    43,   nil,   nil,   364,    46,   nil,   nil,   nil,    43,
    43,   417,   nil,    46,    46,   nil,   nil,   nil,   232,   102,
   102,   422,    47,   nil,    47,   nil,   nil,    43,    43,   nil,
    16,    46,    46,    43,   nil,   nil,   nil,    46,   102,    47,
   nil,   nil,   nil,   102,   nil,   nil,   nil,    47,    47,   nil,
   340,   nil,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    47,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   nil,   nil,   nil,   nil,   nil,
   269,   nil,   393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   415,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   418,   419,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   426,   427,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   394,   395 ]

racc_goto_check = [
    12,     2,    30,    59,     5,    24,    48,    68,     8,     2,
    14,    74,     5,    66,    86,     5,    18,    15,    28,    19,
    13,     4,    21,    22,     7,    14,    60,    58,    72,    72,
    77,    78,    26,    37,    83,     1,    43,     3,    45,    49,
    44,    70,    16,    17,    47,     5,    43,    47,    43,    47,
    44,    44,    14,    25,    15,    45,    45,    37,    27,    29,
    31,    32,    33,    44,    36,    38,    42,    23,    24,    50,
    54,    55,    56,    57,    78,    62,    63,    65,    67,    69,
    73,    75,    47,    47,    76,    79,    81,    14,    82,    85,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,    12,   nil,    59,    59,    23,    83,
    68,    68,   nil,   nil,    58,   nil,    86,    86,    26,   nil,
   nil,   nil,   nil,    60,     4,    47,   nil,    77,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,
    68,    47,   nil,    68,    70,    70,    86,    68,   nil,    47,
    47,    47,    47,    24,   nil,    47,    59,   nil,   nil,    19,
    28,    47,    21,    22,    47,    47,    47,    47,    49,    47,
   nil,   nil,   nil,   nil,    70,    24,    15,   nil,   nil,   nil,
    23,    15,    18,    15,    13,    30,    15,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,   nil,
   nil,   nil,   nil,    59,    24,   nil,    59,    68,   nil,   nil,
    68,   nil,   nil,   nil,   nil,    59,    72,   nil,   nil,    68,
     2,    23,   nil,     5,   nil,    74,   nil,   nil,   nil,    14,
   nil,    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,    70,    30,   nil,    70,    14,    47,   nil,   nil,   nil,
   nil,   nil,   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,    59,    48,   nil,     8,    68,   nil,     5,   nil,
   nil,   nil,    15,     2,   nil,    14,     5,    39,   nil,    59,
    23,   nil,    14,    68,    72,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,   nil,    59,    15,   nil,
    70,    68,   nil,    47,   nil,    23,   nil,    86,   nil,    68,
   nil,   nil,    30,    15,     8,    59,   nil,    70,    15,     2,
   nil,   nil,     5,    23,   nil,   nil,   nil,    47,    47,    30,
   nil,    86,   nil,   nil,   nil,    70,    86,   nil,   nil,   nil,
    61,    59,   nil,   nil,    39,    68,   nil,    39,   nil,   nil,
   nil,   nil,   nil,     5,     5,   nil,    39,    47,   nil,   nil,
    59,    12,   nil,    12,    59,   nil,    59,   nil,    68,    15,
    68,   nil,   nil,   nil,    86,    61,    61,    61,    61,    70,
    59,    59,   nil,   nil,    15,    68,   nil,   nil,   nil,    59,
    59,     5,   nil,    68,    68,   nil,   nil,   nil,    68,    86,
    86,     5,    70,   nil,    70,   nil,   nil,    59,    59,   nil,
    12,    68,    68,    59,   nil,   nil,   nil,    68,    86,    70,
   nil,   nil,   nil,    86,   nil,   nil,   nil,    70,    70,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    70,    70,   nil,   nil,   nil,
   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,   nil,   nil,   nil,   nil,   nil,
    61,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    35,     1,    35,    19,     4,   nil,  -247,   -98,   nil,
   nil,   nil,    -2,   -88,  -100,    -7,   -67,  -147,   -93,  -171,
   nil,  -168,  -167,   -49,  -225,  -262,  -283,  -135,  -175,  -225,
   -42,    40,  -133,  -348,   nil,   nil,    41,   -81,  -130,   152,
   nil,   nil,    40,     9,   -83,  -162,   nil,    18,  -119,  -258,
    39,   nil,   nil,   nil,  -151,  -150,  -236,  -284,  -194,     1,
    -4,   320,  -225,  -225,   nil,    33,   -31,  -236,     5,   -72,
    39,   nil,   -29,   -75,  -144,  -166,  -205,  -259,  -313,    25,
   nil,    21,   -57,   -13,   nil,   -58,    11,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   220,   nil,   153,    44,   nil,   nil,   nil,   nil,
   277,    33,    35,   142,   nil,   nil,   nil,   nil,   nil,   nil,
   365,   nil,   nil,   nil,    21,    22,   nil,   nil,   nil,   nil,
   219,    25,   nil,   nil,   nil,   nil,    28,    36,   nil,   nil,
   nil,    32,    34,    40,   nil,   nil,   nil,   nil,   nil,   119,
   nil,    62,   208,   209,   348,   nil,   nil,   230,   120,   nil,
   122,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,
    60,    63,    69,   144,    71,   nil,     4,   152 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 112, :_reduce_1,
  1, 114, :_reduce_2,
  3, 114, :_reduce_3,
  1, 115, :_reduce_4,
  2, 115, :_reduce_5,
  0, 118, :_reduce_6,
  1, 118, :_reduce_7,
  3, 118, :_reduce_8,
  1, 119, :_reduce_9,
  1, 119, :_reduce_10,
  1, 119, :_reduce_11,
  1, 119, :_reduce_12,
  7, 121, :_reduce_13,
  9, 122, :_reduce_14,
  0, 124, :_reduce_15,
  2, 124, :_reduce_16,
  6, 117, :_reduce_17,
  0, 127, :_reduce_18,
  1, 127, :_reduce_19,
  3, 127, :_reduce_20,
  3, 129, :_reduce_21,
  0, 128, :_reduce_22,
  1, 128, :_reduce_23,
  3, 128, :_reduce_24,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  4, 131, :_reduce_28,
  0, 136, :_reduce_29,
  1, 136, :_reduce_30,
  3, 136, :_reduce_31,
  0, 135, :_reduce_32,
  3, 135, :_reduce_33,
  6, 132, :_reduce_34,
  0, 138, :_reduce_35,
  1, 138, :_reduce_36,
  3, 138, :_reduce_37,
  2, 139, :_reduce_38,
  3, 140, :_reduce_39,
  1, 140, :_reduce_40,
  4, 133, :_reduce_41,
  1, 142, :_reduce_none,
  1, 142, :_reduce_43,
  2, 143, :_reduce_44,
  3, 143, :_reduce_45,
  7, 143, :_reduce_46,
  0, 144, :_reduce_47,
  1, 144, :_reduce_48,
  1, 120, :_reduce_49,
  1, 120, :_reduce_50,
  6, 145, :_reduce_51,
  8, 146, :_reduce_52,
  2, 137, :_reduce_53,
  2, 137, :_reduce_54,
  1, 137, :_reduce_55,
  0, 147, :_reduce_56,
  2, 147, :_reduce_57,
  2, 150, :_reduce_58,
  0, 151, :_reduce_59,
  1, 151, :_reduce_60,
  3, 151, :_reduce_61,
  1, 123, :_reduce_62,
  2, 123, :_reduce_63,
  4, 123, :_reduce_64,
  1, 123, :_reduce_65,
  6, 123, :_reduce_66,
  3, 123, :_reduce_67,
  5, 123, :_reduce_68,
  5, 123, :_reduce_69,
  1, 123, :_reduce_70,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_74,
  4, 123, :_reduce_75,
  1, 123, :_reduce_76,
  4, 123, :_reduce_77,
  1, 123, :_reduce_none,
  5, 164, :_reduce_79,
  3, 165, :_reduce_80,
  0, 166, :_reduce_81,
  1, 166, :_reduce_82,
  2, 166, :_reduce_83,
  4, 169, :_reduce_84,
  0, 167, :_reduce_85,
  3, 167, :_reduce_86,
  0, 168, :_reduce_87,
  3, 168, :_reduce_88,
  3, 163, :_reduce_89,
  3, 162, :_reduce_90,
  3, 161, :_reduce_91,
  1, 161, :_reduce_none,
  5, 171, :_reduce_93,
  5, 171, :_reduce_94,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  0, 160, :_reduce_101,
  1, 160, :_reduce_102,
  5, 160, :_reduce_103,
  2, 175, :_reduce_104,
  2, 152, :_reduce_105,
  3, 176, :_reduce_106,
  3, 176, :_reduce_107,
  1, 176, :_reduce_108,
  1, 176, :_reduce_109,
  6, 141, :_reduce_110,
  3, 141, :_reduce_111,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 177, :_reduce_114,
  0, 134, :_reduce_115,
  2, 134, :_reduce_116,
  0, 180, :_reduce_117,
  1, 180, :_reduce_118,
  3, 180, :_reduce_119,
  3, 157, :_reduce_120,
  3, 157, :_reduce_121,
  3, 157, :_reduce_122,
  1, 182, :_reduce_123,
  1, 182, :_reduce_124,
  1, 182, :_reduce_125,
  1, 182, :_reduce_126,
  1, 182, :_reduce_127,
  1, 182, :_reduce_128,
  1, 182, :_reduce_129,
  1, 182, :_reduce_130,
  1, 182, :_reduce_131,
  4, 182, :_reduce_132,
  5, 182, :_reduce_133,
  0, 184, :_reduce_134,
  1, 184, :_reduce_135,
  4, 184, :_reduce_136,
  3, 185, :_reduce_137,
  2, 186, :_reduce_none,
  2, 148, :_reduce_139,
  2, 148, :_reduce_140,
  1, 148, :_reduce_141,
  2, 148, :_reduce_142,
  0, 149, :_reduce_143,
  4, 149, :_reduce_144,
  1, 187, :_reduce_145,
  3, 187, :_reduce_146,
  3, 188, :_reduce_147,
  2, 188, :_reduce_148,
  0, 189, :_reduce_149,
  2, 189, :_reduce_150,
  1, 158, :_reduce_151,
  2, 158, :_reduce_152,
  3, 158, :_reduce_153,
  3, 158, :_reduce_154,
  4, 191, :_reduce_155,
  1, 190, :_reduce_156,
  1, 190, :_reduce_157,
  2, 190, :_reduce_158,
  3, 190, :_reduce_159,
  3, 172, :_reduce_160,
  3, 172, :_reduce_161,
  3, 172, :_reduce_162,
  3, 172, :_reduce_163,
  3, 172, :_reduce_164,
  3, 172, :_reduce_165,
  3, 172, :_reduce_166,
  3, 172, :_reduce_167,
  3, 172, :_reduce_168,
  3, 172, :_reduce_169,
  3, 172, :_reduce_170,
  2, 172, :_reduce_171,
  2, 172, :_reduce_172,
  2, 172, :_reduce_173,
  3, 172, :_reduce_174,
  1, 172, :_reduce_175,
  3, 192, :_reduce_176,
  3, 192, :_reduce_177,
  3, 192, :_reduce_178,
  3, 192, :_reduce_179,
  3, 192, :_reduce_180,
  3, 192, :_reduce_181,
  3, 192, :_reduce_182,
  1, 170, :_reduce_183,
  1, 170, :_reduce_none,
  1, 170, :_reduce_185,
  2, 170, :_reduce_186,
  1, 170, :_reduce_none,
  5, 170, :_reduce_188,
  1, 170, :_reduce_189,
  1, 170, :_reduce_190,
  3, 193, :_reduce_191,
  3, 193, :_reduce_192,
  2, 195, :_reduce_193,
  3, 181, :_reduce_194,
  3, 181, :_reduce_195,
  0, 194, :_reduce_196,
  3, 194, :_reduce_197,
  0, 155, :_reduce_198,
  1, 155, :_reduce_199,
  3, 155, :_reduce_200,
  4, 179, :_reduce_201,
  1, 196, :_reduce_202,
  3, 196, :_reduce_203,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_230,
  0, 153, :_reduce_231,
  1, 153, :_reduce_none,
  0, 154, :_reduce_233,
  1, 154, :_reduce_none,
  0, 156, :_reduce_235,
  1, 156, :_reduce_none,
  0, 113, :_reduce_237,
  1, 113, :_reduce_238,
  1, 116, :_reduce_239,
  2, 116, :_reduce_240,
  1, 197, :_reduce_241,
  1, 197, :_reduce_none,
  0, 183, :_reduce_243,
  1, 183, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  1, 125, :_reduce_247 ]

racc_reduce_n = 248

racc_shift_n = 432

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDATA_VAR => 35,
  :kDTYPE_UINT => 36,
  :kDTYPE_LINT => 37,
  :kDTYPE_LLINT => 38,
  :kDTYPE_CHAR => 39,
  :kDTYPE_I8 => 40,
  :kDTYPE_I16 => 41,
  :kDTYPE_I32 => 42,
  :kDTYPE_I64 => 43,
  :kDTYPE_UI8 => 44,
  :kDTYPE_UI16 => 45,
  :kDTYPE_UI32 => 46,
  :kDTYPE_UI64 => 47,
  :kDTYPE_INT => 48,
  :kDTYPE_F32 => 49,
  :kDTYPE_F64 => 50,
  :kDTYPE_LF64 => 51,
  :kDTYPE_ROBJ => 52,
  :kDTYPE_ULINT => 53,
  :kDTYPE_ULLINT => 54,
  :kDTYPE_VOID => 55,
  :kDTYPE_SIZE_T => 56,
  :kDTYPE_RB_STR => 57,
  :kDTYPE_UCHAR => 58,
  :kDTYPE_BOOL => 59,
  :tCUSTOM_DTYPE => 60,
  :kDTYPE_RB_ARR => 61,
  :kDTYPE_RB_HSH => 62,
  :tLPAREN => 63,
  :tRPAREN => 64,
  :tLSQUARE => 65,
  :tRSQUARE => 66,
  :tIDENTIFIER => 67,
  :tNL => 68,
  :tCOMMA => 69,
  :tSQUOTE => 70,
  :tSCOLON => 71,
  :EOF => 72,
  :tDOT => 73,
  :tQMARK => 74,
  :tSYMBOL => 75,
  :tLBRACE => 76,
  :tRBRACE => 77,
  :tCOLON => 78,
  :tCOLON2 => 79,
  :tPLUS => 80,
  :tMINUS => 81,
  :tSTAR => 82,
  :tDIVIDE => 83,
  :tEXPO => 84,
  :tMODULUS => 85,
  :tASSIGN => 86,
  :tEQ => 87,
  :tLT => 88,
  :tLTEQ => 89,
  :tGT => 90,
  :tGTEQ => 91,
  :tANDOP => 92,
  :tOROP => 93,
  :tBANG => 94,
  :tOP_ASSIGN => 95,
  :tSTRING => 96,
  :kSIZEOF => 97,
  :tBIT_AND => 98,
  :tBIT_OR => 99,
  :tBIT_XOR => 100,
  :tBIT_LSHIFT => 101,
  :tBIT_RSHIFT => 102,
  :tBIT_NOT => 103,
  :tINTEGER => 104,
  :tFLOAT => 105,
  :tSINGLE_CHAR => 106,
  :ADDRESS_OF => 107,
  :TYPECAST => 108,
  :UMINUS => 109,
  :tNEQ => 110 }

racc_nt_base = 111

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "stmt",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "struct_or_union_def",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "opt_array_args",
  "term",
  "eols" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_30(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_31(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_46(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_70(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Expression::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_84(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_145(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_146(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_153(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_154(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_160(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_161(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_162(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_163(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_167(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_168(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_169(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_170(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_186(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_188(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_189(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_190(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_191(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 652)
  def _reduce_192(val, _values, result)
     result = Expression::Colon2.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_193(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 664)
  def _reduce_194(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_195(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 672)
  def _reduce_196(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_197(val, _values, result)
     result = Expression::ActualArgList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 676)
  def _reduce_198(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 677)
  def _reduce_199(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 678)
  def _reduce_200(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_201(val, _values, result)
            result = Expression::ElementRef.new val[0], Expression::ActualArgList.new(val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_202(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 688)
  def _reduce_203(val, _values, result)
     result = [*val[0], val[2]]  
    result
  end
.,.,

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'parser.racc', 698)
  def _reduce_230(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 702)
  def _reduce_231(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'parser.racc', 706)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.racc', 710)
  def _reduce_235(val, _values, result)
    
    result
  end
.,.,

# reduce 236 omitted

module_eval(<<'.,.,', 'parser.racc', 714)
  def _reduce_237(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_238(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 718)
  def _reduce_239(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_240(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 722)
  def _reduce_241(val, _values, result)
    
    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.racc', 726)
  def _reduce_243(val, _values, result)
    
    result
  end
.,.,

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.racc', 734)
  def _reduce_247(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
