#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 730)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'115,116,118,275,63,275,214,119,215,72,141,142,143,19,72,85,95,7,5,145',
'131,6,126,127,161,128,130,25,212,120,96,162,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,154,71,146,69,134',
'69,294,64,208,104,96,251,144,147,103,29,252,155,372,365,371,30,215,286',
'150,328,201,202,201,202,153,92,140,160,156,214,115,116,118,157,137,138',
'139,119,201,202,141,142,143,19,93,85,201,202,31,145,131,217,126,127',
'161,128,130,5,33,120,6,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,56,57,58,59,154,92,146,22,134,5,201,202,6,174,208',
'179,144,147,338,181,67,155,19,337,93,18,23,96,150,69,377,392,399,96',
'153,207,140,160,156,17,115,116,118,157,137,138,139,119,96,96,141,142',
'143,19,360,85,181,73,5,145,131,6,126,127,161,128,130,201,202,120,96',
'162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,154,413,146,22,134,5,69,179,6,348,77,181,144,147,347,96,348',
'155,19,201,202,347,23,348,150,96,364,214,347,215,153,347,140,160,156',
'17,115,116,118,157,137,138,139,119,201,202,141,142,143,19,5,85,86,6',
'5,145,131,6,126,127,161,128,130,5,91,120,6,162,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,154,94,146,22',
'134,64,225,226,227,228,229,230,144,147,201,202,5,155,19,6,5,67,23,6',
'150,232,233,105,5,167,153,6,140,160,156,17,115,116,118,157,137,138,139',
'119,201,202,141,142,143,19,5,85,69,6,367,145,131,366,126,127,161,128',
'130,5,175,120,6,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,56,57,58,59,154,176,146,178,134,225,226,227,228,229,230',
'5,144,147,6,201,202,155,225,226,227,228,229,230,150,227,228,229,230',
'183,153,186,140,160,156,194,115,116,118,157,137,138,139,119,201,202',
'141,142,143,19,5,85,194,6,194,145,131,206,126,127,161,128,130,201,202',
'120,216,162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,154,69,146,69,134,227,228,229,230,201,202,250,144',
'147,69,369,253,155,383,384,282,283,284,285,150,201,202,201,202,255,153',
'69,140,160,156,261,115,116,118,157,137,138,139,119,201,202,141,142,143',
'19,167,85,383,384,167,145,131,215,126,127,161,128,130,208,214,120,277',
'162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,154,292,146,297,134,298,69,330,229,69,255,344,144,147,186,351',
'352,155,353,201,360,229,229,229,150,229,208,375,379,385,153,388,140',
'160,156,389,115,116,118,157,137,138,139,119,393,298,141,142,143,19,395',
'85,69,398,96,145,131,167,126,127,161,128,130,402,408,120,208,162,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58',
'59,154,418,146,167,134,,,,,,,,144,147,,,,155,,,,,,,150,,,,,,153,,140',
'160,156,,115,116,118,157,137,138,139,119,,,141,142,143,19,,85,,,,145',
'131,,126,127,161,128,130,,,120,,162,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59,154,,146,,134,5,,,6,,,,144',
'147,,,,155,,,,,,,150,,,,,,153,,140,160,156,,115,116,118,157,137,138',
'139,119,,,141,142,143,19,,85,,,,145,131,,126,127,161,128,130,,,120,',
'162,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56',
'57,58,59,154,,146,,134,5,,,6,,,,144,147,,,,155,,,,,,,150,,,,,,153,,140',
'160,156,,115,116,118,157,137,138,139,119,,,141,142,143,19,,85,,,,145',
'131,,126,127,161,128,130,,,120,,162,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59,154,,146,,134,,,,,,,,144,147',
',,,155,,,,,,,150,,,,,,153,,140,160,156,,115,116,118,157,137,138,139',
'119,,,141,142,143,19,,85,,,,145,131,,126,127,161,128,130,,,120,,162',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57',
'58,59,154,,146,,134,5,,,6,,,,144,147,141,142,143,155,,,,,,145,150,,',
',161,,153,,140,160,156,162,,,,157,137,138,139,,,,,,,22,,,,,,,22,,141',
'142,143,154,,146,19,191,,145,23,,,19,161,144,147,23,,,155,162,,17,,',
',150,,,17,,,153,,140,160,156,,,,,157,137,138,139,,154,,146,,191,141',
'142,143,5,,,6,144,147,145,5,,155,6,161,,,,,150,,162,,,,153,,140,160',
'156,,,,,157,137,138,139,,,,,22,376,141,142,143,197,,146,,191,22,145',
',,,19,161,144,147,23,,,155,162,,19,,,18,23,,,17,,,,,140,160,156,,,17',
',157,137,138,139,,154,,146,,191,141,142,143,,,,,144,147,145,5,,155,6',
'161,,,,,150,5,162,,6,,153,,140,160,156,,,,,157,137,138,139,,,,,,,141',
'142,143,154,,146,,191,,145,,,,,161,144,147,,,,155,162,,,,,,,,,,,,153',
',140,160,156,,,,,157,137,138,139,,154,,146,,191,141,142,143,,,,,144',
'147,145,,,155,,161,,,,,150,,162,,,,153,,140,160,156,,,,,157,137,138',
'139,,,,,,,141,142,143,154,,146,,191,,145,,,,,161,144,147,,,,155,162',
',,,,,150,,,,,,153,,140,160,156,,,,,157,137,138,139,,247,,146,,191,141',
'142,143,,,,,144,147,145,,,155,,161,,,,,,,162,,,,,,140,160,156,,,,,157',
'137,138,139,,,,,,,141,142,143,247,,146,,191,,145,,,,,161,144,147,,,',
'155,162,,,,,,,,,,,,,,140,160,156,,,,,157,137,138,139,,247,,146,,191',
'141,142,143,,,,,144,147,145,,,155,,161,,,,,,,162,,,,,,140,160,156,,',
',,157,137,138,139,,,,,,,141,142,143,154,,146,,191,,145,,,,,161,144,147',
',,,155,162,,,,,,150,,,,,,153,,140,160,156,,,,,157,137,138,139,,154,',
'146,,191,141,142,143,,,,,144,147,145,,,155,,161,,,,,150,,162,,,,153',
',140,160,156,,,,,157,137,138,139,,,,,,,141,142,143,247,,146,,191,,145',
',,,,161,144,147,,,,155,162,,,,,,,,,,,,,,140,160,156,,,,,157,137,138',
'139,,154,,146,,191,141,142,143,,,,,144,147,145,,,155,,161,,,,,150,,162',
',,,153,,140,160,156,,,,,157,137,138,139,,,,,,,141,142,143,154,,146,',
'191,,145,,,,,161,144,147,,,,155,162,,,,,,150,,,,,,153,,140,160,156,',
',,,157,137,138,139,,154,,146,,191,141,142,143,,,,,144,147,145,,,155',
',161,,,,,150,,162,,,,153,,140,160,156,,,,,157,137,138,139,,,,,,,141',
'142,143,154,,146,,191,,145,,,,,161,144,147,,,,155,162,,,,,,150,,,,,',
'153,,140,160,156,,,,,157,137,138,139,,154,,146,,191,141,142,143,,,,',
'144,147,145,,,155,,161,,,,,150,,162,,,,153,,140,160,156,,,,,157,137',
'138,139,,,,,,,141,142,143,154,,146,,191,,145,,,,,161,144,147,,,,155',
'162,,,,,,150,,,,,,153,,140,160,156,,,,,157,137,138,139,,154,,146,,191',
'141,142,143,,,,,144,147,145,,,155,,161,,,,,150,,162,,,,153,,140,160',
'156,,,,,157,137,138,139,,,,,,,141,142,143,154,,146,,191,,145,,,,,161',
'144,147,,,,155,162,,,,,,150,,,,,,153,,140,160,156,,,,,157,137,138,139',
',154,,146,,191,141,142,143,,,,,144,147,145,,,155,,161,,,,,150,,162,',
',,153,,140,160,156,,,,,157,137,138,139,,,,,,,141,142,143,154,,146,,191',
',145,,,,,161,144,147,,,,155,162,,,,,,150,,,,,,153,,140,160,156,,,,,157',
'137,138,139,,154,,146,,191,141,142,143,,,,,144,147,145,,,155,,161,,',
',,150,,162,,,,153,,140,160,156,,,,,157,137,138,139,,,,,,141,142,143',
',,,146,,191,145,,,,,161,,144,147,141,142,143,162,,,,,,145,,,,,161,,',
',140,160,329,162,,,,,137,138,139,247,,146,,191,,225,226,227,228,229',
'230,144,147,,,,155,247,,146,,191,,231,232,233,234,235,,144,147,140,160',
'156,155,,,,157,137,138,139,,,,,141,142,143,140,160,156,,,,145,157,137',
'138,139,161,,,,141,142,143,162,,,,,,145,,,,,161,,,,,,,162,,,,,,,,247',
',146,,191,225,226,227,228,229,230,,144,147,,,,155,247,,146,,191,231',
'232,233,234,235,,,144,147,140,160,156,155,,,,157,137,138,139,,,,,141',
'142,143,140,160,156,,,,145,157,137,138,139,161,,,,141,142,143,162,,',
',,,145,,,,,161,,,,,,,162,,,,,,,,247,,146,,191,225,226,227,228,229,230',
',144,147,,,,155,247,,146,,191,231,232,233,234,235,,,144,147,140,160',
'156,155,,,,157,137,138,139,,,,,141,142,143,140,160,156,,,,145,157,137',
'138,139,161,,,,141,142,143,162,,,,,,145,,,,,161,,,,,,,162,,,,,,,,247',
',146,,191,225,226,227,228,229,230,,144,147,,,,155,247,,146,,191,231',
'232,233,234,235,,,144,147,140,160,156,155,,,,157,137,138,139,,,,,141',
'142,143,140,160,156,,,,145,157,137,138,139,161,,,,141,142,143,162,,',
',,,145,,,,,161,,,,,,,162,,,,,,,,247,,146,,191,225,226,227,228,229,230',
',144,147,,,,155,247,,146,,191,231,232,233,234,235,,,144,147,140,160',
'156,155,,,,157,137,138,139,,,,,141,142,143,140,160,156,,,,145,157,137',
'138,139,161,,,,141,142,143,162,,,,,,145,,,,,161,,,,,,,162,,,,,,,,247',
',146,,191,225,226,227,228,229,230,,144,147,,,,155,247,,146,,191,231',
'232,233,234,235,,,144,147,140,160,156,155,,,,157,137,138,139,,,,,141',
'142,143,140,160,156,,,,145,157,137,138,139,161,,,,141,142,143,162,,',
',,,145,,,,,161,,,,,,,162,,,,,,,,247,,146,,191,225,226,227,228,229,230',
',144,147,,,,155,247,,146,,191,231,232,233,234,235,,,144,147,140,160',
'156,155,,,,157,137,138,139,,,,,141,142,143,140,160,156,,,,145,157,137',
'138,139,161,,,,141,142,143,162,,,,,,145,,,,,161,,,,,,,162,,,,,,,,247',
',146,,191,225,226,227,228,229,230,,144,147,,,,155,247,,146,,191,231',
'232,233,234,235,,,144,147,140,160,156,155,,,,157,137,138,139,,,,,141',
'142,143,140,160,156,,,,145,157,137,138,139,161,,,,141,142,143,162,,',
',,,145,,,,,161,,141,142,143,,,162,,,,145,,,,247,161,146,,191,,,,162',
',,,144,147,,,,155,247,,146,,191,,,,,,,,144,147,140,160,156,155,146,',
'191,157,137,138,139,,,,144,147,,,140,160,156,,,,,157,137,138,139,,,141',
'142,143,140,160,,,,,145,,137,138,139,161,225,226,227,228,229,230,162',
',282,283,284,285,,,,,,,231,232,233,234,235,,,,,,,141,142,143,154,,146',
',191,,145,,,,,161,144,147,,,,155,162,,,,,,150,,,,,,153,,140,160,156',
',,,,157,137,138,139,,154,,146,,191,141,142,143,,,,,144,147,145,,,155',
',161,,,,,150,,162,,,,153,,140,160,156,,,,,157,137,138,139,,,,141,142',
'143,,,,154,,146,145,191,,,,161,,,,144,147,,162,,155,225,226,227,228',
'229,230,150,,,,,,153,,140,160,156,,231,232,233,157,137,138,139,146,',
'191,141,142,143,,,,,144,147,145,,,,,161,,,,,,,162,,,,,,140,160,,,,,',
',137,138,139,,,,,,,141,142,143,154,,146,,191,,145,,,,,161,144,147,,',
',155,162,,,,,,150,,,,,,153,,140,160,156,,,,,157,137,138,139,,247,,146',
',191,141,142,143,,,,,144,147,145,,,155,,161,,,141,142,143,,162,,,,,145',
'140,160,156,,161,,,157,137,138,139,162,,,,,,,,,247,,146,,191,225,226',
'227,228,229,230,,144,147,,,,155,,146,,191,,231,232,233,234,235,,144',
'147,172,140,160,156,,,,,157,137,138,139,,,19,,85,,140,160,,,,,,,137',
'138,139,,,,,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,19,,85,,,5,,,6,,,,,,,,,,,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,329,,,,,,79,,,,,,,,',
'225,226,227,228,229,230,,236,238,239,240,241,266,,,,,,231,232,233,234',
'235,,,,,,,,237,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,329,,,,,,,,,225,226,227,228,229,230,225,226,227',
'228,229,230,,,282,283,284,285,231,232,233,,,,231,232,233,234,235,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58',
'59,,,,,,5,,,6,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,56,57,58,59,,-29,,,,,-29,225,226,227,228,229,230,,236,238,239',
'240,241,,,,,,,231,232,233,234,235,,,,,,,,237,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,,,,,166,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,,',
',,166,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'56,57,58,59,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,56,57,58,59,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,56,57,58,59,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,56,57,58,59,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,56,57,58,59,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,56,57,58,59' ]
        racc_action_table = arr = ::Array.new(4032, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'90,90,90,195,29,403,134,90,134,32,90,90,90,90,208,90,74,1,0,90,90,0',
'90,90,90,90,90,7,134,90,74,90,90,90,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,90,90,90,90,90,90,90,90,90,90,32,90,195,90,403,208,29,309,85',
'310,163,90,90,85,17,163,90,310,301,309,18,294,200,90,243,195,195,403',
'403,90,294,90,90,90,136,185,185,185,90,90,90,90,185,301,301,185,185',
'185,185,294,185,243,243,19,185,185,136,185,185,185,185,185,3,22,185',
'3,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,71,185,2,185,185,200,200,185',
'101,132,110,185,185,257,110,30,185,2,257,71,2,2,101,185,31,343,358,373',
'110,185,132,185,185,185,2,205,205,205,185,185,185,185,205,343,373,205',
'205,205,205,358,205,268,33,8,205,205,8,205,205,205,205,205,125,125,205',
'268,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,400,205,75,205,205,62,339',
'205,272,64,339,205,205,272,400,289,205,75,188,188,289,75,290,205,339',
'300,191,290,191,205,300,205,205,205,75,260,260,260,205,205,205,205,260',
'271,271,260,260,260,260,11,260,67,11,78,260,260,78,260,260,260,260,260',
'87,70,260,87,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,72,260,171,260,76',
'317,317,317,317,317,317,260,260,273,273,97,260,171,97,112,79,171,112',
'260,317,317,86,130,95,260,130,260,260,260,171,274,274,274,260,260,260',
'260,274,293,293,274,274,274,274,262,274,98,262,305,274,274,305,274,274',
'274,274,274,392,102,274,392,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'106,274,108,274,318,318,318,318,318,318,393,274,274,393,299,299,274',
'319,319,319,319,319,319,274,311,311,311,311,111,274,113,274,274,274',
'116,277,277,277,274,274,274,274,277,302,302,277,277,277,277,408,277',
'126,408,128,277,277,131,277,277,277,277,277,303,303,277,135,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,146,277,147,277,312,312,312,312,304',
'304,160,277,277,307,307,165,277,349,349,352,352,353,353,277,363,363',
'380,380,166,277,168,277,277,277,170,286,286,286,277,277,277,277,286',
'394,394,286,286,286,286,174,286,419,419,180,286,286,181,286,286,286',
'286,286,189,192,286,196,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,206',
'286,209,286,210,220,245,246,251,253,266,286,286,270,278,280,286,281',
'288,291,313,314,315,286,316,336,341,345,350,286,354,286,286,286,357',
'384,384,384,286,286,286,286,384,360,362,384,384,384,384,368,384,369',
'371,378,384,384,379,384,384,384,384,384,381,390,384,397,384,384,384',
'384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384',
'384,384,384,384,384,384,384,412,384,418,384,,,,,,,,384,384,,,,384,,',
',,,,384,,,,,,384,,384,384,384,,409,409,409,384,384,384,384,409,,,409',
'409,409,409,,409,,,,409,409,,409,409,409,409,409,,,409,,409,409,409',
'409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409',
'409,409,409,409,409,409,409,,409,,409,409,,,409,,,,409,409,,,,409,,',
',,,,409,,,,,,409,,409,409,409,,410,410,410,409,409,409,409,410,,,410',
'410,410,410,,410,,,,410,410,,410,410,410,410,410,,,410,,410,410,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,410,,410,,410,410,,,410,,,,410,410,,,,410,,',
',,,,410,,,,,,410,,410,410,410,,414,414,414,410,410,410,410,414,,,414',
'414,414,414,,414,,,,414,414,,414,414,414,414,414,,,414,,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414',
'414,414,414,414,414,414,414,,414,,414,,,,,,,,414,414,,,,414,,,,,,,414',
',,,,,414,,414,414,414,,415,415,415,414,414,414,414,415,,,415,415,415',
'415,,415,,,,415,415,,415,415,415,415,415,,,415,,415,415,415,415,415',
'415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415',
'415,415,415,415,415,,415,,415,415,,,415,,,,415,415,115,115,115,415,',
',,,,115,415,,,,115,,415,,415,415,415,115,,,,415,415,415,415,,,,,,,28',
',,,,,,169,,118,118,118,115,,115,28,115,,118,28,,,169,118,115,115,169',
',,115,118,,28,,,,115,,,169,,,115,,115,115,115,,,,,115,115,115,115,,118',
',118,,118,119,119,119,28,,,28,118,118,119,169,,118,169,119,,,,,118,',
'119,,,,118,,118,118,118,,,,,118,118,118,118,,,,,342,342,120,120,120',
'119,,119,,119,27,120,,,,342,120,119,119,342,,,119,120,,27,,,27,27,,',
'342,,,,,119,119,119,,,27,,119,119,119,119,,120,,120,,120,149,149,149',
',,,,120,120,149,342,,120,342,149,,,,,120,27,149,,27,,120,,120,120,120',
',,,,120,120,120,120,,,,,,,153,153,153,149,,149,,149,,153,,,,,153,149',
'149,,,,149,153,,,,,,,,,,,,149,,149,149,149,,,,,149,149,149,149,,153',
',153,,153,154,154,154,,,,,153,153,154,,,153,,154,,,,,153,,154,,,,153',
',153,153,153,,,,,153,153,153,153,,,,,,,155,155,155,154,,154,,154,,155',
',,,,155,154,154,,,,154,155,,,,,,154,,,,,,154,,154,154,154,,,,,154,154',
'154,154,,155,,155,,155,156,156,156,,,,,155,155,156,,,155,,156,,,,,,',
'156,,,,,,155,155,155,,,,,155,155,155,155,,,,,,,157,157,157,156,,156',
',156,,157,,,,,157,156,156,,,,156,157,,,,,,,,,,,,,,156,156,156,,,,,156',
'156,156,156,,157,,157,,157,186,186,186,,,,,157,157,186,,,157,,186,,',
',,,,186,,,,,,157,157,157,,,,,157,157,157,157,,,,,,,193,193,193,186,',
'186,,186,,193,,,,,193,186,186,,,,186,193,,,,,,186,,,,,,186,,186,186',
'186,,,,,186,186,186,186,,193,,193,,193,197,197,197,,,,,193,193,197,',
',193,,197,,,,,193,,197,,,,193,,193,193,193,,,,,193,193,193,193,,,,,',
',201,201,201,197,,197,,197,,201,,,,,201,197,197,,,,197,201,,,,,,,,,',
',,,,197,197,197,,,,,197,197,197,197,,201,,201,,201,202,202,202,,,,,201',
'201,202,,,201,,202,,,,,201,,202,,,,201,,201,201,201,,,,,201,201,201',
'201,,,,,,,203,203,203,202,,202,,202,,203,,,,,203,202,202,,,,202,203',
',,,,,202,,,,,,202,,202,202,202,,,,,202,202,202,202,,203,,203,,203,204',
'204,204,,,,,203,203,204,,,203,,204,,,,,203,,204,,,,203,,203,203,203',
',,,,203,203,203,203,,,,,,,207,207,207,204,,204,,204,,207,,,,,207,204',
'204,,,,204,207,,,,,,204,,,,,,204,,204,204,204,,,,,204,204,204,204,,207',
',207,,207,212,212,212,,,,,207,207,212,,,207,,212,,,,,207,,212,,,,207',
',207,207,207,,,,,207,207,207,207,,,,,,,214,214,214,212,,212,,212,,214',
',,,,214,212,212,,,,212,214,,,,,,212,,,,,,212,,212,212,212,,,,,212,212',
'212,212,,214,,214,,214,215,215,215,,,,,214,214,215,,,214,,215,,,,,214',
',215,,,,214,,214,214,214,,,,,214,214,214,214,,,,,,,216,216,216,215,',
'215,,215,,216,,,,,216,215,215,,,,215,216,,,,,,215,,,,,,215,,215,215',
'215,,,,,215,215,215,215,,216,,216,,216,217,217,217,,,,,216,216,217,',
',216,,217,,,,,216,,217,,,,216,,216,216,216,,,,,216,216,216,216,,,,,',
',219,219,219,217,,217,,217,,219,,,,,219,217,217,,,,217,219,,,,,,217',
',,,,,217,,217,217,217,,,,,217,217,217,217,,219,,219,,219,222,222,222',
',,,,219,219,222,,,219,,222,,,,,219,,222,,,,219,,219,219,219,,,,,219',
'219,219,219,,,,,,225,225,225,,,,222,,222,225,,,,,225,,222,222,226,226',
'226,225,,,,,,226,,,,,226,,,,222,222,331,226,,,,,222,222,222,225,,225',
',225,,331,331,331,331,331,331,225,225,,,,225,226,,226,,226,,331,331',
'331,331,331,,226,226,225,225,225,226,,,,225,225,225,225,,,,,227,227',
'227,226,226,226,,,,227,226,226,226,226,227,,,,228,228,228,227,,,,,,228',
',,,,228,,,,,,,228,,,,,,,,227,,227,,227,322,322,322,322,322,322,,227',
'227,,,,227,228,,228,,228,322,322,322,322,322,,,228,228,227,227,227,228',
',,,227,227,227,227,,,,,229,229,229,228,228,228,,,,229,228,228,228,228',
'229,,,,230,230,230,229,,,,,,230,,,,,230,,,,,,,230,,,,,,,,229,,229,,229',
'323,323,323,323,323,323,,229,229,,,,229,230,,230,,230,323,323,323,323',
'323,,,230,230,229,229,229,230,,,,229,229,229,229,,,,,231,231,231,230',
'230,230,,,,231,230,230,230,230,231,,,,232,232,232,231,,,,,,232,,,,,232',
',,,,,,232,,,,,,,,231,,231,,231,324,324,324,324,324,324,,231,231,,,,231',
'232,,232,,232,324,324,324,324,324,,,232,232,231,231,231,232,,,,231,231',
'231,231,,,,,233,233,233,232,232,232,,,,233,232,232,232,232,233,,,,234',
'234,234,233,,,,,,234,,,,,234,,,,,,,234,,,,,,,,233,,233,,233,325,325',
'325,325,325,325,,233,233,,,,233,234,,234,,234,325,325,325,325,325,,',
'234,234,233,233,233,234,,,,233,233,233,233,,,,,235,235,235,234,234,234',
',,,235,234,234,234,234,235,,,,236,236,236,235,,,,,,236,,,,,236,,,,,',
',236,,,,,,,,235,,235,,235,326,326,326,326,326,326,,235,235,,,,235,236',
',236,,236,326,326,326,326,326,,,236,236,235,235,235,236,,,,235,235,235',
'235,,,,,237,237,237,236,236,236,,,,237,236,236,236,236,237,,,,238,238',
'238,237,,,,,,238,,,,,238,,,,,,,238,,,,,,,,237,,237,,237,327,327,327',
'327,327,327,,237,237,,,,237,238,,238,,238,327,327,327,327,327,,,238',
'238,237,237,237,238,,,,237,237,237,237,,,,,239,239,239,238,238,238,',
',,239,238,238,238,238,239,,,,240,240,240,239,,,,,,240,,,,,240,,,,,,',
'240,,,,,,,,239,,239,,239,405,405,405,405,405,405,,239,239,,,,239,240',
',240,,240,405,405,405,405,405,,,240,240,239,239,239,240,,,,239,239,239',
'239,,,,,241,241,241,240,240,240,,,,241,240,240,240,240,241,,,,247,247',
'247,241,,,,,,247,,,,,247,,255,255,255,,,247,,,,255,,,,241,255,241,,241',
',,,255,,,,241,241,,,,241,247,,247,,247,,,,,,,,247,247,241,241,241,247',
'255,,255,241,241,241,241,,,,255,255,,,247,247,247,,,,,247,247,247,247',
',,298,298,298,255,255,,,,,298,,255,255,255,298,199,199,199,199,199,199',
'298,,199,199,199,199,,,,,,,199,199,199,199,199,,,,,,,347,347,347,298',
',298,,298,,347,,,,,347,298,298,,,,298,347,,,,,,298,,,,,,298,,298,298',
'298,,,,,298,298,298,298,,347,,347,,347,366,366,366,,,,,347,347,366,',
',347,,366,,,,,347,,366,,,,347,,347,347,347,,,,,347,347,347,347,,,,370',
'370,370,,,,366,,366,370,366,,,,370,,,,366,366,,370,,366,320,320,320',
'320,320,320,366,,,,,,366,,366,366,366,,320,320,320,366,366,366,366,370',
',370,383,383,383,,,,,370,370,383,,,,,383,,,,,,,383,,,,,,370,370,,,,',
',,370,370,370,,,,,,,386,386,386,383,,383,,383,,386,,,,,386,383,383,',
',,383,386,,,,,,383,,,,,,383,,383,383,383,,,,,383,383,383,383,,386,,386',
',386,387,387,387,,,,,386,386,387,,,386,,387,,,396,396,396,,387,,,,,396',
'386,386,386,,396,,,386,386,386,386,396,,,,,,,,,387,,387,,387,406,406',
'406,406,406,406,,387,387,,,,387,,396,,396,,406,406,406,406,406,,396',
'396,99,387,387,387,,,,,387,387,387,387,,,99,,99,,396,396,,,,,,,396,396',
'396,,,,,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99',
'99,99,99,99,99,65,,65,,,99,,,99,,,,,,,,,,,65,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,244,,,,,,65,,,,,,,,',
'244,244,244,244,244,244,,244,244,244,244,244,175,,,,,,244,244,244,244',
'244,,,,,,,,244,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,279,,,,,,,,,321,321,321',
'321,321,321,279,279,279,279,279,279,,,279,279,279,279,321,321,321,,',
',279,279,279,279,279,107,107,107,107,107,107,107,107,107,107,107,107',
'107,107,107,107,107,107,107,107,107,107,107,107,107,,,,,,107,,,107,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,,167,,,,,167,151,151,151,151,151,151,,151',
'151,151,151,151,,,,,,,151,151,151,151,151,,,,,,,,151,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,,91,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,,,,,252,23,23,23,23,23,23,23,23,23,23,23',
'23,23,23,23,23,23,23,23,23,23,23,23,23,23,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,150,150,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,337,337,337,337,337',
'337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337',
'337,337,337' ]
        racc_action_check = arr = ::Array.new(4032, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   -48,    17,   151,    54,   nil,   nil,   nil,    27,   138,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,     7,   -15,    46,
   nil,   nil,    99,  3846,   nil,   nil,   nil,  1240,  1127,   -21,
   101,   109,    -7,   132,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   183,  3871,   188,  3555,   nil,   219,  3896,   nil,
   246,    79,   265,   nil,   -49,   244,   256,   nil,   231,   292,
   nil,   nil,   nil,   nil,   nil,     6,   270,   240,   nil,   nil,
    -4,  3786,   nil,   nil,   nil,   304,   nil,   286,   322,  3511,
   nil,    94,   317,   nil,   nil,   nil,   427,  3689,   365,   nil,
   100,   455,   290,   454,   nil,  1080,   403,   nil,  1124,  1176,
  1220,   nil,   nil,   nil,   nil,   124,   420,   nil,   422,   nil,
   298,   469,    89,   nil,   -55,   412,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   457,   459,   nil,  1272,
  3921,  3714,   nil,  1316,  1368,  1412,  1464,  1508,   nil,   nil,
   472,   nil,   nil,     6,   nil,   473,   468,  3723,   487,  1134,
   554,   337,   nil,   nil,   511,  3626,   nil,   nil,   nil,   nil,
   515,   516,   nil,   nil,   nil,    89,  1560,   nil,   173,   514,
   nil,   209,   525,  1604,   nil,    -6,   575,  1656,   nil,  3089,
    67,  1700,  1752,  1796,  1848,   182,   551,  1892,    -2,   551,
   537,   nil,  1944,   nil,  1988,  2040,  2084,  2136,   nil,  2180,
   555,   nil,  2232,   nil,   nil,  2275,  2293,  2369,  2387,  2463,
  2481,  2557,  2575,  2651,  2669,  2745,  2763,  2839,  2857,  2933,
  2951,  3027,   nil,    20,  3554,   560,   542,  3045,   nil,   nil,
  3946,   558,  3816,   542,   nil,  3061,   nil,   102,   nil,   nil,
   275,   nil,   320,   nil,   nil,   nil,   561,   nil,   137,   nil,
   623,   198,   190,   261,   368,   nil,   nil,   461,   568,  3625,
   566,   568,   nil,   nil,   nil,   nil,   554,   nil,   545,   197,
   204,   604,   nil,   291,    16,   nil,   nil,   nil,  3137,   355,
   207,    12,   384,   403,   442,   326,   nil,   470,   nil,    -6,
   -12,   375,   448,   555,   556,   557,   559,   265,   357,   370,
  3235,  3619,  2358,  2452,  2546,  2640,  2734,  2828,   nil,   nil,
   nil,  2265,   nil,   nil,   nil,   nil,   570,  3971,   nil,   189,
   nil,   639,  1230,   115,   nil,   581,   nil,  3181,   nil,   533,
   641,   nil,   457,   457,   643,   nil,   nil,   647,   169,   nil,
   594,   nil,   577,   458,   nil,   nil,  3233,   nil,   590,   601,
  3274,   581,   nil,   116,   nil,   nil,   nil,   nil,   590,   611,
   460,   675,   nil,  3326,   647,   nil,  3370,  3422,   nil,   nil,
   647,   nil,   333,   374,   477,   nil,  3439,   610,   nil,   nil,
   179,   nil,   nil,    -4,   nil,  2922,  3411,   nil,   413,   740,
   833,   nil,   647,   nil,   926,  1019,   nil,   nil,   650,   567,
   nil,   nil,   nil ]

racc_action_default = [
  -230,  -241,    -6,  -231,  -232,  -234,  -235,  -241,  -230,    -2,
    -4,  -241,    -7,    -9,   -10,   -11,   -12,  -241,  -241,  -241,
   -49,   -50,   -56,  -241,  -233,   423,    -1,  -231,    -5,   -15,
   -18,  -241,  -241,  -241,  -115,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
    -3,    -8,  -241,  -241,  -241,   -22,   -19,  -241,   -35,  -240,
  -143,  -141,  -241,   -57,  -241,    -6,   -15,   -16,  -241,  -241,
   -23,   -25,   -26,   -27,  -115,  -241,  -241,  -230,   -36,  -115,
   -59,  -241,  -139,  -140,  -142,   -32,  -116,  -230,  -241,  -241,
   -20,  -241,  -241,   -42,   -43,   -21,  -241,  -231,   -38,   -40,
  -241,  -241,  -230,   -60,   -62,  -224,  -226,   -65,  -241,  -241,
  -241,   -70,   -71,   -72,   -73,   -74,  -226,   -76,  -226,   -78,
  -241,  -241,  -175,  -115,  -193,  -183,  -193,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -131,  -236,  -236,  -151,  -241,
  -241,  -156,  -157,  -241,  -241,  -241,  -241,  -241,  -184,  -186,
  -241,  -188,  -189,  -241,  -145,  -241,  -149,  -115,  -241,  -231,
  -241,    -6,   -17,   -24,   -32,  -241,   -34,   -37,  -115,  -115,
   -32,  -112,  -113,   -51,   -58,  -231,  -241,   -63,  -225,  -175,
  -183,  -193,  -193,  -195,  -227,  -241,  -241,  -241,   -92,  -241,
  -241,  -241,  -241,  -195,  -195,   -59,  -241,  -241,  -241,  -105,
  -108,  -109,  -241,  -185,  -195,  -241,  -241,  -241,  -190,  -117,
  -237,  -238,  -134,  -152,  -115,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -158,  -241,  -156,  -157,  -171,  -241,  -172,  -173,
  -241,  -241,  -241,  -149,  -148,  -241,   -30,  -241,  -115,   -55,
   -59,   -13,  -241,   -28,   -41,  -115,  -241,   -39,  -241,  -111,
   -61,   -67,  -228,  -196,   -59,   -99,  -100,   -59,  -241,  -241,
  -241,  -241,   -95,   -96,   -97,   -98,   -59,  -153,  -154,  -228,
  -228,   -81,   -89,   -90,  -141,  -191,  -192,  -115,  -241,  -120,
  -241,  -241,  -121,  -122,  -118,  -241,  -239,  -236,  -135,  -241,
  -241,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -176,  -177,  -178,  -179,  -180,  -181,  -159,  -174,
  -182,  -241,  -115,  -144,  -146,  -147,  -150,  -115,   -33,   -53,
   -54,  -241,  -241,   -44,  -115,  -241,   -64,  -241,  -229,  -101,
  -241,   -91,  -241,  -241,  -241,   -75,   -77,  -241,   -85,   -82,
  -241,  -106,  -107,  -114,  -194,  -198,  -241,  -132,  -241,  -236,
  -241,  -241,  -155,  -241,   -31,   -52,   -14,  -115,   -45,   -32,
  -197,  -241,  -102,  -241,   -59,   -68,  -241,  -241,   -69,   -79,
   -87,   -83,  -241,  -241,  -119,  -133,  -241,  -137,  -138,  -187,
   -47,  -110,   -66,  -241,  -104,   -93,   -94,   -80,  -241,   -59,
   -59,  -136,  -241,   -48,   -59,   -59,   -86,   -84,   -32,  -101,
   -88,   -46,  -103 ]

racc_goto_table = [
    24,     3,    16,    68,    74,   168,    61,   219,   222,    27,
    34,   111,    28,   132,   274,   308,   211,   109,   256,    97,
    70,   135,     2,   164,    24,    24,   359,    16,    16,   198,
    26,   254,   381,   218,    75,    62,    66,    88,    80,    83,
   136,   182,     9,     1,     8,   346,    65,   272,    78,   257,
    76,    87,    84,   108,   101,    89,   102,   289,   290,   193,
   264,   210,   355,   356,   412,    82,    32,    60,   300,   203,
   171,   204,   173,    83,    90,    16,   177,   270,   165,    99,
   187,   196,    98,   357,   263,   100,    84,   358,   107,   218,
   269,   390,   407,   391,    89,   386,    24,   387,   169,    82,
   209,   345,   422,   305,    24,   307,   267,   278,   132,   106,
   370,   163,   223,   185,   245,   262,   135,   nil,   335,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   291,   nil,   132,   nil,
   nil,   205,   nil,   nil,   184,   136,   135,   224,   nil,   296,
   260,   nil,   nil,   nil,   nil,   309,   nil,    61,   nil,   268,
   nil,   nil,   nil,   nil,   258,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   265,   nil,   nil,   nil,    24,   276,   368,    16,
   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   336,   nil,
   361,   341,    24,   132,   334,   nil,   340,   nil,   374,   411,
   nil,   135,   306,   nil,   310,   349,   295,   132,   350,   182,
   132,   nil,    24,   nil,   nil,   135,   nil,   354,   135,   132,
   136,   nil,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
   nil,   nil,   414,   333,   136,   362,   nil,   136,   339,   nil,
   396,   nil,   nil,   nil,   nil,   343,   136,   332,   nil,   165,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   342,   nil,   nil,   nil,   nil,   nil,   nil,
   182,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   401,
   nil,   nil,   nil,   397,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   373,   nil,   nil,   404,   nil,   132,   nil,   nil,
   nil,   nil,   nil,   nil,   378,   135,   nil,   nil,   nil,   309,
    61,   nil,   nil,   nil,   258,   nil,   nil,   nil,   421,   nil,
   416,   417,   132,   132,   136,   419,   420,   132,   132,    24,
   135,   135,    16,   nil,   nil,   135,   135,   400,   188,   nil,
   nil,   195,   nil,   200,   199,   nil,   nil,   nil,   nil,   136,
   136,   nil,   nil,   nil,   136,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   242,   243,   nil,   244,
   246,   248,   249,   409,   410,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,    24,   nil,   415,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   271,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,   nil,   nil,
   nil,   nil,   279,   nil,   287,   288,   273,   273,   nil,   nil,
   293,   nil,   nil,   nil,   nil,   299,   nil,   273,   301,   302,
   303,   nil,   304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   nil,   nil,   nil,
   nil,   nil,   331,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   363,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   380,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   394,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   403,   nil,   nil,   nil,
   nil,   405,   406 ]

racc_goto_check = [
    84,     5,    12,    14,    22,    23,     8,    72,    72,     5,
    15,    38,     5,    59,    48,    74,    66,    29,    25,     7,
    36,    68,     2,    77,    84,    84,    58,    12,    12,    60,
     2,    78,    49,    82,    14,    13,    18,    27,    19,    21,
    70,    68,     4,     1,     3,    45,    16,    44,    17,    24,
    15,    26,    15,    28,    22,    15,    30,    44,    44,    43,
    31,    29,    45,    45,    32,    12,    35,     4,    44,    43,
    14,    43,    19,    21,    37,    12,    27,    40,    15,     5,
    42,    50,    13,    54,    23,    18,    15,    55,     5,    82,
    23,    56,    57,    58,    15,    62,    84,    63,     5,    12,
    65,    67,    49,    69,    84,    73,    29,    60,    59,     2,
    75,    76,    79,     5,    81,     7,    68,   nil,    78,     2,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,    59,   nil,
   nil,     5,   nil,   nil,     2,    70,    68,    15,   nil,    68,
    14,   nil,   nil,   nil,   nil,    59,   nil,     8,   nil,    22,
   nil,   nil,   nil,   nil,    15,    70,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,    84,    14,    72,    12,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,    59,   nil,
    66,    38,    84,    59,    77,   nil,    29,   nil,    25,    74,
   nil,    68,    14,   nil,    22,    38,    36,    59,    38,    68,
    59,   nil,    84,   nil,   nil,    68,   nil,    38,    68,    59,
    70,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,   nil,
   nil,   nil,    48,    14,    70,    29,   nil,    70,    22,   nil,
    72,   nil,   nil,   nil,   nil,    22,    70,    15,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,    38,   nil,    59,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    68,   nil,   nil,   nil,    59,
     8,   nil,   nil,   nil,    15,   nil,   nil,   nil,    23,   nil,
    38,    38,    59,    59,    70,    38,    38,    59,    59,    84,
    68,    68,    12,   nil,   nil,    68,    68,    22,    47,   nil,
   nil,    47,   nil,    47,    61,   nil,   nil,   nil,   nil,    70,
    70,   nil,   nil,   nil,    70,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,   nil,    61,
    61,    61,    61,     5,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    84,    84,   nil,     5,
   nil,   nil,    84,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,    61,   nil,    47,    47,    47,    47,   nil,   nil,
    47,   nil,   nil,   nil,   nil,    47,   nil,    47,    47,    47,
    47,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,   nil,   nil,   nil,
   nil,   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    43,    22,    42,    40,     1,   nil,   -56,   -22,   nil,
   nil,   nil,     0,     6,   -28,   -13,    16,   -17,     6,   -27,
   nil,   -26,   -30,   -90,  -118,  -149,   -17,   -31,   -36,   -72,
   -29,  -115,  -336,   nil,   nil,    44,   -12,     4,   -79,   nil,
  -108,   nil,   -35,   -57,  -146,  -227,   nil,   233,  -181,  -317,
   -38,   nil,   nil,   nil,  -208,  -204,  -267,  -298,  -265,   -77,
   -90,   235,  -257,  -256,   nil,   -33,  -117,  -167,   -69,  -116,
   -50,   nil,  -139,  -117,  -207,  -199,    20,   -68,  -135,   -37,
   nil,   -40,  -103,   nil,    -3,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,
    14,    15,   122,   nil,   221,   133,   nil,   nil,   nil,   nil,
    81,   124,   110,   nil,   nil,   nil,   nil,   nil,   nil,   259,
   nil,   nil,   nil,    20,    21,   nil,   nil,   nil,   nil,   112,
   113,   114,   nil,   nil,   nil,   nil,   117,   125,   nil,   nil,
   nil,   121,   123,   129,   nil,   nil,   nil,   nil,   nil,   189,
   nil,   151,   280,   281,   382,   nil,   nil,   180,   190,   nil,
   192,   158,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,
   149,   152,   213,   159,     4,   220 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 109, :_reduce_1,
  1, 111, :_reduce_2,
  3, 111, :_reduce_3,
  1, 112, :_reduce_4,
  2, 112, :_reduce_5,
  0, 115, :_reduce_6,
  1, 115, :_reduce_7,
  3, 115, :_reduce_8,
  1, 116, :_reduce_9,
  1, 116, :_reduce_10,
  1, 116, :_reduce_11,
  1, 116, :_reduce_12,
  7, 118, :_reduce_13,
  9, 119, :_reduce_14,
  0, 121, :_reduce_15,
  2, 121, :_reduce_16,
  6, 114, :_reduce_17,
  0, 124, :_reduce_18,
  1, 124, :_reduce_19,
  3, 124, :_reduce_20,
  3, 126, :_reduce_21,
  0, 125, :_reduce_22,
  1, 125, :_reduce_23,
  3, 125, :_reduce_24,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  4, 128, :_reduce_28,
  0, 132, :_reduce_29,
  1, 132, :_reduce_30,
  3, 132, :_reduce_31,
  0, 131, :_reduce_32,
  3, 131, :_reduce_33,
  6, 120, :_reduce_34,
  0, 134, :_reduce_35,
  1, 134, :_reduce_36,
  3, 134, :_reduce_37,
  2, 135, :_reduce_38,
  3, 136, :_reduce_39,
  1, 136, :_reduce_40,
  4, 129, :_reduce_41,
  1, 138, :_reduce_none,
  1, 138, :_reduce_43,
  2, 139, :_reduce_44,
  3, 139, :_reduce_45,
  7, 139, :_reduce_46,
  0, 140, :_reduce_47,
  1, 140, :_reduce_48,
  1, 117, :_reduce_49,
  1, 117, :_reduce_50,
  6, 141, :_reduce_51,
  8, 142, :_reduce_52,
  2, 133, :_reduce_53,
  2, 133, :_reduce_54,
  1, 133, :_reduce_55,
  0, 143, :_reduce_56,
  2, 143, :_reduce_57,
  2, 146, :_reduce_58,
  0, 147, :_reduce_59,
  1, 147, :_reduce_60,
  3, 147, :_reduce_61,
  1, 148, :_reduce_62,
  2, 148, :_reduce_63,
  4, 148, :_reduce_64,
  1, 148, :_reduce_65,
  6, 148, :_reduce_66,
  3, 148, :_reduce_67,
  5, 148, :_reduce_68,
  5, 148, :_reduce_69,
  1, 148, :_reduce_70,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_74,
  4, 148, :_reduce_75,
  1, 148, :_reduce_76,
  4, 148, :_reduce_77,
  1, 148, :_reduce_none,
  5, 161, :_reduce_79,
  3, 162, :_reduce_80,
  0, 163, :_reduce_81,
  1, 163, :_reduce_82,
  2, 163, :_reduce_83,
  4, 166, :_reduce_84,
  0, 164, :_reduce_85,
  3, 164, :_reduce_86,
  0, 165, :_reduce_87,
  3, 165, :_reduce_88,
  3, 160, :_reduce_89,
  3, 159, :_reduce_90,
  3, 158, :_reduce_91,
  1, 158, :_reduce_none,
  5, 168, :_reduce_93,
  5, 168, :_reduce_94,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  0, 157, :_reduce_101,
  1, 157, :_reduce_102,
  5, 157, :_reduce_103,
  2, 172, :_reduce_104,
  2, 149, :_reduce_105,
  3, 173, :_reduce_106,
  3, 173, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  6, 137, :_reduce_110,
  3, 137, :_reduce_111,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  3, 174, :_reduce_114,
  0, 130, :_reduce_115,
  2, 130, :_reduce_116,
  0, 177, :_reduce_117,
  1, 177, :_reduce_118,
  3, 177, :_reduce_119,
  3, 154, :_reduce_120,
  3, 154, :_reduce_121,
  3, 154, :_reduce_122,
  1, 179, :_reduce_123,
  1, 179, :_reduce_124,
  1, 179, :_reduce_125,
  1, 179, :_reduce_126,
  1, 179, :_reduce_127,
  1, 179, :_reduce_128,
  1, 179, :_reduce_129,
  1, 179, :_reduce_130,
  1, 179, :_reduce_131,
  4, 179, :_reduce_132,
  5, 179, :_reduce_133,
  0, 181, :_reduce_134,
  1, 181, :_reduce_135,
  4, 181, :_reduce_136,
  3, 182, :_reduce_137,
  2, 183, :_reduce_none,
  2, 144, :_reduce_139,
  2, 144, :_reduce_140,
  1, 144, :_reduce_141,
  2, 144, :_reduce_142,
  0, 145, :_reduce_143,
  4, 145, :_reduce_144,
  1, 184, :_reduce_145,
  3, 184, :_reduce_146,
  3, 185, :_reduce_147,
  2, 185, :_reduce_148,
  0, 186, :_reduce_149,
  2, 186, :_reduce_150,
  1, 155, :_reduce_151,
  2, 155, :_reduce_152,
  3, 155, :_reduce_153,
  3, 155, :_reduce_154,
  4, 188, :_reduce_155,
  1, 187, :_reduce_156,
  1, 187, :_reduce_157,
  2, 187, :_reduce_158,
  3, 187, :_reduce_159,
  3, 169, :_reduce_160,
  3, 169, :_reduce_161,
  3, 169, :_reduce_162,
  3, 169, :_reduce_163,
  3, 169, :_reduce_164,
  3, 169, :_reduce_165,
  3, 169, :_reduce_166,
  3, 169, :_reduce_167,
  3, 169, :_reduce_168,
  3, 169, :_reduce_169,
  3, 169, :_reduce_170,
  2, 169, :_reduce_171,
  2, 169, :_reduce_172,
  2, 169, :_reduce_173,
  3, 169, :_reduce_174,
  1, 169, :_reduce_175,
  3, 189, :_reduce_176,
  3, 189, :_reduce_177,
  3, 189, :_reduce_178,
  3, 189, :_reduce_179,
  3, 189, :_reduce_180,
  3, 189, :_reduce_181,
  3, 189, :_reduce_182,
  1, 167, :_reduce_183,
  1, 167, :_reduce_184,
  2, 167, :_reduce_185,
  1, 167, :_reduce_none,
  5, 167, :_reduce_187,
  1, 167, :_reduce_188,
  1, 167, :_reduce_189,
  2, 191, :_reduce_190,
  3, 178, :_reduce_191,
  3, 178, :_reduce_192,
  0, 190, :_reduce_193,
  3, 190, :_reduce_194,
  0, 152, :_reduce_195,
  1, 152, :_reduce_196,
  3, 152, :_reduce_197,
  4, 176, :_reduce_198,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_223,
  0, 150, :_reduce_224,
  1, 150, :_reduce_none,
  0, 151, :_reduce_226,
  1, 151, :_reduce_none,
  0, 153, :_reduce_228,
  1, 153, :_reduce_none,
  0, 110, :_reduce_230,
  1, 110, :_reduce_231,
  1, 113, :_reduce_232,
  2, 113, :_reduce_233,
  1, 192, :_reduce_234,
  1, 192, :_reduce_none,
  0, 180, :_reduce_236,
  1, 180, :_reduce_none,
  1, 193, :_reduce_none,
  2, 193, :_reduce_none,
  1, 122, :_reduce_240 ]

racc_reduce_n = 241

racc_shift_n = 423

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDATA_VAR => 35,
  :kDTYPE_UINT => 36,
  :kDTYPE_LINT => 37,
  :kDTYPE_LLINT => 38,
  :kDTYPE_CHAR => 39,
  :kDTYPE_I8 => 40,
  :kDTYPE_I16 => 41,
  :kDTYPE_I32 => 42,
  :kDTYPE_I64 => 43,
  :kDTYPE_UI8 => 44,
  :kDTYPE_UI16 => 45,
  :kDTYPE_UI32 => 46,
  :kDTYPE_UI64 => 47,
  :kDTYPE_INT => 48,
  :kDTYPE_F32 => 49,
  :kDTYPE_F64 => 50,
  :kDTYPE_LF64 => 51,
  :kDTYPE_ROBJ => 52,
  :kDTYPE_ULINT => 53,
  :kDTYPE_ULLINT => 54,
  :kDTYPE_VOID => 55,
  :kDTYPE_SIZE_T => 56,
  :kDTYPE_RB_STR => 57,
  :kDTYPE_UCHAR => 58,
  :kDTYPE_BOOL => 59,
  :tCUSTOM_DTYPE => 60,
  :tLPAREN => 61,
  :tRPAREN => 62,
  :tLSQUARE => 63,
  :tRSQUARE => 64,
  :tIDENTIFIER => 65,
  :tNL => 66,
  :tCOMMA => 67,
  :tSQUOTE => 68,
  :tSCOLON => 69,
  :EOF => 70,
  :tDOT => 71,
  :tQMARK => 72,
  :tSYMBOL => 73,
  :tLBRACE => 74,
  :tRBRACE => 75,
  :tCOLON => 76,
  :tPLUS => 77,
  :tMINUS => 78,
  :tSTAR => 79,
  :tDIVIDE => 80,
  :tEXPO => 81,
  :tMODULUS => 82,
  :tASSIGN => 83,
  :tEQ => 84,
  :tLT => 85,
  :tLTEQ => 86,
  :tGT => 87,
  :tGTEQ => 88,
  :tANDOP => 89,
  :tOROP => 90,
  :tBANG => 91,
  :tOP_ASSIGN => 92,
  :tSTRING => 93,
  :kSIZEOF => 94,
  :tBIT_AND => 95,
  :tBIT_OR => 96,
  :tBIT_XOR => 97,
  :tBIT_LSHIFT => 98,
  :tBIT_RSHIFT => 99,
  :tBIT_NOT => 100,
  :tINTEGER => 101,
  :tFLOAT => 102,
  :tSINGLE_CHAR => 103,
  :ADDRESS_OF => 104,
  :TYPECAST => 105,
  :UMINUS => 106,
  :tNEQ => 107 }

racc_nt_base = 108

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_18(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_30(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_31(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_46(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_84(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty?
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_145(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_146(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_160(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_168(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_169(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_170(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_176(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_177(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_178(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_179(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_180(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_181(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_185(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_187(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_188(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_189(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_190(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_191(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_192(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 662)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 666)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 667)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_197(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_198(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_223(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'parser.racc', 691)
  def _reduce_226(val, _values, result)
    
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 695)
  def _reduce_228(val, _values, result)
    
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'parser.racc', 699)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 700)
  def _reduce_231(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 704)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 707)
  def _reduce_234(val, _values, result)
    
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_236(val, _values, result)
    
    result
  end
.,.,

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_240(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
