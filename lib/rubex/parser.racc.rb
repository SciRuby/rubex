#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 780)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'23,211,26,28,200,187,200,386,29,7,196,52,53,54,19,196,20,18,24,113,56',
'41,103,36,73,40,112,229,30,17,74,39,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,195,57,153,44,153',
'220,225,107,188,136,227,55,58,144,229,145,47,108,66,109,130,131,321',
'136,288,61,229,130,131,130,131,64,135,51,72,67,23,147,26,28,68,48,49',
'50,29,289,135,52,53,54,19,110,20,18,24,115,56,41,311,36,73,40,134,312',
'30,17,74,39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,65,264,57,288,44,5,362,291,6,144,376,145,55',
'58,136,389,407,47,225,66,390,406,227,229,289,143,61,304,320,229,130',
'131,64,141,51,72,67,23,229,26,28,68,48,49,50,29,146,227,52,53,54,19',
'149,20,153,24,5,56,41,6,36,73,40,229,153,30,17,74,39,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'65,182,57,5,44,5,6,5,6,23,6,5,55,58,6,382,191,47,153,66,52,53,54,19',
'430,20,61,24,193,56,41,229,64,73,51,72,67,23,17,74,229,68,48,49,50,130',
'131,197,52,53,54,19,144,20,145,24,265,56,41,5,5,73,6,6,130,131,17,74',
'143,136,57,144,121,157,158,159,160,161,162,5,55,58,6,313,316,122,314',
'315,130,131,202,163,164,165,166,167,5,218,57,6,121,5,51,72,6,23,130',
'131,55,58,48,49,50,122,130,131,52,53,54,19,223,20,224,24,5,56,41,6,231',
'73,51,72,153,5,17,74,6,266,48,49,50,157,158,159,160,161,162,161,5,23',
'434,6,157,158,159,160,161,162,130,131,52,53,54,19,153,20,57,24,121,56',
'41,164,165,73,130,131,55,58,17,74,271,122,157,158,159,160,161,162,130',
'131,207,208,209,210,159,160,161,162,51,72,163,164,165,166,167,279,48',
'49,50,287,57,5,121,5,6,5,6,290,6,5,55,58,6,130,131,122,157,158,159,160',
'161,162,130,131,294,26,28,159,160,161,162,29,51,72,52,53,54,19,295,20',
'48,49,50,56,41,296,36,73,40,130,131,30,130,74,39,75,76,77,78,79,80,81',
'82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,107',
'57,300,44,5,153,318,6,352,353,304,55,58,207,208,309,47,145,66,209,210',
'130,131,130,131,61,130,131,130,131,143,64,161,51,72,67,352,353,26,28',
'68,48,49,50,29,161,161,52,53,54,19,161,20,188,191,337,56,41,343,36,73',
'40,309,354,30,357,74,39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,65,359,57,363,44,5,224,372,6,153',
'375,153,55,58,383,385,388,47,391,66,393,395,396,107,402,405,61,136,412',
'309,229,153,64,393,51,72,67,153,309,26,28,68,48,49,50,29,136,435,52',
'53,54,19,436,20,309,,,56,41,,36,73,40,,,30,,74,39,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65',
',57,,44,157,158,159,160,161,162,,55,58,,,,47,,66,,,,163,164,165,61,',
',,,,64,,51,72,67,,,26,28,68,48,49,50,29,,,52,53,54,19,,20,,,,56,41,',
'36,73,40,,,30,,74,39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90',
'91,92,93,94,95,96,97,98,99,100,101,65,,57,,44,157,158,159,160,161,162',
',55,58,,,,47,,66,,,,163,164,165,61,,,,,,64,,51,72,67,,,26,28,68,48,49',
'50,29,,,52,53,54,19,,20,,,,56,41,,36,73,40,,,30,,74,39,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'65,,57,,44,,,,,,,,55,58,,,,47,,66,,,,,,,61,,,,,,64,,51,72,67,,,26,28',
'68,48,49,50,29,,,52,53,54,19,,20,,,,56,41,,36,73,40,,,30,,74,39,75,76',
'77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99',
'100,101,65,,57,,44,,,,,,,,55,58,,,,47,,66,,,,,,,61,,,,,,64,,51,72,67',
',,26,28,68,48,49,50,29,,,52,53,54,19,,20,,,,56,41,,36,73,40,,,30,,74',
'39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96',
'97,98,99,100,101,65,,57,,44,5,,,6,,,,55,58,,,,47,,66,,,,,,,61,,,,,,64',
',51,72,67,,,26,28,68,48,49,50,29,,,52,53,54,19,,20,,,,56,41,,36,73,40',
',,30,,74,39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,65,,57,,44,,,,,,,,55,58,,,,47,,66,,,,,,,61',
',,,,,64,,51,72,67,,,26,28,68,48,49,50,29,,,52,53,54,19,,20,,,,56,41',
',36,73,40,,,30,,74,39,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90',
'91,92,93,94,95,96,97,98,99,100,101,65,,57,,44,5,,,6,,,,55,58,,,,47,',
'66,,,,,,,61,,,,,,64,,51,72,67,,,26,28,68,48,49,50,29,,,52,53,54,19,',
'20,,,,56,41,,36,73,40,,,30,,74,39,75,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,44,5,,,6,,,,55',
'58,,,,47,,66,,,,,,,61,,,,,,64,,51,72,67,,,26,28,68,48,49,50,29,,,52',
'53,54,19,,20,,,,56,41,,36,73,40,,,30,,74,39,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65,,57,,44',
',,,,,,,55,58,,,,47,,66,,,,,,,61,,,,,,64,,51,72,67,,,26,28,68,48,49,50',
'29,,,52,53,54,19,,20,,,,56,41,,36,73,40,,,30,,74,39,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,65',
',57,,44,,,,,,,,55,58,,,,47,,66,,,,,,,61,,,,,,64,,51,72,67,,,26,28,68',
'48,49,50,29,,,52,53,54,19,,20,,,,56,41,,36,73,40,,,30,,74,39,75,76,77',
'78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100',
'101,65,,57,,44,5,,,6,52,53,54,55,58,,,,47,56,66,,,73,,,,61,,74,,,,64',
',51,72,67,,,,,68,48,49,50,,,,,,,,,,52,53,54,65,,57,,121,,56,,,,73,,55',
'58,,,74,122,,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,65,,57,,121',
'52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68',
'48,49,50,,,,,,52,53,54,126,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,',
',,,,,,,,,,,,51,72,67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58',
'56,,,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,52',
'53,54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,,,,,,64,,51,72',
'67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,',
',74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,52,53,54,65,,57,,121',
',56,,,,73,,55,58,,,74,122,,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49',
'50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,157,158,159',
'160,161,162,,51,72,67,,,,,68,48,49,50,163,164,165,166,167,52,53,54,179',
',57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,,,,,,,,51,72,67,,,,,68',
'48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,157',
'158,159,160,161,162,,51,72,67,,,,,68,48,49,50,163,164,165,166,167,52',
'53,54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,61,,,,,,64,,51',
'72,67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66',
',,,,74,,,157,158,159,160,161,162,,51,72,67,,,,,68,48,49,50,163,164,165',
'166,167,52,53,54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,61',
',,,,,64,,51,72,67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58,56',
',,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,52,53',
'54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,61,,,,,,64,,51,72',
'67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,',
',74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,52,53,54,65,,57,,121',
',56,,,,73,,55,58,,,74,122,,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49',
'50,65,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,61,,,,,,64',
',51,72,67,,,,,68,48,49,50,,,,,,52,53,54,65,,57,,121,,56,,,,73,,55,58',
',,74,122,,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,65,,57,,121',
'52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68',
'48,49,50,,,,,,52,53,54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,',
',,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55',
'58,56,,,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,',
'52,53,54,,265,57,,121,,56,,,,73,,55,58,,,74,122,157,158,159,160,161',
'162,,168,170,171,172,173,,,,,51,72,163,164,165,166,167,,48,49,50,179',
',57,169,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,157,158,159,160',
'161,162,,51,72,67,,,,,68,48,49,50,163,164,165,166,167,52,53,54,179,',
'57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,,,,,,,,51,72,67,,,,,68',
'48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,157',
'158,159,160,161,162,,51,72,67,,,,,68,48,49,50,163,164,165,166,167,52',
'53,54,179,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,,,,,,,,51,72',
'67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,',
',,74,,,157,158,159,160,161,162,,51,72,67,,,,,68,48,49,50,163,164,165',
'166,167,52,53,54,179,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,',
',,,,,,51,72,67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,',
'122,73,66,,,,,74,,,157,158,159,160,161,162,,51,72,67,,,,,68,48,49,50',
'163,164,165,166,167,52,53,54,179,,57,,121,,56,,,,73,,55,58,,,74,122',
',66,,,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,',
',55,58,56,,,122,73,66,,,,,74,,,157,158,159,160,161,162,,51,72,67,,,',
',68,48,49,50,163,164,165,166,167,52,53,54,179,,57,,121,,56,,,,73,,55',
'58,,,74,122,,66,,,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,179,,57,,121',
'52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,,,,,,,,51,72,67,,,,,68,48',
'49,50,,,,,,52,53,54,179,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,',
',,,,,,,,,51,72,67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,,,55,58,56',
',,122,73,66,,,,,74,,,,,,,,,,51,72,67,,,,,68,48,49,50,,,,,,52,53,54,179',
',57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,,,,,,,,,51,72,67,,,,,68',
'48,49,50,179,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,,,',
',,,,51,72,67,,,,,68,48,49,50,,,,,,52,53,54,179,,57,,121,,56,,,,73,,55',
'58,,,74,122,,66,,,,,,,,,,,,,,,51,72,67,,,,,68,48,49,50,179,,57,,121',
'52,53,54,,,,,55,58,56,,,122,73,66,,,,,74,,,,,,,,,,51,72,67,,,,,68,48',
'49,50,,,,,,52,53,54,179,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,',
',,,,,,,,,51,72,67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58,56',
',,122,73,66,,,,,74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,,52,53',
'54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66,,,,,,,61,,,,,,64,,51,72',
'67,,,,,68,48,49,50,65,,57,,121,52,53,54,,,,,55,58,56,,,122,73,66,,,',
',74,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,,,,,52,53,54,,65,,57,,121',
'56,,,,73,,,55,58,,74,,122,,66,,,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49',
'50,,57,,121,52,53,54,,,,,55,58,56,,,122,73,,,,,,74,,,,,,,,,,51,72,,',
',,,,48,49,50,,,,,,52,53,54,65,,57,,121,,56,,,,73,,55,58,,,74,122,,66',
',,,,,,61,,,,,,64,,51,72,67,,,,,68,48,49,50,179,,57,,121,52,53,54,,,',
',55,58,56,,,122,73,66,,,,,74,,,,,,,,,,51,72,67,,,,,68,48,49,50,,,,,52',
'53,54,,179,,57,,121,56,,,,73,,,55,58,,74,,122,,66,52,53,54,,,,,,,56',
',,,73,51,72,67,,,74,,68,48,49,50,,57,,121,,,,,,,,55,58,,,,122,,,,,,',
',,57,,121,,,,,,51,72,55,58,380,,,122,48,49,50,,,,,,,19,,20,,,,,51,72',
',,,,,,48,49,50,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92',
'93,94,95,96,97,98,99,100,101,19,,20,,,5,,,6,,,,,,,,,,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'285,,,,,,273,,,,,,,,,,,,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,265,,,,,,,,,,,,,,,,,157,158,159',
'160,161,162,,,207,208,209,210,,,,,,,163,164,165,166,167,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
',,,,,5,,,6,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,101,,-39,,,,,-39,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,,,,,348,75,76,77',
'78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100',
'101,,,,,348,157,158,159,160,161,162,,168,170,171,172,173,,,,,,,163,164',
'165,166,167,,,,,,,,169,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,101,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,75,76,77,78,79',
'80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
'75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97',
'98,99,100,101,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92',
'93,94,95,96,97,98,99,100,101,75,76,77,78,79,80,81,82,83,84,85,86,87',
'88,89,90,91,92,93,94,95,96,97,98,99,100,101' ]
        racc_action_table = arr = ::Array.new(4700, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,129,2,2,124,108,397,342,2,1,114,2,2,2,2,136,2,2,2,20,2,2,7,2,2,2,20',
'342,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'114,2,124,2,397,136,140,16,108,42,140,2,2,46,246,220,2,17,2,18,129,129',
'246,332,220,2,140,124,124,397,397,2,42,2,2,2,105,46,105,105,2,2,2,2',
'105,220,332,105,105,105,105,19,105,105,105,23,105,105,234,105,105,105',
'41,234,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,175',
'105,195,105,105,302,198,105,44,322,44,105,105,245,345,366,105,408,105',
'345,366,408,198,195,44,105,302,245,322,175,175,105,44,105,105,105,106',
'408,106,106,105,105,105,105,106,45,308,106,106,106,106,47,106,57,106',
'0,106,106,0,106,106,106,308,58,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,72,106,3,106,106,3,8,106,269,8,11,106,106,11,336',
'109,106,110,106,269,269,269,269,416,269,106,269,111,269,269,336,106',
'269,106,106,106,377,269,269,416,106,106,106,106,35,35,115,377,377,377',
'377,121,377,121,377,267,377,377,39,40,377,39,40,118,118,377,377,121',
'119,269,123,269,267,267,267,267,267,267,214,269,269,214,236,241,269',
'236,241,185,185,125,267,267,267,267,267,272,134,377,272,377,377,269',
'269,377,379,219,219,377,377,269,269,269,377,230,230,379,379,379,379',
'137,379,138,379,280,379,379,280,143,379,377,377,151,324,379,379,324',
'177,377,377,377,254,254,254,254,254,254,178,362,428,428,362,253,253',
'253,253,253,253,233,233,428,428,428,428,186,428,379,428,379,428,428',
'253,253,428,235,235,379,379,428,428,188,379,128,128,128,128,128,128',
'237,237,128,128,128,128,247,247,247,247,379,379,128,128,128,128,128',
'191,379,379,379,194,428,363,428,428,363,402,428,196,402,413,428,428',
'413,238,238,428,255,255,255,255,255,255,239,239,203,132,132,248,248',
'248,248,132,428,428,132,132,132,132,205,132,428,428,428,132,132,206',
'132,132,132,240,240,132,213,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,215,132,216,132,132,243,243,132,292,292,217,132,132,295',
'295,226,132,227,132,296,296,307,307,369,369,132,370,370,371,371,231',
'132,249,132,132,132,432,432,133,133,132,132,132,132,133,250,251,133',
'133,133,133,252,133,270,273,279,133,133,285,133,133,133,291,293,133',
'297,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,301,133,304',
'133,133,306,317,133,318,320,333,133,133,338,340,344,133,347,133,348',
'349,350,358,360,364,133,374,378,382,387,389,133,391,133,133,133,394',
'405,199,199,133,133,133,133,199,420,429,199,199,199,199,431,199,435',
',,199,199,,199,199,199,,,199,,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,,199,,199,256,256,256,256,256,256,,199,199,,,,199,,199,',
',,256,256,256,199,,,,,,199,,199,199,199,,,202,202,199,199,199,199,202',
',,202,202,202,202,,202,,,,202,202,,202,202,202,,,202,,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,,202,,202,257,257,257,257,257,257',
',202,202,,,,202,,202,,,,257,257,257,202,,,,,,202,,202,202,202,,,211',
'211,202,202,202,202,211,,,211,211,211,211,,211,,,,211,211,,211,211,211',
',,211,,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,,211,,211,,',
',,,,,211,211,,,,211,,211,,,,,,,211,,,,,,211,,211,211,211,,,286,286,211',
'211,211,211,286,,,286,286,286,286,,286,,,,286,286,,286,286,286,,,286',
',286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,,286,,286,,,,,,',
',286,286,,,,286,,286,,,,,,,286,,,,,,286,,286,286,286,,,299,299,286,286',
'286,286,299,,,299,299,299,299,,299,,,,299,299,,299,299,299,,,299,,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,,299,,299,299,,,299',
',,,299,299,,,,299,,299,,,,,,,299,,,,,,299,,299,299,299,,,353,353,299',
'299,299,299,353,,,353,353,353,353,,353,,,,353,353,,353,353,353,,,353',
',353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,,353,,353,,,,,,',
',353,353,,,,353,,353,,,,,,,353,,,,,,353,,353,353,353,,,403,403,353,353',
'353,353,403,,,403,403,403,403,,403,,,,403,403,,403,403,403,,,403,,403',
'403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,403,403,403,,403,,403,403,,,403',
',,,403,403,,,,403,,403,,,,,,,403,,,,,,403,,403,403,403,,,404,404,403',
'403,403,403,404,,,404,404,404,404,,404,,,,404,404,,404,404,404,,,404',
',404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,404,404,404,404,404,404,404,404,404,404,404,404,,404,,404,404,,',
'404,,,,404,404,,,,404,,404,,,,,,,404,,,,,,404,,404,404,404,,,421,421',
'404,404,404,404,421,,,421,421,421,421,,421,,,,421,421,,421,421,421,',
',421,,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,421,421,421,421,,421,,421,,',
',,,,,421,421,,,,421,,421,,,,,,,421,,,,,,421,,421,421,421,,,422,422,421',
'421,421,421,422,,,422,422,422,422,,422,,,,422,422,,422,422,422,,,422',
',422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,,422,,422,,,,,,',
',422,422,,,,422,,422,,,,,,,422,,,,,,422,,422,422,422,,,423,423,422,422',
'422,422,423,,,423,423,423,423,,423,,,,423,423,,423,423,423,,,423,,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,,423,,423,423,,,423',
'26,26,26,423,423,,,,423,26,423,,,26,,,,423,,26,,,,423,,423,423,423,',
',,,423,423,423,423,,,,,,,,,,28,28,28,26,,26,,26,,28,,,,28,,26,26,,,28',
'26,,26,,,,,,,26,,,,,,26,,26,26,26,,,,,26,26,26,26,28,,28,,28,29,29,29',
',,,,28,28,29,,,28,29,28,,,,,29,,28,,,,,,28,,28,28,28,,,,,28,28,28,28',
',,,,,30,30,30,29,,29,,29,,30,,,,30,,29,29,,,30,29,,29,,,,,,,,,,,,,,',
'29,29,29,,,,,29,29,29,29,30,,30,,30,60,60,60,,,,,30,30,60,,,30,60,30',
',,,,60,,30,,,,,,30,,30,30,30,,,,,30,30,30,30,,,,,,64,64,64,60,,60,,60',
',64,,,,64,,60,60,,,64,60,,60,,,,,,,,,,,,,60,,60,60,60,,,,,60,60,60,60',
'64,,64,,64,65,65,65,,,,,64,64,65,,,64,65,64,,,,,65,,64,,,,,,64,,64,64',
'64,,,,,64,64,64,64,,,,,,66,66,66,65,,65,,65,,66,,,,66,,65,65,,,66,65',
',65,,,,,,,65,,,,,,65,,65,65,65,,,,,65,65,65,65,66,,66,,66,67,67,67,',
',,,66,66,67,,,66,67,66,,,,,67,,,258,258,258,258,258,258,,66,66,66,,',
',,66,66,66,66,258,258,258,258,258,68,68,68,67,,67,,67,,68,,,,68,,67',
'67,,,68,67,,67,,,,,,,,,,,,,,,67,67,67,,,,,67,67,67,67,68,,68,,68,107',
'107,107,,,,,68,68,107,,,68,107,68,,,,,107,,,259,259,259,259,259,259',
',68,68,68,,,,,68,68,68,68,259,259,259,259,259,126,126,126,107,,107,',
'107,,126,,,,126,,107,107,,,126,107,,107,,,,,,,107,,,,,,107,,107,107',
'107,,,,,107,107,107,107,126,,126,,126,130,130,130,,,,,126,126,130,,',
'126,130,126,,,,,130,,,260,260,260,260,260,260,,126,126,126,,,,,126,126',
'126,126,260,260,260,260,260,131,131,131,130,,130,,130,,131,,,,131,,130',
'130,,,131,130,,130,,,,,,,130,,,,,,130,,130,130,130,,,,,130,130,130,130',
'131,,131,,131,135,135,135,,,,,131,131,135,,,131,135,131,,,,,135,,131',
',,,,,131,,131,131,131,,,,,131,131,131,131,,,,,,141,141,141,135,,135',
',135,,141,,,,141,,135,135,,,141,135,,135,,,,,,,135,,,,,,135,,135,135',
'135,,,,,135,135,135,135,141,,141,,141,144,144,144,,,,,141,141,144,,',
'141,144,141,,,,,144,,141,,,,,,141,,141,141,141,,,,,141,141,141,141,',
',,,,145,145,145,144,,144,,144,,145,,,,145,,144,144,,,145,144,,144,,',
',,,,144,,,,,,144,,144,144,144,,,,,144,144,144,144,145,,145,,145,146',
'146,146,,,,,145,145,146,,,145,146,145,,,,,146,,145,,,,,,145,,145,145',
'145,,,,,145,145,145,145,,,,,,147,147,147,146,,146,,146,,147,,,,147,',
'146,146,,,147,146,,146,,,,,,,146,,,,,,146,,146,146,146,,,,,146,146,146',
'146,147,,147,,147,149,149,149,,,,,147,147,149,,,147,149,147,,,,,149',
',147,,,,,,147,,147,147,147,,,,,147,147,147,147,,,,,,150,150,150,149',
',149,,149,,150,,,,150,,149,149,,,150,149,,149,,,,,,,149,,,,,,149,,149',
'149,149,,,,,149,149,149,149,150,,150,,150,154,154,154,,,,,150,150,154',
',,150,154,150,,,,,154,,150,,,,,,150,,150,150,150,,,,,150,150,150,150',
',,,,,157,157,157,,176,154,,154,,157,,,,157,,154,154,,,157,154,176,176',
'176,176,176,176,,176,176,176,176,176,,,,,154,154,176,176,176,176,176',
',154,154,154,157,,157,176,157,158,158,158,,,,,157,157,158,,,157,158',
'157,,,,,158,,,261,261,261,261,261,261,,157,157,157,,,,,157,157,157,157',
'261,261,261,261,261,159,159,159,158,,158,,158,,159,,,,159,,158,158,',
',159,158,,158,,,,,,,,,,,,,,,158,158,158,,,,,158,158,158,158,159,,159',
',159,160,160,160,,,,,159,159,160,,,159,160,159,,,,,160,,,262,262,262',
'262,262,262,,159,159,159,,,,,159,159,159,159,262,262,262,262,262,161',
'161,161,160,,160,,160,,161,,,,161,,160,160,,,161,160,,160,,,,,,,,,,',
',,,,160,160,160,,,,,160,160,160,160,161,,161,,161,162,162,162,,,,,161',
'161,162,,,161,162,161,,,,,162,,,263,263,263,263,263,263,,161,161,161',
',,,,161,161,161,161,263,263,263,263,263,163,163,163,162,,162,,162,,163',
',,,163,,162,162,,,163,162,,162,,,,,,,,,,,,,,,162,162,162,,,,,162,162',
'162,162,163,,163,,163,164,164,164,,,,,163,163,164,,,163,164,163,,,,',
'164,,,399,399,399,399,399,399,,163,163,163,,,,,163,163,163,163,399,399',
'399,399,399,165,165,165,164,,164,,164,,165,,,,165,,164,164,,,165,164',
',164,,,,,,,,,,,,,,,164,164,164,,,,,164,164,164,164,165,,165,,165,166',
'166,166,,,,,165,165,166,,,165,166,165,,,,,166,,,400,400,400,400,400',
'400,,165,165,165,,,,,165,165,165,165,400,400,400,400,400,167,167,167',
'166,,166,,166,,167,,,,167,,166,166,,,167,166,,166,,,,,,,,,,,,,,,166',
'166,166,,,,,166,166,166,166,167,,167,,167,168,168,168,,,,,167,167,168',
',,167,168,167,,,,,168,,,,,,,,,,167,167,167,,,,,167,167,167,167,,,,,',
'169,169,169,168,,168,,168,,169,,,,169,,168,168,,,169,168,,168,,,,,,',
',,,,,,,,168,168,168,,,,,168,168,168,168,169,,169,,169,170,170,170,,',
',,169,169,170,,,169,170,169,,,,,170,,,,,,,,,,169,169,169,,,,,169,169',
'169,169,,,,,,171,171,171,170,,170,,170,,171,,,,171,,170,170,,,171,170',
',170,,,,,,,,,,,,,,,170,170,170,,,,,170,170,170,170,171,,171,,171,172',
'172,172,,,,,171,171,172,,,171,172,171,,,,,172,,,,,,,,,,171,171,171,',
',,,171,171,171,171,,,,,,173,173,173,172,,172,,172,,173,,,,173,,172,172',
',,173,172,,172,,,,,,,,,,,,,,,172,172,172,,,,,172,172,172,172,173,,173',
',173,179,179,179,,,,,173,173,179,,,173,179,173,,,,,179,,,,,,,,,,173',
'173,173,,,,,173,173,173,173,,,,,,224,224,224,179,,179,,179,,224,,,,224',
',179,179,,,224,179,,179,,,,,,,,,,,,,,,179,179,179,,,,,179,179,179,179',
'224,,224,,224,312,312,312,,,,,224,224,312,,,224,312,224,,,,,312,,224',
',,,,,224,,224,224,224,,,,,224,224,224,224,,,,,,314,314,314,312,,312',
',312,,314,,,,314,,312,312,,,314,312,,312,,,,,,,312,,,,,,312,,312,312',
'312,,,,,312,312,312,312,314,,314,,314,315,315,315,,,,,314,314,315,,',
'314,315,314,,,,,315,,314,,,,,,314,,314,314,314,,,,,314,314,314,314,',
',,,319,319,319,,315,,315,,315,319,,,,319,,,315,315,,319,,315,,315,,',
',,,,315,,,,,,315,,315,315,315,,,,,315,315,315,315,,319,,319,352,352',
'352,,,,,319,319,352,,,319,352,,,,,,352,,,,,,,,,,319,319,,,,,,,319,319',
'319,,,,,,355,355,355,352,,352,,352,,355,,,,355,,352,352,,,355,352,,352',
',,,,,,352,,,,,,352,,352,352,352,,,,,352,352,352,352,355,,355,,355,356',
'356,356,,,,,355,355,356,,,355,356,355,,,,,356,,,,,,,,,,355,355,355,',
',,,355,355,355,355,,,,,373,373,373,,356,,356,,356,373,,,,373,,,356,356',
',373,,356,,356,393,393,393,,,,,,,393,,,,393,356,356,356,,,393,,356,356',
'356,356,,373,,373,,,,,,,,373,373,,,,373,,,,,,,,,393,,393,,,,,,373,373',
'393,393,334,,,393,373,373,373,,,,,,,334,,334,,,,,393,393,,,,,,,393,393',
'393,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334,334,334,334,334,334,334,334,334,189,,189,,,334,,,334,,,',
',,,,,,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,193,,,,,,189,,,,,,,,,,,',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,204,,,,,,,,,,,,,,,,,204,204',
'204,204,204,204,,,204,204,204,204,,,,,,,204,204,204,204,204,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,,,,,,339,,,339,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,,309,,,,,309,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
',,,,287,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,,,,,390,62,62,62,62',
'62,62,,62,62,62,62,62,,,,,,,62,62,62,62,62,,,,,,,,62,24,24,24,24,24',
'24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,61',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61',
'61,61,61,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,406,406',
'406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,406,406,406,406,406' ]
        racc_action_check = arr = ::Array.new(4700, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   145,     9,    -2,   188,   nil,   nil,   nil,    22,   192,   nil,
   nil,   196,   nil,   nil,   nil,   nil,    62,    12,   -16,    46,
   -39,   nil,   nil,    94,  4504,   nil,  1691,   nil,  1736,  1789,
  1834,   nil,   nil,   nil,   nil,   205,   nil,   nil,   nil,   244,
   245,   106,    -2,   nil,   103,   116,    12,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   143,   153,   nil,
  1887,  4531,  4428,   nil,  1932,  1985,  2030,  2083,  2128,   nil,
   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    94,   190,  2181,   -19,   202,
   203,   194,   nil,   nil,    -5,   227,   nil,   nil,   224,   249,
   nil,   242,   nil,   261,    -4,   329,  2226,   nil,   354,   -11,
  2279,  2324,   482,   578,   283,  2377,     0,   304,   288,   nil,
     5,  2422,   nil,   314,  2475,  2520,  2573,  2618,   nil,  2671,
  2716,   317,   nil,   nil,  2769,   nil,   nil,  2814,  2867,  2912,
  2965,  3010,  3063,  3108,  3161,  3206,  3259,  3304,  3357,  3402,
  3455,  3500,  3553,  3598,   nil,    94,  2769,   326,   315,  3651,
   nil,   nil,  4558,   nil,   nil,   248,   349,  4585,   366,  4227,
   nil,   380,  4612,  4272,   399,    86,   396,   nil,    97,   674,
   nil,   nil,   770,   423,  4271,   434,   441,   nil,   nil,   nil,
   nil,   866,   nil,   422,   264,   539,   543,   526,   nil,   266,
    12,   nil,   nil,   nil,  3696,   nil,   498,   498,   nil,   nil,
   274,   497,   nil,   318,    56,   334,   270,   348,   383,   392,
   419,   271,   nil,   483,   nil,    98,    -7,   364,   407,   493,
   506,   507,   512,   324,   313,   398,   661,   757,  2039,  2137,
  2235,  2823,  2921,  3019,   nil,   nil,   nil,   245,   nil,   258,
   510,   nil,   281,   533,   nil,   nil,   nil,   nil,   nil,   504,
   309,   nil,   nil,   nil,   nil,   537,   962,  4409,   nil,   nil,
   nil,   545,   546,   604,   nil,   470,   474,   606,   nil,  1058,
   nil,   637,   154,   nil,   577,   nil,   560,   474,   137,  4375,
   nil,   nil,  3749,   nil,  3794,  3847,   nil,   571,   582,  3891,
   560,   nil,   103,   nil,   318,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   584,  4182,   nil,   201,   nil,   650,  4339,
   587,   nil,   -54,   nil,   652,   108,   nil,   592,   574,   627,
   658,   nil,  3944,  1154,   nil,  3989,  4042,   nil,   657,   nil,
   634,   nil,   333,   396,   602,   nil,   109,   nil,   nil,   476,
   479,   481,   nil,  4086,   595,   nil,   nil,   286,   664,   354,
   nil,   nil,   607,   nil,   nil,   nil,   nil,   588,   nil,   604,
  4441,   587,   nil,  4110,   610,   nil,   nil,    -2,   nil,  3117,
  3215,   nil,   400,  1250,  1346,   616,  4639,   nil,   112,   nil,
   nil,   nil,   nil,   404,   nil,   nil,   210,   nil,   nil,   nil,
   614,  1442,  1538,  1634,   nil,   nil,   nil,   nil,   398,   624,
   nil,   688,   574,   nil,   nil,   632,   nil,   nil,   nil ]

racc_action_default = [
  -247,  -258,    -6,  -248,  -249,  -251,  -252,  -258,  -247,    -2,
    -4,  -258,    -7,    -9,   -10,   -11,   -12,  -258,  -258,  -258,
  -258,   -59,   -60,   -68,  -258,   -74,  -245,   -76,  -258,  -258,
  -258,   -81,   -82,   -83,   -84,   -85,   -86,   -87,   -88,  -258,
  -258,  -258,  -187,  -126,  -209,  -195,  -209,  -203,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -253,  -253,  -163,
  -258,  -258,  -168,  -169,  -258,  -258,  -258,  -258,  -258,  -196,
  -197,  -199,  -258,  -201,  -202,  -218,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,
  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -241,  -242,
  -243,  -244,  -250,   439,    -1,  -248,    -5,  -258,   -25,   -28,
  -258,  -258,   -52,   -53,  -258,  -258,  -126,   -75,  -246,  -187,
  -195,  -209,  -203,  -209,  -258,  -258,  -258,  -103,  -258,  -258,
  -258,  -258,   -71,   -71,  -258,  -258,  -258,  -116,  -119,  -120,
  -258,  -258,  -198,  -258,  -211,  -215,  -258,  -258,  -206,  -258,
  -128,  -254,  -255,  -257,  -146,  -164,  -126,  -258,  -258,  -258,
  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,
  -258,  -258,  -258,  -258,  -170,  -258,  -168,  -169,  -183,  -258,
  -184,  -185,  -258,    -3,    -8,   -78,  -258,  -258,  -258,   -32,
   -29,  -258,   -45,  -258,  -155,  -153,  -258,   -69,  -258,   -71,
  -110,  -111,   -71,  -258,  -258,  -258,  -258,  -106,  -107,  -108,
  -109,   -71,  -165,  -166,  -247,   -72,  -258,   -92,  -100,  -101,
  -153,  -207,  -208,  -126,  -258,  -126,   -42,  -123,  -124,  -127,
  -131,  -205,  -204,  -212,  -258,  -216,  -258,  -132,  -133,  -134,
  -129,  -258,  -256,  -253,  -147,  -258,  -258,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -188,  -189,
  -190,  -191,  -192,  -193,  -171,  -186,  -194,  -258,  -126,   -13,
   -25,   -26,  -258,  -258,   -33,   -35,   -36,   -37,  -126,  -258,
  -247,   -46,  -126,   -51,  -126,  -258,   -71,  -258,  -151,  -152,
  -154,   -42,  -112,  -258,  -102,  -258,  -258,  -258,   -70,  -248,
   -89,  -258,   -96,   -93,  -258,  -117,  -118,  -125,  -258,  -126,
  -122,  -210,  -258,  -214,  -258,  -258,  -144,  -258,  -253,  -258,
  -258,  -167,  -258,   -14,  -247,   -16,   -17,   -18,   -19,   -20,
   -21,   -22,  -258,  -258,  -258,   -30,  -258,   -31,  -258,  -248,
   -48,   -50,   -54,  -126,  -258,  -258,  -157,  -258,  -161,   -63,
  -258,  -113,  -258,   -71,   -79,  -258,  -258,   -80,   -73,   -90,
   -98,   -94,  -258,  -258,  -258,   -40,  -258,  -126,   -67,  -213,
  -217,  -130,  -145,  -258,  -149,  -150,  -200,  -248,  -258,   -13,
   -27,   -34,   -42,   -44,   -47,  -126,  -126,   -55,   -61,  -258,
  -258,  -161,  -160,  -258,  -258,   -64,   -77,  -258,  -115,  -104,
  -105,   -91,  -258,   -71,   -71,   -42,  -126,   -43,   -65,   -66,
  -148,   -15,   -23,  -258,   -38,   -49,   -57,  -156,  -158,  -159,
  -162,   -71,   -71,   -71,   -97,   -95,  -121,   -41,  -258,  -258,
   -58,  -258,  -112,   -99,   -24,   -42,   -62,  -114,   -56 ]

racc_goto_table = [
    42,     3,   199,   138,   102,   244,   139,     2,    16,   105,
   186,    46,   106,   116,   330,   104,   150,   154,   331,   274,
   192,   281,   324,   190,   365,   350,     9,   411,   127,     1,
   392,   303,    45,   148,   201,    13,   194,     8,   184,   189,
   132,   133,    14,   272,    15,   366,   346,   276,   280,   340,
   156,   198,   111,   283,   429,   114,   286,   394,   221,   117,
   125,   242,   301,   302,   360,   401,   355,   356,   137,   364,
   118,   241,   124,   419,   129,   243,   319,   345,   411,   155,
   177,   232,   234,   236,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   246,   nil,   nil,   nil,   nil,   269,   nil,   nil,   nil,
   277,   nil,   nil,    42,    42,   nil,   102,   102,   174,   175,
   148,    16,    16,   nil,    46,    46,   361,   nil,   nil,   128,
   nil,   427,   330,   nil,   330,   203,   331,   328,   331,   183,
    42,    42,   413,   102,   102,    45,    45,   nil,    13,    13,
   310,    46,    46,   nil,   nil,    14,    14,    15,    15,   418,
   nil,   185,   245,   nil,   nil,   176,   178,   180,   181,   nil,
   308,   nil,    45,    45,   381,   437,   222,   nil,   384,   nil,
   228,   268,   333,   330,   212,   213,   270,   331,   278,   219,
   329,   282,   284,   306,   nil,   230,   305,   335,   233,   235,
   237,   238,   276,   239,   240,   nil,   nil,    42,   nil,   nil,
    42,   nil,   317,   322,   nil,   349,   nil,   nil,    46,    42,
   nil,    46,   nil,   336,   nil,   299,   204,   nil,   nil,   342,
    46,   298,   216,   217,   410,   nil,   nil,   nil,   nil,    45,
   nil,   nil,    45,   nil,   nil,   328,   nil,   328,   nil,   nil,
   nil,    45,   341,   379,   nil,   277,   nil,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   nil,   nil,   nil,   332,   307,   267,
   nil,   nil,   nil,   334,   nil,   422,   347,   373,   387,   nil,
   nil,   339,   nil,   nil,    42,   nil,   328,   338,   329,   292,
   329,   nil,   293,   nil,   nil,    46,   414,    42,   367,   417,
   102,   297,   408,   nil,   421,   358,   nil,   201,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,   374,   nil,   426,
   nil,   416,   nil,   278,   nil,   377,   nil,   409,   282,    45,
   nil,   378,   nil,   nil,   nil,   102,   nil,   nil,   228,   329,
   102,   nil,   nil,   nil,   nil,   415,   nil,   nil,   nil,   438,
   nil,    42,   nil,   nil,   nil,   nil,   369,   nil,   370,   371,
   nil,   nil,    46,   403,   404,   nil,   nil,   nil,   nil,   nil,
   nil,   245,   nil,   nil,   nil,   332,   344,   332,   102,   347,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   420,   nil,   nil,   nil,   367,   397,   nil,   nil,   nil,
   nil,    42,    42,   423,   102,   102,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    46,   428,   nil,   nil,   nil,   nil,    42,
    42,    42,   nil,   nil,   102,   nil,   332,   nil,   nil,   102,
    46,    46,    46,    45,    45,   nil,   nil,   nil,   228,   nil,
   nil,   nil,   nil,   398,   nil,   399,   400,   nil,   nil,   nil,
   nil,    45,    45,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   424,   425,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   431,   432,   433 ]

racc_goto_check = [
    60,     5,    50,    34,    88,    75,    67,     2,    12,     5,
    19,    71,     5,    21,    17,     2,    73,    73,    18,    25,
    20,    32,    13,    24,    30,    51,     4,    14,    61,     1,
    79,    59,    69,    84,    20,     9,    41,     3,     8,    22,
     5,     5,    10,    23,    11,    29,    78,    15,    31,    33,
    21,    27,    35,    36,    37,    40,    42,    44,    41,    47,
    52,    20,    55,    56,    57,    58,    63,    64,    66,    68,
    49,    70,    49,    79,    49,    74,    76,    77,    14,    80,
    82,    83,    86,    87,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
    16,   nil,   nil,    60,    60,   nil,    88,    88,    49,    49,
    84,    12,    12,   nil,    71,    71,    59,   nil,   nil,    62,
   nil,    30,    17,   nil,    17,    61,    18,    15,    18,     4,
    60,    60,    13,    88,    88,    69,    69,   nil,     9,     9,
    28,    71,    71,   nil,   nil,    10,    10,    11,    11,    78,
   nil,    49,    60,   nil,   nil,    62,    62,    62,    62,   nil,
    27,   nil,    69,    69,    25,    51,    69,   nil,    32,   nil,
    69,    21,    19,    17,    49,    49,    21,    18,    21,    49,
    16,    21,    21,    34,   nil,    49,    67,    24,    49,    49,
    49,    49,    15,    49,    49,   nil,   nil,    60,   nil,   nil,
    60,   nil,    73,    27,   nil,    28,   nil,   nil,    71,    60,
   nil,    71,   nil,    27,   nil,     5,    62,   nil,   nil,    27,
    71,     2,    43,    43,    75,   nil,   nil,   nil,   nil,    69,
   nil,   nil,    69,   nil,   nil,    15,   nil,    15,   nil,   nil,
   nil,    69,    34,    20,   nil,    16,   nil,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,   nil,   nil,   nil,    60,    49,    62,
   nil,   nil,   nil,     5,   nil,    50,    21,    73,    27,   nil,
   nil,     5,   nil,   nil,    60,   nil,    15,     2,    16,    43,
    16,   nil,    43,   nil,   nil,    71,    28,    60,    21,    20,
    88,    43,    27,   nil,    20,    12,   nil,    20,    71,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    69,    60,   nil,    28,
   nil,    27,   nil,    21,   nil,     5,   nil,    34,    21,    69,
   nil,     2,   nil,   nil,   nil,    88,   nil,   nil,    69,    16,
    88,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,    28,
   nil,    60,   nil,   nil,   nil,   nil,    49,   nil,    49,    49,
   nil,   nil,    71,     5,     5,   nil,   nil,   nil,   nil,   nil,
   nil,    60,   nil,   nil,   nil,    60,    43,    60,    88,    21,
   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,   nil,   nil,   nil,    21,    49,   nil,   nil,   nil,
   nil,    60,    60,     5,    88,    88,   nil,   nil,   nil,   nil,
   nil,   nil,    71,    71,     5,   nil,   nil,   nil,   nil,    60,
    60,    60,   nil,   nil,    88,   nil,    60,   nil,   nil,    88,
    71,    71,    71,    69,    69,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,    43,   nil,    62,    62,   nil,   nil,   nil,
   nil,    69,    69,    69,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    43,    43 ]

racc_goto_pointer = [
   nil,    29,     7,    35,    24,     1,   nil,   nil,   -68,    33,
    40,    42,     6,  -247,  -350,  -142,   -89,  -255,  -251,   -98,
   -90,   -11,   -70,  -146,   -86,  -170,   nil,   -65,   -86,  -264,
  -285,  -144,  -171,  -233,   -40,    32,  -140,  -362,   nil,   nil,
    32,   -78,  -138,    90,  -292,   nil,   nil,    33,   nil,    44,
  -122,  -267,    31,   nil,   nil,  -155,  -154,  -238,  -295,  -186,
    -2,    -1,    90,  -229,  -229,   nil,    25,   -37,  -239,    30,
   -79,     9,   nil,   -41,   -79,  -149,  -169,  -210,  -241,  -318,
    19,   nil,    15,   -62,   -13,   nil,   -62,   -62,     1,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,   325,
   326,   327,   215,   nil,   323,    32,    34,    31,    33,   nil,
   152,    43,   nil,   nil,   nil,   nil,   275,   140,   nil,   nil,
   nil,   nil,   nil,   nil,   368,   nil,   nil,   nil,    21,    22,
   nil,   nil,   nil,   nil,   nil,   214,    25,   nil,    27,    35,
   nil,   nil,   nil,    37,    38,   nil,   nil,   nil,   nil,   nil,
   119,   nil,    62,   205,   206,   351,   nil,   nil,   226,   120,
   nil,   123,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    59,    60,    63,    69,   142,    71,   nil,   nil,     4,   151 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 111, :_reduce_1,
  1, 113, :_reduce_2,
  3, 113, :_reduce_3,
  1, 114, :_reduce_4,
  2, 114, :_reduce_5,
  0, 117, :_reduce_6,
  1, 117, :_reduce_7,
  3, 117, :_reduce_8,
  1, 118, :_reduce_9,
  1, 118, :_reduce_10,
  1, 118, :_reduce_11,
  1, 118, :_reduce_12,
  0, 123, :_reduce_13,
  1, 123, :_reduce_14,
  3, 123, :_reduce_15,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  7, 120, :_reduce_23,
  9, 121, :_reduce_24,
  0, 129, :_reduce_25,
  2, 129, :_reduce_26,
  6, 116, :_reduce_27,
  0, 132, :_reduce_28,
  1, 132, :_reduce_29,
  3, 132, :_reduce_30,
  3, 134, :_reduce_31,
  0, 133, :_reduce_32,
  1, 133, :_reduce_33,
  3, 133, :_reduce_34,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  4, 136, :_reduce_38,
  0, 139, :_reduce_39,
  1, 139, :_reduce_40,
  3, 139, :_reduce_41,
  0, 138, :_reduce_42,
  3, 138, :_reduce_43,
  6, 125, :_reduce_44,
  0, 141, :_reduce_45,
  1, 141, :_reduce_46,
  3, 141, :_reduce_47,
  2, 142, :_reduce_48,
  3, 143, :_reduce_49,
  1, 143, :_reduce_50,
  4, 126, :_reduce_51,
  1, 145, :_reduce_none,
  1, 145, :_reduce_53,
  2, 146, :_reduce_54,
  3, 146, :_reduce_55,
  7, 146, :_reduce_56,
  0, 147, :_reduce_57,
  1, 147, :_reduce_58,
  1, 119, :_reduce_59,
  1, 119, :_reduce_60,
  6, 148, :_reduce_61,
  9, 149, :_reduce_62,
  0, 154, :_reduce_63,
  1, 154, :_reduce_64,
  2, 140, :_reduce_65,
  2, 140, :_reduce_66,
  1, 140, :_reduce_67,
  0, 150, :_reduce_68,
  2, 150, :_reduce_69,
  2, 153, :_reduce_70,
  0, 155, :_reduce_71,
  1, 155, :_reduce_72,
  3, 155, :_reduce_73,
  1, 122, :_reduce_74,
  2, 122, :_reduce_75,
  1, 122, :_reduce_76,
  6, 122, :_reduce_77,
  3, 122, :_reduce_78,
  5, 122, :_reduce_79,
  5, 122, :_reduce_80,
  1, 122, :_reduce_81,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_85,
  1, 122, :_reduce_86,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 164, :_reduce_89,
  5, 163, :_reduce_90,
  3, 165, :_reduce_91,
  0, 166, :_reduce_92,
  1, 166, :_reduce_93,
  2, 166, :_reduce_94,
  4, 169, :_reduce_95,
  0, 167, :_reduce_96,
  3, 167, :_reduce_97,
  0, 168, :_reduce_98,
  3, 168, :_reduce_99,
  3, 128, :_reduce_100,
  3, 127, :_reduce_101,
  3, 162, :_reduce_102,
  1, 162, :_reduce_none,
  5, 171, :_reduce_104,
  5, 171, :_reduce_105,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 161, :_reduce_112,
  1, 161, :_reduce_113,
  5, 161, :_reduce_114,
  2, 175, :_reduce_115,
  2, 156, :_reduce_116,
  3, 176, :_reduce_117,
  3, 176, :_reduce_118,
  1, 176, :_reduce_119,
  1, 176, :_reduce_120,
  6, 144, :_reduce_121,
  3, 144, :_reduce_122,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 177, :_reduce_125,
  0, 137, :_reduce_126,
  2, 137, :_reduce_127,
  0, 180, :_reduce_128,
  1, 180, :_reduce_129,
  3, 180, :_reduce_130,
  3, 158, :_reduce_131,
  3, 158, :_reduce_132,
  3, 158, :_reduce_133,
  3, 158, :_reduce_134,
  1, 182, :_reduce_135,
  1, 182, :_reduce_136,
  1, 182, :_reduce_137,
  1, 182, :_reduce_138,
  1, 182, :_reduce_139,
  1, 182, :_reduce_140,
  1, 182, :_reduce_141,
  1, 182, :_reduce_142,
  1, 182, :_reduce_143,
  4, 182, :_reduce_144,
  5, 182, :_reduce_145,
  0, 184, :_reduce_146,
  1, 184, :_reduce_147,
  4, 184, :_reduce_148,
  3, 185, :_reduce_149,
  2, 186, :_reduce_none,
  2, 151, :_reduce_151,
  2, 151, :_reduce_152,
  1, 151, :_reduce_153,
  2, 151, :_reduce_154,
  0, 152, :_reduce_155,
  4, 152, :_reduce_156,
  1, 187, :_reduce_157,
  3, 187, :_reduce_158,
  3, 188, :_reduce_159,
  2, 188, :_reduce_160,
  0, 189, :_reduce_161,
  2, 189, :_reduce_162,
  1, 159, :_reduce_163,
  2, 159, :_reduce_164,
  3, 159, :_reduce_165,
  3, 159, :_reduce_166,
  4, 191, :_reduce_167,
  1, 190, :_reduce_168,
  1, 190, :_reduce_169,
  2, 190, :_reduce_170,
  3, 190, :_reduce_171,
  3, 172, :_reduce_172,
  3, 172, :_reduce_173,
  3, 172, :_reduce_174,
  3, 172, :_reduce_175,
  3, 172, :_reduce_176,
  3, 172, :_reduce_177,
  3, 172, :_reduce_178,
  3, 172, :_reduce_179,
  3, 172, :_reduce_180,
  3, 172, :_reduce_181,
  3, 172, :_reduce_182,
  2, 172, :_reduce_183,
  2, 172, :_reduce_184,
  2, 172, :_reduce_185,
  3, 172, :_reduce_186,
  1, 172, :_reduce_187,
  3, 192, :_reduce_188,
  3, 192, :_reduce_189,
  3, 192, :_reduce_190,
  3, 192, :_reduce_191,
  3, 192, :_reduce_192,
  3, 192, :_reduce_193,
  3, 192, :_reduce_194,
  1, 170, :_reduce_195,
  1, 170, :_reduce_none,
  1, 170, :_reduce_197,
  2, 170, :_reduce_198,
  1, 170, :_reduce_none,
  5, 170, :_reduce_200,
  1, 170, :_reduce_201,
  1, 170, :_reduce_202,
  1, 170, :_reduce_203,
  3, 193, :_reduce_204,
  3, 193, :_reduce_205,
  2, 195, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  0, 194, :_reduce_209,
  3, 194, :_reduce_210,
  0, 196, :_reduce_211,
  1, 196, :_reduce_212,
  3, 196, :_reduce_213,
  4, 179, :_reduce_214,
  0, 197, :_reduce_215,
  1, 197, :_reduce_216,
  3, 197, :_reduce_217,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_244,
  0, 157, :_reduce_245,
  1, 157, :_reduce_none,
  0, 112, :_reduce_247,
  1, 112, :_reduce_248,
  1, 115, :_reduce_249,
  2, 115, :_reduce_250,
  1, 198, :_reduce_251,
  1, 198, :_reduce_none,
  0, 183, :_reduce_253,
  1, 183, :_reduce_none,
  1, 199, :_reduce_none,
  2, 199, :_reduce_none,
  1, 130, :_reduce_257 ]

racc_reduce_n = 258

racc_shift_n = 439

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kNO_GIL => 33,
  :kDTYPE_UINT => 34,
  :kDTYPE_LINT => 35,
  :kDTYPE_LLINT => 36,
  :kDTYPE_CHAR => 37,
  :kDTYPE_I8 => 38,
  :kDTYPE_I16 => 39,
  :kDTYPE_I32 => 40,
  :kDTYPE_I64 => 41,
  :kDTYPE_UI8 => 42,
  :kDTYPE_UI16 => 43,
  :kDTYPE_UI32 => 44,
  :kDTYPE_UI64 => 45,
  :kDTYPE_INT => 46,
  :kDTYPE_F32 => 47,
  :kDTYPE_F64 => 48,
  :kDTYPE_LF64 => 49,
  :kDTYPE_ROBJ => 50,
  :kDTYPE_ULINT => 51,
  :kDTYPE_ULLINT => 52,
  :kDTYPE_VOID => 53,
  :kDTYPE_SIZE_T => 54,
  :kDTYPE_RB_STR => 55,
  :kDTYPE_UCHAR => 56,
  :kDTYPE_BOOL => 57,
  :tCUSTOM_DTYPE => 58,
  :kDTYPE_RB_ARR => 59,
  :kDTYPE_RB_HSH => 60,
  :tLPAREN => 61,
  :tRPAREN => 62,
  :tLSQUARE => 63,
  :tRSQUARE => 64,
  :tIDENTIFIER => 65,
  :tNL => 66,
  :tCOMMA => 67,
  :tSQUOTE => 68,
  :tSCOLON => 69,
  :EOF => 70,
  :tDOT => 71,
  :tQMARK => 72,
  :tSYMBOL => 73,
  :tLBRACE => 74,
  :tRBRACE => 75,
  :tCOLON => 76,
  :tCOLON2 => 77,
  :tINSTANCE_VAR => 78,
  :tPLUS => 79,
  :tMINUS => 80,
  :tSTAR => 81,
  :tDIVIDE => 82,
  :tEXPO => 83,
  :tMODULUS => 84,
  :tASSIGN => 85,
  :tEQ => 86,
  :tLT => 87,
  :tLTEQ => 88,
  :tGT => 89,
  :tGTEQ => 90,
  :tANDOP => 91,
  :tOROP => 92,
  :tBANG => 93,
  :tOP_ASSIGN => 94,
  :tSTRING => 95,
  :kSIZEOF => 96,
  :tBIT_AND => 97,
  :tBIT_OR => 98,
  :tBIT_XOR => 99,
  :tBIT_LSHIFT => 100,
  :tBIT_RSHIFT => 101,
  :tBIT_NOT => 102,
  :tINTEGER => 103,
  :tFLOAT => 104,
  :tSINGLE_CHAR => 105,
  :ADDRESS_OF => 106,
  :TYPECAST => 107,
  :UMINUS => 108,
  :tNEQ => 109 }

racc_nt_base = 110

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kNO_GIL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tINSTANCE_VAR",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "stmt",
  "klass_stmts",
  "klass_stmt",
  "struct_or_union_def",
  "alias_stmt",
  "op_assign",
  "forward_declaration",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_c_func_tags",
  "stmts",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "begin_block",
  "no_gil_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "opt_array_args",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_1(val, _values, result)
     result = Node.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_15(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_23(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_24(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_25(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_27(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_28(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_29(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_31(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_33(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_38(val, _values, result)
            if !val[3].empty? # function decl
          # HACK: because declared external C functions don't have
          #   implicit self argument.
          val[3].pop
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_40(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_41(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_42(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_43(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_46(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_47(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_48(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_49(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_50(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_51(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_54(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_55(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_56(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_57(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_61(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_62(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end

        # remove VALUE self argument if no_gil function.
        val[4].pop if val[5] == "no_gil"
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[5], val[7])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_63(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_64(val, _values, result)
     result = "no_gil" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_65(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_66(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_67(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_68(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_69(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_71(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_72(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_73(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_74(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_75(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_76(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_77(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_78(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_79(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_80(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_81(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_85(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_86(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_89(val, _values, result)
     result = Statement::NoGilBlock.new val[2]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_90(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_91(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_94(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_95(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_96(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_97(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_98(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_99(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_100(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_101(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_104(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_105(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_112(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_114(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_115(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_116(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_117(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_118(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_121(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_122(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_125(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_126(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_127(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_129(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_130(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_131(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_132(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_133(val, _values, result)
            result = {
          name: Expression::CommandCall.new(
            val[0][0], val[0][1], Expression::ActualArgList.new([])),
          value: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_134(val, _values, result)
            result = {
          name: Expression::InstanceVar.new(val[0]),
          value: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_135(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_136(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_137(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_138(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_139(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_140(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_141(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_142(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_143(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_144(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_145(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_146(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_147(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_148(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_149(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_151(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_152(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_154(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_155(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_156(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_157(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_158(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_159(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_160(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_161(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_164(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_166(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_167(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_168(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_170(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_172(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 628)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 629)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 633)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_182(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_183(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_184(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_185(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_186(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_188(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 644)
  def _reduce_189(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_190(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_191(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_192(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_193(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 649)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 652)
  def _reduce_195(val, _values, result)
    
    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_197(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 657)
  def _reduce_198(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_200(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 670)
  def _reduce_201(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_202(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::ActualArgList.new([Expression::Literal::Int.new('0')]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 676)
  def _reduce_203(val, _values, result)
     result = Expression::InstanceVar.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 681)
  def _reduce_204(val, _values, result)
            result = Expression::Colon2.new(val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 685)
  def _reduce_205(val, _values, result)
          result = Expression::Colon2.new(val[0], val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 692)
  def _reduce_206(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 698)
  def _reduce_207(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 702)
  def _reduce_208(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 706)
  def _reduce_209(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 709)
  def _reduce_210(val, _values, result)
          result = Expression::ActualArgList.new(val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 713)
  def _reduce_211(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 714)
  def _reduce_212(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 715)
  def _reduce_213(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 720)
  def _reduce_214(val, _values, result)
            result = Expression::ElementRef.new(
          val[0],
          Expression::ActualArgList.new(val[2])
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 727)
  def _reduce_215(val, _values, result)
     result = nil  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 728)
  def _reduce_216(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 729)
  def _reduce_217(val, _values, result)
     result = [*val[0], val[2]]  
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'parser.racc', 739)
  def _reduce_244(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 743)
  def _reduce_245(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.racc', 747)
  def _reduce_247(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 748)
  def _reduce_248(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 751)
  def _reduce_249(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 752)
  def _reduce_250(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 755)
  def _reduce_251(val, _values, result)
    
    result
  end
.,.,

# reduce 252 omitted

module_eval(<<'.,.,', 'parser.racc', 759)
  def _reduce_253(val, _values, result)
    
    result
  end
.,.,

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

module_eval(<<'.,.,', 'parser.racc', 767)
  def _reduce_257(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
