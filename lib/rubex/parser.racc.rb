#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'
require_relative 'helpers.rb'

include Rubex::AST
include Rubex::Helpers

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 770)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token
  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "arr"
    return [:kDTYPE_RB_ARR, match]
  elsif match == "hsh"
    return [:kDTYPE_RB_HSH, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def construct_function_argument data
  Rubex::Helpers.construct_function_argument data
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  left = val[0]
  right = val[2]
  operator = val[1][0]
  
  expression =
    case operator
    when '+'
      Expression::BinaryAdd.new(left, operator, right)
    when '-'
      Expression::BinaryMinus.new(left, operator, right)
    when '*'
      Expression::BinaryMultiply.new(left, operator, right)
    when '/'
      Expression::BinaryDivide.new(left, operator, right)
    when '**'
      Expression::BinaryExpo.new(left, operator, right)
    when '%'
      Expression::BinaryMod.new(left, operator, right)
    when '&'
      Expression::BinaryAnd.new(left, operator, right)
    when '|'
      Expression::BinaryOr.new(left, operator, right)
    when '<<'
      Expression::BinaryLShift.new(left, operator, right)
    when '>>'
      Expression::BinaryRShift.new(left, operator, right)
    when '^'
      Expression::BinaryXor.new(left, operator, right)
    else
      raise "Cannot identify operator #{operator}"
    end

  
   Statement::Assign.new(left.dup, expression, location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrFuncDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def force_into_func_ptr_internal_args data
  data.map! do |arg|
    Expression::FuncPtrInternalArgDeclaration.new(arg.data_hash)
  end 
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'23,208,26,28,197,184,197,284,29,134,193,51,52,53,19,193,20,18,24,112',
'55,41,316,36,72,40,111,285,30,17,73,39,74,75,76,77,78,79,80,81,82,83',
'84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,192,56,150,44',
'150,217,222,185,142,7,224,54,57,226,134,102,260,65,307,128,129,317,106',
'308,60,226,128,129,128,129,63,145,50,71,66,23,133,26,28,67,47,48,49',
'29,128,129,51,52,53,19,107,20,18,24,108,55,41,385,36,72,40,109,386,30',
'17,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,64,143,56,358,44,5,134,382,6,372,284,403,54,57',
'287,114,402,224,65,5,132,142,6,143,300,60,226,226,133,226,285,63,226',
'50,71,66,23,141,26,28,67,47,48,49,29,128,129,51,52,53,19,144,20,150',
'24,5,55,41,6,36,72,40,128,129,30,17,73,39,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,142,56,143',
'44,5,378,222,6,128,129,224,54,57,426,150,5,141,65,6,5,226,179,6,139',
'60,226,5,188,226,6,63,150,50,71,66,23,128,129,190,67,47,48,49,128,129',
'194,51,52,53,19,134,20,142,24,5,55,41,6,23,72,5,128,129,6,17,73,128',
'129,199,51,52,53,19,215,20,220,24,309,55,41,310,23,72,312,128,129,311',
'17,73,128,129,221,51,52,53,19,56,20,120,24,5,55,41,6,228,72,54,57,128',
'129,17,73,154,155,156,157,158,159,150,56,5,120,5,6,262,6,158,50,71,54',
'57,161,162,150,314,47,48,49,156,157,158,159,56,150,120,156,157,158,159',
'267,50,71,54,57,5,348,349,6,47,48,49,154,155,156,157,158,159,154,155',
'156,157,158,159,50,71,23,430,376,204,205,275,47,48,49,206,207,51,52',
'53,19,19,20,20,24,5,55,41,6,5,72,5,6,283,6,17,73,128,129,74,75,76,77',
'78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100',
'286,56,290,120,5,5,5,6,6,6,291,54,57,128,129,128,129,128,129,348,349',
'292,128,106,296,26,28,300,305,143,141,29,50,71,51,52,53,19,158,20,47',
'48,49,55,41,158,36,72,40,158,158,30,185,73,39,74,75,76,77,78,79,80,81',
'82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,188,56',
'333,44,5,339,305,6,350,353,355,54,57,359,221,368,150,65,371,150,379',
'381,384,387,60,389,391,392,106,398,63,401,50,71,66,134,408,26,28,67',
'47,48,49,29,305,226,51,52,53,19,150,20,389,150,305,55,41,134,36,72,40',
'431,432,30,305,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89',
'90,91,92,93,94,95,96,97,98,99,100,64,,56,,44,5,,,6,,,,54,57,,,,,65,',
',,,,,60,,,,,,63,,50,71,66,,,26,28,67,47,48,49,29,,,51,52,53,19,,20,',
',,55,41,,36,72,40,,,30,,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,,56,,44,,,,,,,,54,57,',
',,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28,67,47,48,49,29,,,51,52,53,19',
',20,,,,55,41,,36,72,40,,,30,,73,39,74,75,76,77,78,79,80,81,82,83,84',
'85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,,56,,44,,,,,,,,54',
'57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28,67,47,48,49,29,,,51,52',
'53,19,,20,,,,55,41,,36,72,40,,,30,,73,39,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,,56,,44,,',
',,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28,67,47,48,49,29',
',,51,52,53,19,,20,,,,55,41,,36,72,40,,,30,,73,39,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64,,56',
',44,,,,,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28,67,47,48',
'49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40,,,30,,73,39,74,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,64',
',56,,44,5,,,6,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28,67',
'47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40,,,30,,73,39,74,75,76',
'77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99',
'100,64,,56,,44,,,,,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,,,26,28',
'67,47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40,,,30,,73,39,74,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,64,,56,,44,5,,,6,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50,71,66,',
',26,28,67,47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40,,,30,,73',
'39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95',
'96,97,98,99,100,64,,56,,44,5,,,6,,,,54,57,,,,,65,,,,,,,60,,,,,,63,,50',
'71,66,,,26,28,67,47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40,,',
'30,,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93',
'94,95,96,97,98,99,100,64,,56,,44,,,,,,,,54,57,,,,,65,,,,,,,60,,,,,,63',
',50,71,66,,,26,28,67,47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36,72,40',
',,30,,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92',
'93,94,95,96,97,98,99,100,64,,56,,44,,,,,,,,54,57,,,,,65,,,,,,,60,,,',
',,63,,50,71,66,,,26,28,67,47,48,49,29,,,51,52,53,19,,20,,,,55,41,,36',
'72,40,,,30,,73,39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90',
'91,92,93,94,95,96,97,98,99,100,64,,56,,44,5,,,6,,,,54,57,,,,,65,51,52',
'53,,,,60,,,55,,,63,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55',
',,,72,,,,,,73,,,64,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,60,64,,56,,120',
'63,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72,50,71',
'66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,124,,56,,120',
'154,155,156,157,158,159,,54,57,,,,,65,,,,,160,161,162,64,,56,,120,,',
'50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72,50,71,66',
',,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64,,56,,120,154',
'155,156,157,158,159,,54,57,,,,,65,,,,,160,161,162,64,,56,,120,63,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72,50,71,66,,',
'73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64,,56,,120,,,,,',
',,54,57,,,,,65,,,,,,,60,176,,56,,120,63,,50,71,66,,,54,57,67,47,48,49',
'65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,',
',,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56',
',120,,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71',
'66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64,,56,,120',
',,,,,,,54,57,,,,,65,,,,,,,60,176,,56,,120,63,,50,71,66,,,54,57,67,47',
'48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53',
',,,,,,55,,,,72,,,,,,73,,,64,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,60,64',
',56,,120,63,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63',
'72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64',
',56,,120,,,,,,,,54,57,,,,,65,,,,,,,60,64,,56,,120,63,,50,71,66,,,54',
'57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72,50,71,66,,,73,,67,47,48',
'49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64,,56,,120,,,,,,,,54,57,,,,,65',
',,,,,,60,64,,56,,120,63,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,',
',60,,,55,,,63,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,64,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,60,64,,56,,120,63,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72,50,71,66,,',
'73,,67,47,48,49,51,52,53,,,,,,,55,,,,72,,,,,,73,,,,64,,56,,120,,,,,',
',,54,57,,,,,65,,,,,,,60,,56,,120,,63,,50,71,66,,54,57,,67,47,48,49,51',
'52,53,,,,,,,55,,,,72,50,71,,,,73,,,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56,,120,,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,',
'67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54',
'57,,,,,65,,,,,,,,176,,56,,120,,,50,71,66,,,54,57,67,47,48,49,65,51,52',
'53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56,,120,,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,',
'67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54',
'57,,,,,65,,,,,,,,176,,56,,120,,,50,71,66,,,54,57,67,47,48,49,65,51,52',
'53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56,,120,,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,',
'67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54',
'57,,,,,65,,,,,,,,176,,56,,120,,,50,71,66,,,54,57,67,47,48,49,65,51,52',
'53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56,,120,,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,',
'67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54',
'57,,,,,65,,,,,,,,176,,56,,120,,,50,71,66,,,54,57,67,47,48,49,65,51,52',
'53,,,,,,,55,,,,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72',
',,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176,,56,,120,,,50',
'71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50,71,66,,,73,',
'67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,64,,56,,120,,,,,,,,54',
'57,,,,,65,,,,,,,60,64,,56,,120,63,,50,71,66,,,54,57,67,47,48,49,65,51',
'52,53,,,,60,,,55,,,63,72,50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,',
'55,,,,72,,,,,,73,,,64,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,60,64,,56,',
'120,63,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,60,,,55,,,63,72',
'50,71,66,,,73,,67,47,48,49,,51,52,53,,,,,,,55,,,,72,,,,,,73,,,,,56,',
'120,,,,,,,,54,57,,,,,,,,,,,,,64,,56,,120,,,50,71,,,,54,57,,47,48,49',
'65,51,52,53,,,,60,,,55,,,63,72,50,71,66,,,73,,67,47,48,49,,51,52,53',
',,,,,,55,,,,72,,,,,,73,,,176,,56,,120,,,,,,,,54,57,,,,,65,,,,,,,,176',
',56,,120,,,50,71,66,,,54,57,67,47,48,49,65,51,52,53,,,,,,,55,,,,72,50',
'71,66,,,73,,67,47,48,49,51,52,53,,,,,,,55,,,,72,,,,,,73,,,,,,56,,120',
',,,,,,,54,57,,,,,,,,,,,,,,56,,120,,,,50,71,,,54,57,,,47,48,49,,,,,,',
',19,,20,,,,,50,71,,,,,,,47,48,49,74,75,76,77,78,79,80,81,82,83,84,85',
'86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,261,,,,,,269,,,,,,,,,',
'154,155,156,157,158,159,,165,167,168,169,170,,281,,,,,160,161,162,163',
'164,,,,,,,,166,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91',
'92,93,94,95,96,97,98,99,100,261,,,,,,,,,,,,261,,,,154,155,156,157,158',
'159,,,204,205,206,207,154,155,156,157,158,159,160,161,162,163,164,,',
',,,,,160,161,162,163,164,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88',
'89,90,91,92,93,94,95,96,97,98,99,100,,,,,,5,,,6,74,75,76,77,78,79,80',
'81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,,-39,,',
',,-39,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',
'95,96,97,98,99,100,,,,,344,74,75,76,77,78,79,80,81,82,83,84,85,86,87',
'88,89,90,91,92,93,94,95,96,97,98,99,100,,,,,344,154,155,156,157,158',
'159,,165,167,168,169,170,,,,,,,160,161,162,163,164,,,,,,,,166,74,75',
'76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98',
'99,100,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',
'95,96,97,98,99,100,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90',
'91,92,93,94,95,96,97,98,99,100,74,75,76,77,78,79,80,81,82,83,84,85,86',
'87,88,89,90,91,92,93,94,95,96,97,98,99,100,74,75,76,77,78,79,80,81,82',
'83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,74,75,76,77,78',
'79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,154',
'155,156,157,158,159,,,204,205,206,207,154,155,156,157,158,159,160,161',
'162,163,164,154,155,156,157,158,159,,160,161,162,163,164,154,155,156',
'157,158,159,160,161,162,163,164,154,155,156,157,158,159,,160,161,162',
'163,164,154,155,156,157,158,159,160,161,162,163,164,154,155,156,157',
'158,159,,160,161,162,163,164,154,155,156,157,158,159,160,161,162,163',
'164,154,155,156,157,158,159,,160,161,162,163,164,,,,,,,160,161,162,163',
'164' ]
        racc_action_table = arr = ::Array.new(4668, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,127,2,2,122,107,393,192,2,241,113,2,2,2,2,134,2,2,2,20,2,2,241,2,2',
'2,20,192,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,113,2,122,2,393,134,138,107,46,1,138,2,2,242,42,7,172,2,231,127',
'127,242,16,231,2,138,122,122,393,393,2,46,2,2,2,104,42,104,104,2,2,2',
'2,104,172,172,104,104,104,104,17,104,104,104,18,104,104,341,104,104',
'104,19,341,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104',
'104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104',
'217,104,298,104,104,328,338,104,318,217,362,104,104,195,23,362,304,104',
'0,41,120,0,120,298,104,338,318,328,195,217,104,304,104,104,104,105,120',
'105,105,104,104,104,104,105,35,35,105,105,105,105,45,105,56,105,3,105',
'105,3,105,105,105,117,117,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,44,105,44,105,105,332,404,105,182,182,404,105,105,412',
'57,8,44,105,8,11,332,71,11,44,105,404,39,108,412,39,105,109,105,105',
'105,265,216,216,110,105,105,105,105,227,227,114,265,265,265,265,118',
'265,121,265,40,265,265,40,373,265,211,230,230,211,265,265,232,232,123',
'373,373,373,373,132,373,135,373,233,373,373,233,375,373,237,234,234',
'237,373,373,235,235,136,375,375,375,375,265,375,265,375,268,375,375',
'268,141,375,265,265,236,236,375,375,249,249,249,249,249,249,148,373',
'276,373,373,276,174,373,175,265,265,373,373,249,249,239,239,265,265',
'265,243,243,243,243,375,183,375,244,244,244,244,185,373,373,375,375',
'320,288,288,320,373,373,373,250,250,250,250,250,250,251,251,251,251',
'251,251,375,375,424,424,330,291,291,188,375,375,375,292,292,424,424',
'424,424,330,424,330,424,358,424,424,358,359,424,398,359,191,398,424',
'424,303,303,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,330,330,330,193,424,200,424',
'424,330,409,424,330,409,202,424,424,365,365,366,366,367,367,428,428',
'203,210,212,213,130,130,214,223,224,228,130,424,424,130,130,130,130',
'245,130,424,424,424,130,130,246,130,130,130,247,248,130,266,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,269,130,275,130,130,281',
'287,130,289,293,297,130,130,300,302,313,314,130,316,329,334,336,340',
'343,130,344,345,346,354,356,130,360,130,130,130,370,374,131,131,130',
'130,130,130,131,378,383,131,131,131,131,385,131,387,390,401,131,131',
'416,131,131,131,425,427,131,431,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,,131,,131,131,,,131,,,,131,131,,,,,131,,,,,,,131,,,',
',,131,,131,131,131,,,196,196,131,131,131,131,196,,,196,196,196,196,',
'196,,,,196,196,,196,196,196,,,196,,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,,196,,196,,,,,,,,196,196,,,,,196,,,,,,,196,,,,,,196',
',196,196,196,,,199,199,196,196,196,196,199,,,199,199,199,199,,199,,',
',199,199,,199,199,199,,,199,,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,,199,,199,,,,,,,,199,199,,,,,199,,,,,,,199,,,,,,199,,199',
'199,199,,,208,208,199,199,199,199,208,,,208,208,208,208,,208,,,,208',
'208,,208,208,208,,,208,,208,208,208,208,208,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
'208,208,,208,,208,,,,,,,,208,208,,,,,208,,,,,,,208,,,,,,208,,208,208',
'208,,,282,282,208,208,208,208,282,,,282,282,282,282,,282,,,,282,282',
',282,282,282,,,282,,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,,282,,282,,,,,,,,282,282,,,,,282,,,,,,,282,,,,,,282,,282,282,282',
',,295,295,282,282,282,282,295,,,295,295,295,295,,295,,,,295,295,,295',
'295,295,,,295,,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,,295',
',295,295,,,295,,,,295,295,,,,,295,,,,,,,295,,,,,,295,,295,295,295,,',
'349,349,295,295,295,295,349,,,349,349,349,349,,349,,,,349,349,,349,349',
'349,,,349,,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349',
'349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,,349,,349',
',,,,,,,349,349,,,,,349,,,,,,,349,,,,,,349,,349,349,349,,,399,399,349',
'349,349,349,399,,,399,399,399,399,,399,,,,399,399,,399,399,399,,,399',
',399,399,399,399,399,399,399,399,399,399,399,399,399,399,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,399,399,,399,,399,399,,',
'399,,,,399,399,,,,,399,,,,,,,399,,,,,,399,,399,399,399,,,400,400,399',
'399,399,399,400,,,400,400,400,400,,400,,,,400,400,,400,400,400,,,400',
',400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400',
'400,400,400,400,400,400,400,400,400,400,400,400,400,,400,,400,400,,',
'400,,,,400,400,,,,,400,,,,,,,400,,,,,,400,,400,400,400,,,417,417,400',
'400,400,400,417,,,417,417,417,417,,417,,,,417,417,,417,417,417,,,417',
',417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,,417,,417,,,,,,',
',417,417,,,,,417,,,,,,,417,,,,,,417,,417,417,417,,,418,418,417,417,417',
'417,418,,,418,418,418,418,,418,,,,418,418,,418,418,418,,,418,,418,418',
'418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418',
'418,418,418,418,418,418,418,418,418,418,418,,418,,418,,,,,,,,418,418',
',,,,418,,,,,,,418,,,,,,418,,418,418,418,,,419,419,418,418,418,418,419',
',,419,419,419,419,,419,,,,419,419,,419,419,419,,,419,,419,419,419,419',
'419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419',
'419,419,419,419,419,419,419,419,419,,419,,419,419,,,419,,,,419,419,',
',,,419,26,26,26,,,,419,,,26,,,419,26,419,419,419,,,26,,419,419,419,419',
',28,28,28,,,,,,,28,,,,28,,,,,,28,,,26,,26,,26,,,,,,,,26,26,,,,,26,,',
',,,,26,28,,28,,28,26,,26,26,26,,,28,28,26,26,26,26,28,29,29,29,,,,28',
',,29,,,28,29,28,28,28,,,29,,28,28,28,28,,30,30,30,,,,,,,30,,,,30,,,',
',,30,,,29,,29,,29,252,252,252,252,252,252,,29,29,,,,,29,,,,,252,252',
'252,30,,30,,30,,,29,29,29,,,30,30,29,29,29,29,30,59,59,59,,,,30,,,59',
',,30,59,30,30,30,,,59,,30,30,30,30,,63,63,63,,,,,,,63,,,,63,,,,,,63',
',,59,,59,,59,253,253,253,253,253,253,,59,59,,,,,59,,,,,253,253,253,63',
',63,,63,59,,59,59,59,,,63,63,59,59,59,59,63,64,64,64,,,,63,,,64,,,63',
'64,63,63,63,,,64,,63,63,63,63,,65,65,65,,,,,,,65,,,,65,,,,,,65,,,64',
',64,,64,,,,,,,,64,64,,,,,64,,,,,,,64,65,,65,,65,64,,64,64,64,,,65,65',
'64,64,64,64,65,66,66,66,,,,,,,66,,,,66,65,65,65,,,66,,65,65,65,65,,67',
'67,67,,,,,,,67,,,,67,,,,,,67,,,66,,66,,66,,,,,,,,66,66,,,,,66,,,,,,',
',67,,67,,67,,,66,66,66,,,67,67,66,66,66,66,67,106,106,106,,,,,,,106',
',,,106,67,67,67,,,106,,67,67,67,67,,124,124,124,,,,,,,124,,,,124,,,',
',,124,,,106,,106,,106,,,,,,,,106,106,,,,,106,,,,,,,106,124,,124,,124',
'106,,106,106,106,,,124,124,106,106,106,106,124,128,128,128,,,,,,,128',
',,,128,124,124,124,,,128,,124,124,124,124,,129,129,129,,,,,,,129,,,',
'129,,,,,,129,,,128,,128,,128,,,,,,,,128,128,,,,,128,,,,,,,128,129,,129',
',129,128,,128,128,128,,,129,129,128,128,128,128,129,133,133,133,,,,129',
',,133,,,129,133,129,129,129,,,133,,129,129,129,129,,139,139,139,,,,',
',,139,,,,139,,,,,,139,,,133,,133,,133,,,,,,,,133,133,,,,,133,,,,,,,133',
'139,,139,,139,133,,133,133,133,,,139,139,133,133,133,133,139,142,142',
'142,,,,139,,,142,,,139,142,139,139,139,,,142,,139,139,139,139,,143,143',
'143,,,,,,,143,,,,143,,,,,,143,,,142,,142,,142,,,,,,,,142,142,,,,,142',
',,,,,,142,143,,143,,143,142,,142,142,142,,,143,143,142,142,142,142,143',
'144,144,144,,,,143,,,144,,,143,144,143,143,143,,,144,,143,143,143,143',
',145,145,145,,,,,,,145,,,,145,,,,,,145,,,144,,144,,144,,,,,,,,144,144',
',,,,144,,,,,,,144,145,,145,,145,144,,144,144,144,,,145,145,144,144,144',
'144,145,147,147,147,,,,145,,,147,,,145,147,145,145,145,,,147,,145,145',
'145,145,151,151,151,,,,,,,151,,,,151,,,,,,151,,,,147,,147,,147,,,,,',
',,147,147,,,,,147,,,,,,,147,,151,,151,,147,,147,147,147,,151,151,,147',
'147,147,147,154,154,154,,,,,,,154,,,,154,151,151,,,,154,,,151,151,151',
',155,155,155,,,,,,,155,,,,155,,,,,,155,,,154,,154,,154,,,,,,,,154,154',
',,,,154,,,,,,,,155,,155,,155,,,154,154,154,,,155,155,154,154,154,154',
'155,156,156,156,,,,,,,156,,,,156,155,155,155,,,156,,155,155,155,155',
',157,157,157,,,,,,,157,,,,157,,,,,,157,,,156,,156,,156,,,,,,,,156,156',
',,,,156,,,,,,,,157,,157,,157,,,156,156,156,,,157,157,156,156,156,156',
'157,158,158,158,,,,,,,158,,,,158,157,157,157,,,158,,157,157,157,157',
',159,159,159,,,,,,,159,,,,159,,,,,,159,,,158,,158,,158,,,,,,,,158,158',
',,,,158,,,,,,,,159,,159,,159,,,158,158,158,,,159,159,158,158,158,158',
'159,160,160,160,,,,,,,160,,,,160,159,159,159,,,160,,159,159,159,159',
',161,161,161,,,,,,,161,,,,161,,,,,,161,,,160,,160,,160,,,,,,,,160,160',
',,,,160,,,,,,,,161,,161,,161,,,160,160,160,,,161,161,160,160,160,160',
'161,162,162,162,,,,,,,162,,,,162,161,161,161,,,162,,161,161,161,161',
',163,163,163,,,,,,,163,,,,163,,,,,,163,,,162,,162,,162,,,,,,,,162,162',
',,,,162,,,,,,,,163,,163,,163,,,162,162,162,,,163,163,162,162,162,162',
'163,164,164,164,,,,,,,164,,,,164,163,163,163,,,164,,163,163,163,163',
',165,165,165,,,,,,,165,,,,165,,,,,,165,,,164,,164,,164,,,,,,,,164,164',
',,,,164,,,,,,,,165,,165,,165,,,164,164,164,,,165,165,164,164,164,164',
'165,166,166,166,,,,,,,166,,,,166,165,165,165,,,166,,165,165,165,165',
',167,167,167,,,,,,,167,,,,167,,,,,,167,,,166,,166,,166,,,,,,,,166,166',
',,,,166,,,,,,,,167,,167,,167,,,166,166,166,,,167,167,166,166,166,166',
'167,168,168,168,,,,,,,168,,,,168,167,167,167,,,168,,167,167,167,167',
',169,169,169,,,,,,,169,,,,169,,,,,,169,,,168,,168,,168,,,,,,,,168,168',
',,,,168,,,,,,,,169,,169,,169,,,168,168,168,,,169,169,168,168,168,168',
'169,170,170,170,,,,,,,170,,,,170,169,169,169,,,170,,169,169,169,169',
',176,176,176,,,,,,,176,,,,176,,,,,,176,,,170,,170,,170,,,,,,,,170,170',
',,,,170,,,,,,,,176,,176,,176,,,170,170,170,,,176,176,170,170,170,170',
'176,221,221,221,,,,,,,221,,,,221,176,176,176,,,221,,176,176,176,176',
',308,308,308,,,,,,,308,,,,308,,,,,,308,,,221,,221,,221,,,,,,,,221,221',
',,,,221,,,,,,,221,308,,308,,308,221,,221,221,221,,,308,308,221,221,221',
'221,308,310,310,310,,,,308,,,310,,,308,310,308,308,308,,,310,,308,308',
'308,308,,311,311,311,,,,,,,311,,,,311,,,,,,311,,,310,,310,,310,,,,,',
',,310,310,,,,,310,,,,,,,310,311,,311,,311,310,,310,310,310,,,311,311',
'310,310,310,310,311,315,315,315,,,,311,,,315,,,311,315,311,311,311,',
',315,,311,311,311,311,,348,348,348,,,,,,,348,,,,348,,,,,,348,,,,,315',
',315,,,,,,,,315,315,,,,,,,,,,,,,348,,348,,348,,,315,315,,,,348,348,',
'315,315,315,348,351,351,351,,,,348,,,351,,,348,351,348,348,348,,,351',
',348,348,348,348,,352,352,352,,,,,,,352,,,,352,,,,,,352,,,351,,351,',
'351,,,,,,,,351,351,,,,,351,,,,,,,,352,,352,,352,,,351,351,351,,,352',
'352,351,351,351,351,352,369,369,369,,,,,,,369,,,,369,352,352,352,,,369',
',352,352,352,352,389,389,389,,,,,,,389,,,,389,,,,,,389,,,,,,369,,369',
',,,,,,,369,369,,,,,,,,,,,,,,389,,389,,,,369,369,,,389,389,,,369,369',
'369,,,,,,,,186,,186,,,,,389,389,,,,,,,389,389,389,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,173,,,,,,186,,,,,,,,,,173,173,173,173,173,173,,173',
'173,173,173,173,,190,,,,,173,173,173,173,173,,,,,,,,173,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,201,,,,,,,,,,,,263,,,,201,201,201,201,201',
'201,,,201,201,201,201,263,263,263,263,263,263,201,201,201,201,201,,',
',,,,,263,263,263,263,263,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,,,,',
',335,,,335,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,,305,,,,,305,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,,,,,283,386,386,386,386,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,,,,,386,61,61,61,61,61,61,,61,61,61,61,61,,,,,,,61,61,61',
'61,61,,,,,,,,61,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24',
'24,24,24,24,24,24,24,24,24,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,60,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,402,402,402,402,402,402,402,402,402,402,402,402',
'402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,126,126',
'126,126,126,126,,,126,126,126,126,254,254,254,254,254,254,126,126,126',
'126,126,255,255,255,255,255,255,,254,254,254,254,254,256,256,256,256',
'256,256,255,255,255,255,255,257,257,257,257,257,257,,256,256,256,256',
'256,258,258,258,258,258,258,257,257,257,257,257,259,259,259,259,259',
'259,,258,258,258,258,258,395,395,395,395,395,395,259,259,259,259,259',
'396,396,396,396,396,396,,395,395,395,395,395,,,,,,,396,396,396,396,396' ]
        racc_action_check = arr = ::Array.new(4668, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   107,    69,    -2,   143,   nil,   nil,   nil,    75,   199,   nil,
   nil,   203,   nil,   nil,   nil,   nil,    77,    45,    20,    56,
   -39,   nil,   nil,   148,  4357,   nil,  1713,   nil,  1739,  1806,
  1832,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,   210,
   238,   158,     3,   nil,   189,   121,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   141,   198,   nil,  1899,
  4384,  4282,   nil,  1925,  1992,  2018,  2085,  2111,   nil,   nil,
   nil,   210,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,   188,  2178,   -19,   212,   215,
   204,   nil,   nil,    -5,   224,   nil,   nil,   126,   229,   nil,
   114,   241,    -4,   306,  2204,   nil,  4475,   -11,  2271,  2297,
   506,   601,   258,  2364,     0,   258,   257,   nil,     5,  2390,
   nil,   289,  2457,  2483,  2550,  2576,   nil,  2643,   302,   nil,
   nil,  2668,   nil,   nil,  2735,  2761,  2828,  2854,  2921,  2947,
  3014,  3040,  3107,  3133,  3200,  3226,  3293,  3319,  3386,  3412,
  3479,   nil,    14,  4039,   312,   294,  3505,   nil,   nil,  4411,
   nil,   nil,   168,   327,  4438,   334,  4040,   nil,   354,  4465,
  4114,   391,   -65,   413,   nil,   103,   696,   nil,   nil,   791,
   425,  4113,   430,   441,   nil,   nil,   nil,   nil,   886,   nil,
   417,   244,   503,   506,   484,   nil,   196,    92,   nil,   nil,
   nil,  3572,   nil,   452,   451,   nil,   nil,   203,   438,   nil,
   221,    16,   226,   263,   244,   249,   268,   269,   nil,   317,
   nil,   -62,    -7,   308,   315,   441,   448,   452,   453,   284,
   333,   339,  1794,  1887,  4487,  4498,  4510,  4521,  4533,  4544,
   nil,   nil,   nil,  4125,   nil,   283,   451,   nil,   284,   503,
   nil,   nil,   nil,   nil,   nil,   476,   304,   nil,   nil,   nil,
   nil,   508,   981,  4262,   nil,   nil,   nil,   513,   399,   573,
   nil,   342,   346,   574,   nil,  1076,   nil,   575,   150,   nil,
   516,   nil,   498,   366,   106,  4228,   nil,   nil,  3598,   nil,
  3665,  3691,   nil,   508,   518,  3758,   498,   nil,   101,   nil,
   338,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,   521,
   424,   nil,   190,   nil,   585,  4192,   522,   nil,   100,   nil,
   587,    55,   nil,   526,   509,   561,   592,   nil,  3784,  1171,
   nil,  3851,  3877,   nil,   591,   nil,   568,   nil,   378,   382,
   537,   nil,   103,   nil,   nil,   408,   410,   412,   nil,  3944,
   532,   nil,   nil,   306,   601,   329,   nil,   nil,   551,   nil,
   nil,   nil,   nil,   533,   nil,   552,  4294,   536,   nil,  3969,
   555,   nil,   nil,    -2,   nil,  4556,  4567,   nil,   384,  1266,
  1361,   561,  4492,   nil,   195,   nil,   nil,   nil,   nil,   425,
   nil,   nil,   198,   nil,   nil,   nil,   554,  1456,  1551,  1646,
   nil,   nil,   nil,   nil,   423,   567,   nil,   627,   498,   nil,
   nil,   571,   nil,   nil,   nil ]

racc_action_default = [
  -245,  -256,    -6,  -246,  -247,  -249,  -250,  -256,  -245,    -2,
    -4,  -256,    -7,    -9,   -10,   -11,   -12,  -256,  -256,  -256,
  -256,   -59,   -60,   -68,  -256,   -74,  -243,   -76,  -256,  -256,
  -256,   -81,   -82,   -83,   -84,   -85,   -86,   -87,   -88,  -256,
  -256,  -256,  -186,  -126,  -207,  -194,  -207,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -251,  -251,  -162,  -256,
  -256,  -167,  -168,  -256,  -256,  -256,  -256,  -256,  -195,  -196,
  -198,  -256,  -200,  -201,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -231,
  -232,  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -241,
  -242,  -248,   435,    -1,  -246,    -5,  -256,   -25,   -28,  -256,
  -256,   -52,   -53,  -256,  -256,  -126,   -75,  -244,  -186,  -194,
  -207,  -207,  -256,  -256,  -256,  -103,  -256,  -256,  -256,  -256,
   -71,   -71,  -256,  -256,  -256,  -116,  -119,  -120,  -256,  -256,
  -197,  -256,  -209,  -213,  -256,  -256,  -204,  -128,  -252,  -253,
  -255,  -145,  -163,  -126,  -256,  -256,  -256,  -256,  -256,  -256,
  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,
  -256,  -169,  -256,  -167,  -168,  -182,  -256,  -183,  -184,  -256,
    -3,    -8,   -78,  -256,  -256,  -256,   -32,   -29,  -256,   -45,
  -256,  -154,  -152,  -256,   -69,  -256,   -71,  -110,  -111,   -71,
  -256,  -256,  -256,  -256,  -106,  -107,  -108,  -109,   -71,  -164,
  -165,  -245,   -72,  -256,   -92,  -100,  -101,  -152,  -205,  -206,
  -126,  -256,  -126,   -42,  -123,  -124,  -127,  -131,  -203,  -202,
  -210,  -256,  -214,  -256,  -132,  -133,  -129,  -256,  -254,  -251,
  -146,  -256,  -256,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -187,  -188,  -189,  -190,  -191,  -192,
  -170,  -185,  -193,  -256,  -126,   -13,   -25,   -26,  -256,  -256,
   -33,   -35,   -36,   -37,  -126,  -256,  -245,   -46,  -126,   -51,
  -126,  -256,   -71,  -256,  -150,  -151,  -153,   -42,  -112,  -256,
  -102,  -256,  -256,  -256,   -70,  -246,   -89,  -256,   -96,   -93,
  -256,  -117,  -118,  -125,  -256,  -126,  -122,  -208,  -256,  -212,
  -256,  -256,  -143,  -256,  -251,  -256,  -256,  -166,  -256,   -14,
  -245,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -256,  -256,
  -256,   -30,  -256,   -31,  -256,  -246,   -48,   -50,   -54,  -126,
  -256,  -256,  -156,  -256,  -160,   -63,  -256,  -113,  -256,   -71,
   -79,  -256,  -256,   -80,   -73,   -90,   -98,   -94,  -256,  -256,
  -256,   -40,  -256,  -126,   -67,  -211,  -215,  -130,  -144,  -256,
  -148,  -149,  -199,  -246,  -256,   -13,   -27,   -34,   -42,   -44,
   -47,  -126,  -126,   -55,   -61,  -256,  -256,  -160,  -159,  -256,
  -256,   -64,   -77,  -256,  -115,  -104,  -105,   -91,  -256,   -71,
   -71,   -42,  -126,   -43,   -65,   -66,  -147,   -15,   -23,  -256,
   -38,   -49,   -57,  -155,  -157,  -158,  -161,   -71,   -71,   -71,
   -97,   -95,  -121,   -41,  -256,  -256,   -58,  -256,  -112,   -99,
   -24,   -42,   -62,  -114,   -56 ]

racc_goto_table = [
    42,   136,     2,   196,   101,     3,   115,    16,   240,   137,
   103,   326,   187,   104,   270,    46,   105,   147,   151,   277,
   320,   183,   346,   342,   306,     9,   361,   125,   407,   299,
   327,    45,   146,    13,   388,   191,     1,     8,   181,    14,
   186,   268,   153,    15,   130,   131,   362,   276,   336,   110,
   279,   189,   425,   113,   282,   390,   218,   116,   123,   297,
   298,   356,   397,   351,   198,   352,   135,   360,   237,   239,
   315,   341,   152,   174,   117,   229,   122,   415,   127,   407,
   231,   233,   nil,   nil,   nil,   nil,   nil,   nil,   345,   nil,
   238,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,    42,   nil,   101,   101,   146,   nil,    16,
    16,   171,   172,   357,   nil,   126,   nil,    46,    46,   326,
   nil,   326,   200,   423,   nil,   265,   414,   180,    42,    42,
   409,   101,   101,    45,    45,    13,    13,   nil,   327,   272,
   327,    14,    14,    46,    46,    15,    15,   nil,   nil,   241,
   173,   175,   177,   178,   182,   273,   nil,   nil,   377,    45,
    45,   264,   433,   219,   nil,   380,   266,   225,   274,   nil,
   326,   278,   280,   331,   nil,   nil,   209,   210,   302,   410,
   329,   216,   nil,   nil,   nil,   nil,   301,   227,   nil,   327,
   230,   232,   234,   235,    42,   236,   nil,    42,   nil,   nil,
   313,   nil,   422,   nil,   nil,   nil,    42,   nil,   nil,    46,
   201,   nil,    46,   294,   nil,   nil,   295,   nil,   324,   nil,
   nil,    46,   nil,   213,   214,    45,   406,   nil,    45,   nil,
   195,   nil,   434,   nil,   325,   nil,   337,    45,   nil,   nil,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   nil,   nil,   nil,
   nil,   nil,   263,   328,   nil,   343,   nil,   nil,   242,   303,
   nil,   375,   nil,   330,   418,   369,   nil,   nil,   334,   nil,
    42,   335,   nil,   272,   nil,   nil,   nil,   363,   nil,   288,
   nil,   nil,   289,    42,   nil,    46,   101,   nil,   nil,   273,
   354,   293,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    45,   274,   370,   nil,   nil,   nil,   278,   nil,   nil,
   nil,   405,   374,   nil,    45,   373,   324,   413,   324,   nil,
   nil,   101,   417,   225,   nil,   198,   101,   304,   nil,   411,
   nil,   nil,   325,   nil,   325,   nil,   nil,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,   366,   367,
   nil,   nil,    46,   399,   400,   nil,   nil,   241,   343,   nil,
   nil,   328,   nil,   328,   101,   340,   nil,   324,    45,   318,
   nil,   nil,   nil,   nil,   363,   nil,   nil,   416,   nil,   332,
   nil,   nil,   nil,   325,   nil,   338,   393,    42,    42,   nil,
   101,   101,   nil,   419,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    46,   424,    42,    42,    42,   nil,   nil,
   101,   nil,   328,   nil,   nil,   101,   nil,   nil,    45,    45,
    46,    46,    46,   225,   nil,   nil,   nil,   395,   396,   nil,
   nil,   nil,   394,   nil,   nil,   nil,    45,    45,    45,   nil,
   nil,   nil,   nil,   nil,   383,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   404,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   420,   421,   nil,   nil,   nil,   412,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   427,   428,   429 ]

racc_goto_check = [
    60,    34,     2,    50,    88,     5,    21,    12,    75,    67,
     2,    17,    24,     5,    25,    71,     5,    73,    73,    32,
    13,    19,    51,    78,    28,     4,    30,    61,    14,    59,
    18,    69,    84,     9,    79,    41,     1,     3,     8,    10,
    22,    23,    21,    11,     5,     5,    29,    31,    33,    35,
    36,    20,    37,    40,    42,    44,    41,    47,    52,    55,
    56,    57,    58,    63,    20,    64,    66,    68,    70,    74,
    76,    77,    80,    82,    49,    83,    49,    79,    49,    14,
    86,    87,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    60,    60,   nil,    88,    88,    84,   nil,    12,
    12,    49,    49,    59,   nil,    62,   nil,    71,    71,    17,
   nil,    17,    61,    30,   nil,    20,    78,     4,    60,    60,
    13,    88,    88,    69,    69,     9,     9,   nil,    18,    15,
    18,    10,    10,    71,    71,    11,    11,   nil,   nil,    60,
    62,    62,    62,    62,    49,    16,   nil,   nil,    25,    69,
    69,    21,    51,    69,   nil,    32,    21,    69,    21,   nil,
    17,    21,    21,    24,   nil,   nil,    49,    49,    34,    28,
    19,    49,   nil,   nil,   nil,   nil,    67,    49,   nil,    18,
    49,    49,    49,    49,    60,    49,   nil,    60,   nil,   nil,
    73,   nil,    28,   nil,   nil,   nil,    60,   nil,   nil,    71,
    62,   nil,    71,     2,   nil,   nil,     5,   nil,    15,   nil,
   nil,    71,   nil,    43,    43,    69,    75,   nil,    69,   nil,
    27,   nil,    28,   nil,    16,   nil,    34,    69,   nil,   nil,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,   nil,   nil,   nil,
   nil,   nil,    62,    60,   nil,    21,   nil,   nil,    27,    49,
   nil,    20,   nil,     5,    50,    73,   nil,   nil,     2,   nil,
    60,     5,   nil,    15,   nil,   nil,   nil,    21,   nil,    43,
   nil,   nil,    43,    60,   nil,    71,    88,   nil,   nil,    16,
    12,    43,   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,
   nil,    69,    21,    60,   nil,   nil,   nil,    21,   nil,   nil,
   nil,    34,     2,   nil,    69,     5,    15,    20,    15,   nil,
   nil,    88,    20,    69,   nil,    20,    88,    27,   nil,    34,
   nil,   nil,    16,   nil,    16,   nil,   nil,    60,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,    49,    49,
   nil,   nil,    71,     5,     5,   nil,   nil,    60,    21,   nil,
   nil,    60,   nil,    60,    88,    43,   nil,    15,    69,    27,
   nil,   nil,   nil,   nil,    21,   nil,   nil,    60,   nil,    27,
   nil,   nil,   nil,    16,   nil,    27,    49,    60,    60,   nil,
    88,    88,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    71,    71,     5,    60,    60,    60,   nil,   nil,
    88,   nil,    60,   nil,   nil,    88,   nil,   nil,    69,    69,
    71,    71,    71,    69,   nil,   nil,   nil,    62,    62,   nil,
   nil,   nil,    43,   nil,   nil,   nil,    69,    69,    69,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    43,   nil,   nil,   nil,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    43,    43 ]

racc_goto_pointer = [
   nil,    36,     2,    35,    23,     5,   nil,   nil,   -67,    31,
    37,    41,     5,  -245,  -345,   -47,   -31,  -254,  -235,   -86,
   -58,   -18,   -68,  -145,   -96,  -172,   nil,   115,  -199,  -259,
  -279,  -142,  -170,  -230,   -42,    29,  -140,  -360,   nil,   nil,
    30,   -78,  -137,    93,  -290,   nil,   nil,    31,   nil,    48,
  -119,  -266,    29,   nil,   nil,  -155,  -154,  -237,  -294,  -185,
    -2,    -2,    86,  -228,  -227,   nil,    23,   -34,  -237,    29,
   -79,    13,   nil,   -39,   -82,  -143,  -171,  -212,  -260,  -310,
    13,   nil,     9,   -66,   -14,   nil,   -62,   -62,     1,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    12,   321,
   322,   323,   212,   nil,   319,    32,    34,    31,    33,   nil,
   149,    43,   nil,   nil,   nil,   nil,   271,   138,   nil,   nil,
   nil,   nil,   nil,   nil,   364,   nil,   nil,   nil,    21,    22,
   nil,   nil,   nil,   nil,   nil,   211,    25,   nil,    27,    35,
   nil,   nil,   nil,    37,    38,   nil,   nil,   nil,   nil,   nil,
   118,   nil,    61,   202,   203,   347,   nil,   nil,   223,   119,
   nil,   121,    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    59,    62,    68,   140,    70,   nil,   nil,     4,   148 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 110, :_reduce_1,
  1, 112, :_reduce_2,
  3, 112, :_reduce_3,
  1, 113, :_reduce_4,
  2, 113, :_reduce_5,
  0, 116, :_reduce_6,
  1, 116, :_reduce_7,
  3, 116, :_reduce_8,
  1, 117, :_reduce_9,
  1, 117, :_reduce_10,
  1, 117, :_reduce_11,
  1, 117, :_reduce_12,
  0, 122, :_reduce_13,
  1, 122, :_reduce_14,
  3, 122, :_reduce_15,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  7, 119, :_reduce_23,
  9, 120, :_reduce_24,
  0, 128, :_reduce_25,
  2, 128, :_reduce_26,
  6, 115, :_reduce_27,
  0, 131, :_reduce_28,
  1, 131, :_reduce_29,
  3, 131, :_reduce_30,
  3, 133, :_reduce_31,
  0, 132, :_reduce_32,
  1, 132, :_reduce_33,
  3, 132, :_reduce_34,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  4, 135, :_reduce_38,
  0, 138, :_reduce_39,
  1, 138, :_reduce_40,
  3, 138, :_reduce_41,
  0, 137, :_reduce_42,
  3, 137, :_reduce_43,
  6, 124, :_reduce_44,
  0, 140, :_reduce_45,
  1, 140, :_reduce_46,
  3, 140, :_reduce_47,
  2, 141, :_reduce_48,
  3, 142, :_reduce_49,
  1, 142, :_reduce_50,
  4, 125, :_reduce_51,
  1, 144, :_reduce_none,
  1, 144, :_reduce_53,
  2, 145, :_reduce_54,
  3, 145, :_reduce_55,
  7, 145, :_reduce_56,
  0, 146, :_reduce_57,
  1, 146, :_reduce_58,
  1, 118, :_reduce_59,
  1, 118, :_reduce_60,
  6, 147, :_reduce_61,
  9, 148, :_reduce_62,
  0, 153, :_reduce_63,
  1, 153, :_reduce_64,
  2, 139, :_reduce_65,
  2, 139, :_reduce_66,
  1, 139, :_reduce_67,
  0, 149, :_reduce_68,
  2, 149, :_reduce_69,
  2, 152, :_reduce_70,
  0, 154, :_reduce_71,
  1, 154, :_reduce_72,
  3, 154, :_reduce_73,
  1, 121, :_reduce_74,
  2, 121, :_reduce_75,
  1, 121, :_reduce_76,
  6, 121, :_reduce_77,
  3, 121, :_reduce_78,
  5, 121, :_reduce_79,
  5, 121, :_reduce_80,
  1, 121, :_reduce_81,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_85,
  1, 121, :_reduce_86,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 163, :_reduce_89,
  5, 162, :_reduce_90,
  3, 164, :_reduce_91,
  0, 165, :_reduce_92,
  1, 165, :_reduce_93,
  2, 165, :_reduce_94,
  4, 168, :_reduce_95,
  0, 166, :_reduce_96,
  3, 166, :_reduce_97,
  0, 167, :_reduce_98,
  3, 167, :_reduce_99,
  3, 127, :_reduce_100,
  3, 126, :_reduce_101,
  3, 161, :_reduce_102,
  1, 161, :_reduce_none,
  5, 170, :_reduce_104,
  5, 170, :_reduce_105,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  0, 160, :_reduce_112,
  1, 160, :_reduce_113,
  5, 160, :_reduce_114,
  2, 174, :_reduce_115,
  2, 155, :_reduce_116,
  3, 175, :_reduce_117,
  3, 175, :_reduce_118,
  1, 175, :_reduce_119,
  1, 175, :_reduce_120,
  6, 143, :_reduce_121,
  3, 143, :_reduce_122,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 176, :_reduce_125,
  0, 136, :_reduce_126,
  2, 136, :_reduce_127,
  0, 179, :_reduce_128,
  1, 179, :_reduce_129,
  3, 179, :_reduce_130,
  3, 157, :_reduce_131,
  3, 157, :_reduce_132,
  3, 157, :_reduce_133,
  1, 181, :_reduce_134,
  1, 181, :_reduce_135,
  1, 181, :_reduce_136,
  1, 181, :_reduce_137,
  1, 181, :_reduce_138,
  1, 181, :_reduce_139,
  1, 181, :_reduce_140,
  1, 181, :_reduce_141,
  1, 181, :_reduce_142,
  4, 181, :_reduce_143,
  5, 181, :_reduce_144,
  0, 183, :_reduce_145,
  1, 183, :_reduce_146,
  4, 183, :_reduce_147,
  3, 184, :_reduce_148,
  2, 185, :_reduce_none,
  2, 150, :_reduce_150,
  2, 150, :_reduce_151,
  1, 150, :_reduce_152,
  2, 150, :_reduce_153,
  0, 151, :_reduce_154,
  4, 151, :_reduce_155,
  1, 186, :_reduce_156,
  3, 186, :_reduce_157,
  3, 187, :_reduce_158,
  2, 187, :_reduce_159,
  0, 188, :_reduce_160,
  2, 188, :_reduce_161,
  1, 158, :_reduce_162,
  2, 158, :_reduce_163,
  3, 158, :_reduce_164,
  3, 158, :_reduce_165,
  4, 190, :_reduce_166,
  1, 189, :_reduce_167,
  1, 189, :_reduce_168,
  2, 189, :_reduce_169,
  3, 189, :_reduce_170,
  3, 171, :_reduce_171,
  3, 171, :_reduce_172,
  3, 171, :_reduce_173,
  3, 171, :_reduce_174,
  3, 171, :_reduce_175,
  3, 171, :_reduce_176,
  3, 171, :_reduce_177,
  3, 171, :_reduce_178,
  3, 171, :_reduce_179,
  3, 171, :_reduce_180,
  3, 171, :_reduce_181,
  2, 171, :_reduce_182,
  2, 171, :_reduce_183,
  2, 171, :_reduce_184,
  3, 171, :_reduce_185,
  1, 171, :_reduce_186,
  3, 191, :_reduce_187,
  3, 191, :_reduce_188,
  3, 191, :_reduce_189,
  3, 191, :_reduce_190,
  3, 191, :_reduce_191,
  3, 191, :_reduce_192,
  3, 191, :_reduce_193,
  1, 169, :_reduce_194,
  1, 169, :_reduce_none,
  1, 169, :_reduce_196,
  2, 169, :_reduce_197,
  1, 169, :_reduce_none,
  5, 169, :_reduce_199,
  1, 169, :_reduce_200,
  1, 169, :_reduce_201,
  3, 192, :_reduce_202,
  3, 192, :_reduce_203,
  2, 194, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  0, 193, :_reduce_207,
  3, 193, :_reduce_208,
  0, 195, :_reduce_209,
  1, 195, :_reduce_210,
  3, 195, :_reduce_211,
  4, 178, :_reduce_212,
  0, 196, :_reduce_213,
  1, 196, :_reduce_214,
  3, 196, :_reduce_215,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_242,
  0, 156, :_reduce_243,
  1, 156, :_reduce_none,
  0, 111, :_reduce_245,
  1, 111, :_reduce_246,
  1, 114, :_reduce_247,
  2, 114, :_reduce_248,
  1, 197, :_reduce_249,
  1, 197, :_reduce_none,
  0, 182, :_reduce_251,
  1, 182, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  1, 129, :_reduce_255 ]

racc_reduce_n = 256

racc_shift_n = 435

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kIF => 5,
  :kELSIF => 6,
  :kELSE => 7,
  :kTHEN => 8,
  :kSTATIC_ARRAY => 9,
  :kFOR => 10,
  :kDOT_EACH => 11,
  :kDO => 12,
  :kTRUE => 13,
  :kFALSE => 14,
  :kNIL => 15,
  :kSTRUCT => 16,
  :kUNION => 17,
  :kALIAS => 18,
  :kLIB => 19,
  :kCFUNC => 20,
  :kSELF => 21,
  :kNULL => 22,
  :kFWD => 23,
  :kATTACH => 24,
  :kBREAK => 25,
  :kBLOCK_GIVEN => 26,
  :kBEGIN => 27,
  :kRESCUE => 28,
  :kENSURE => 29,
  :kWHILE => 30,
  :kCLASS => 31,
  :kDATA_VAR => 32,
  :kNO_GIL => 33,
  :kDTYPE_UINT => 34,
  :kDTYPE_LINT => 35,
  :kDTYPE_LLINT => 36,
  :kDTYPE_CHAR => 37,
  :kDTYPE_I8 => 38,
  :kDTYPE_I16 => 39,
  :kDTYPE_I32 => 40,
  :kDTYPE_I64 => 41,
  :kDTYPE_UI8 => 42,
  :kDTYPE_UI16 => 43,
  :kDTYPE_UI32 => 44,
  :kDTYPE_UI64 => 45,
  :kDTYPE_INT => 46,
  :kDTYPE_F32 => 47,
  :kDTYPE_F64 => 48,
  :kDTYPE_LF64 => 49,
  :kDTYPE_ROBJ => 50,
  :kDTYPE_ULINT => 51,
  :kDTYPE_ULLINT => 52,
  :kDTYPE_VOID => 53,
  :kDTYPE_SIZE_T => 54,
  :kDTYPE_RB_STR => 55,
  :kDTYPE_UCHAR => 56,
  :kDTYPE_BOOL => 57,
  :tCUSTOM_DTYPE => 58,
  :kDTYPE_RB_ARR => 59,
  :kDTYPE_RB_HSH => 60,
  :tLPAREN => 61,
  :tRPAREN => 62,
  :tLSQUARE => 63,
  :tRSQUARE => 64,
  :tIDENTIFIER => 65,
  :tNL => 66,
  :tCOMMA => 67,
  :tSQUOTE => 68,
  :tSCOLON => 69,
  :EOF => 70,
  :tDOT => 71,
  :tQMARK => 72,
  :tSYMBOL => 73,
  :tLBRACE => 74,
  :tRBRACE => 75,
  :tCOLON => 76,
  :tCOLON2 => 77,
  :tPLUS => 78,
  :tMINUS => 79,
  :tSTAR => 80,
  :tDIVIDE => 81,
  :tEXPO => 82,
  :tMODULUS => 83,
  :tASSIGN => 84,
  :tEQ => 85,
  :tLT => 86,
  :tLTEQ => 87,
  :tGT => 88,
  :tGTEQ => 89,
  :tANDOP => 90,
  :tOROP => 91,
  :tBANG => 92,
  :tOP_ASSIGN => 93,
  :tSTRING => 94,
  :kSIZEOF => 95,
  :tBIT_AND => 96,
  :tBIT_OR => 97,
  :tBIT_XOR => 98,
  :tBIT_LSHIFT => 99,
  :tBIT_RSHIFT => 100,
  :tBIT_NOT => 101,
  :tINTEGER => 102,
  :tFLOAT => 103,
  :tSINGLE_CHAR => 104,
  :ADDRESS_OF => 105,
  :TYPECAST => 106,
  :UMINUS => 107,
  :tNEQ => 108 }

racc_nt_base = 109

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kNO_GIL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "kDTYPE_RB_ARR",
  "kDTYPE_RB_HSH",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tCOLON2",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "opt_terms",
  "top_compstmts",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "stmt",
  "klass_stmts",
  "klass_stmt",
  "struct_or_union_def",
  "alias_stmt",
  "op_assign",
  "forward_declaration",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_c_func_tags",
  "stmts",
  "var_decl_or_init",
  "opt_expr",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "begin_block",
  "no_gil_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "const_namespacing",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "opt_array_args",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
     result = Node.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_15(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_23(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_24(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_25(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_27(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_28(val, _values, result)
     result = [{}]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_29(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_31(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_33(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_38(val, _values, result)
            if !val[3].empty? # function decl
          # HACK: because declared external C functions don't have
          #   implicit self argument.
          val[3].pop
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_40(val, _values, result)
     result = [construct_function_argument(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_41(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_42(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_43(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << construct_function_argument(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_46(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_47(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_48(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_49(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_50(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_51(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_54(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_55(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_56(val, _values, result)
            force_into_func_ptr_internal_args(val[6])
        
        result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_57(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_61(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_62(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              construct_function_argument(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end

        # remove VALUE self argument if no_gil function.
        val[4].pop if val[5] == "no_gil"
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[5], val[7])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_63(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_64(val, _values, result)
     result = "no_gil" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_65(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_66(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_67(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_68(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_69(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_71(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_72(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_74(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_75(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_76(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_77(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_78(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_79(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_80(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_81(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_85(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_86(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_89(val, _values, result)
     result = Statement::NoGilBlock.new val[2]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_90(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_91(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_94(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_95(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_96(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_97(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_98(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_99(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_100(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_101(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_104(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_105(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_112(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_114(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_115(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_116(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_117(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_118(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_121(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          force_into_func_ptr_internal_args(val[5])          
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_122(val, _values, result)
            result = {}

        if !val[2].empty? # function pointer
          force_into_func_ptr_internal_args(val[5])
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_125(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_126(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_127(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_129(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_130(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_131(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_132(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_133(val, _values, result)
          result = {
        name: Expression::CommandCall.new(
          val[0][0], val[0][1], Expression::ActualArgList.new([])),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_134(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_135(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_136(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_137(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_138(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_139(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_140(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_141(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_142(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_143(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_144(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_145(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_146(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_147(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_148(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_150(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_151(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_152(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_153(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_154(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_155(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_156(val, _values, result)
            result = [construct_function_argument(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_157(val, _values, result)
            result = [*val[0], construct_function_argument(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 569)
  def _reduce_158(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_159(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_160(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_161(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_162(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_163(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_164(val, _values, result)
     result = Expression::BinaryBoolAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_165(val, _values, result)
     result = Expression::BinaryBoolOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_166(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_167(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_168(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_169(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_170(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_171(val, _values, result)
     result = Expression::BinaryAdd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_172(val, _values, result)
     result = Expression::BinaryMinus.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_173(val, _values, result)
     result = Expression::BinaryMultiply.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_174(val, _values, result)
     result = Expression::BinaryDivide.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_175(val, _values, result)
     result = Expression::BinaryExpo.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_176(val, _values, result)
     result = Expression::BinaryMod.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_177(val, _values, result)
     result = Expression::BinaryAnd.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_178(val, _values, result)
     result = Expression::BinaryOr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_179(val, _values, result)
     result = Expression::BinaryXor.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_180(val, _values, result)
     result = Expression::BinaryLShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_181(val, _values, result)
     result = Expression::BinaryRShift.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_182(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 628)
  def _reduce_183(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 629)
  def _reduce_184(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_185(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_187(val, _values, result)
     result = Expression::BinaryBoolEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_188(val, _values, result)
     result = Expression::BinaryBoolNEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_189(val, _values, result)
     result = Expression::BinaryBoolLt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_190(val, _values, result)
     result = Expression::BinaryBoolLtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_191(val, _values, result)
     result = Expression::BinaryBoolGt.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_192(val, _values, result)
     result = Expression::BinaryBoolGtEq.new(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_193(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_194(val, _values, result)
    
    result
  end
.,.,

# reduce 195 omitted

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_196(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_197(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_199(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 661)
  def _reduce_200(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 664)
  def _reduce_201(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::ActualArgList.new([Expression::Literal::Int.new('0')]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 671)
  def _reduce_202(val, _values, result)
            result = Expression::Colon2.new(val[0], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 675)
  def _reduce_203(val, _values, result)
          result = Expression::Colon2.new(val[0], val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 682)
  def _reduce_204(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 688)
  def _reduce_205(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 692)
  def _reduce_206(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 696)
  def _reduce_207(val, _values, result)
     result = Expression::ActualArgList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 699)
  def _reduce_208(val, _values, result)
          result = Expression::ActualArgList.new(val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_209(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 704)
  def _reduce_210(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 705)
  def _reduce_211(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 710)
  def _reduce_212(val, _values, result)
            result = Expression::ElementRef.new(
          val[0],
          Expression::ActualArgList.new(val[2])
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 717)
  def _reduce_213(val, _values, result)
     result = nil  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 718)
  def _reduce_214(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_215(val, _values, result)
     result = [*val[0], val[2]]  
    result
  end
.,.,

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

module_eval(<<'.,.,', 'parser.racc', 729)
  def _reduce_242(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 733)
  def _reduce_243(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.racc', 737)
  def _reduce_245(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 738)
  def _reduce_246(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 741)
  def _reduce_247(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 742)
  def _reduce_248(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 745)
  def _reduce_249(val, _values, result)
    
    result
  end
.,.,

# reduce 250 omitted

module_eval(<<'.,.,', 'parser.racc', 749)
  def _reduce_251(val, _values, result)
    
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.racc', 757)
  def _reduce_255(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
