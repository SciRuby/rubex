lib "rubex/ruby"; end
lib "rubex/ruby/encoding"; end
lib "rubex/stdlib"; end

lib "csv.h", link: "csv"
  struct csv_parser
  end

  struct FILE
  end

  int CSV_STRICT_FINI
  int CSV_APPEND_NULL
  int CSV_EPARSE
  int CSV_ENOMEM
  int CSV_ETOOBIG
  int CSV_EINVALID
  int CSV_STRICT

  int csv_init(csv_parser, unsigned char)
  int csv_fini(csv_parser, void (*cb1)(void *, size_t, void *), void (*cb2)(int, void *), void *)
  void csv_free(csv_parser *)
  int csv_error(csv_parser *)
  size_t csv_parse(csv_parser *p, void *, size_t, void (*cb1)(void *, size_t, void *), void (*cb2)(int, void *), void *)
end

struct rcsv_metadata
  # Internal state
  bool skip_current_row       # Used by only_rows and except_rows filters to skip parsing of the row remainder
  size_t current_col          # Current column's index
  size_t current_row          # Current row's index

  object last_entry           # last entry that's going to be appended to result
  object result               # parsed data
end

class RcsvParseError < StandardError
end

class Rcsv
  cfunc void end_of_field_callback(void* field, size_t field_size, void* data)
    char* field_str = <char *>field
    rcsv_metadata* meta_p = <rcsv_metadata*>data
    rcsv_metadata meta = meta_p[0]
    char row_conversion = 0
    object parsed_field

    parsed_field = ENCODED_STR_NEW(field_str, field_size)

    meta_p[0].last_entry.push(parsed_field) # /* last_entry << field */
    meta_p[0].current_col += 1
    return
  end

  cfunc void end_of_line_callback(int last_char, void* data)
    rcsv_metadata* meta = <rcsv_metadata *> data
    
    meta.result.push(meta.last_entry)
    meta.last_entry = [] if last_char != -1
    meta.current_col = 0
    meta.current_row += 1
  end

  cfunc object ENCODED_STR_NEW(char* string, int length)
    return rb_str_new(string, length)
  end

  cfunc void setup_rcsv_metadata_defaults(rcsv_metadata *p_meta)
    p_meta.skip_current_row = 0
    p_meta.current_col = 0
    p_meta.current_row = 0
    p_meta.result = []
  end

  def self.parse(file_name, opts)
    rcsv_metadata meta
    object csvio, options, option
    csv_parser cp
    ensure_container = []
    unsigned char csv_options = CSV_STRICT_FINI | CSV_APPEND_NULL
    int csv_string_len

    setup_rcsv_metadata_defaults(&meta)
    csvio = StringIO.new(file_name)

    if csv_init(&cp, csv_options) == -1
      raise(RcsvParseError, "Failed to initialize libcsv.")
    end
    meta.last_entry = []

    begin
      while true do
        csvstr = csvio.read

        break if csvstr.nil? || csvstr.size == 0

        char* csv_string = csvstr
        csv_string_len = csvstr.size

        if csv_string_len != csv_parse(&cp, csv_string, csv_string_len, &end_of_field_callback, &end_of_line_callback, &meta)
          int error = csv_error(&cp)

          if error == CSV_EPARSE
            raise(RcsvParseError, "Error when parsing malformed data.")
          elsif error == CSV_ENOMEM
            raise(RcsvParseError, "No memory.")
          elsif error == CSV_ETOOBIG
            raise(RcsvParseError, "Field data data is too large.")
          elsif error == CSV_EINVALID
            raise(RcsvParseError)
          else
            raise(RcsvParseError, "Something went wrong.")
          end
        end
      end

      csv_fini(&cp, &end_of_field_callback, &end_of_line_callback, &meta)
    ensure
      csv_free(&cp) if &cp
    end

    return meta.result
  end
end
